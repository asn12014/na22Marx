
C:\Users\alexsn\AppData\Local\Temp\1\arduino\sketches\1A5EB07363DD63BDDB21EEAEAF67DC9D/NA22_Marx_uC_3cell.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_18>
      4c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03 02 02 03                                .......

00000093 <digital_pin_to_bit_mask_PGM>:
      93:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a3:	04 08 10 20 40 80 40                                ... @.@

000000aa <digital_pin_to_timer_PGM>:
      aa:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000000c2 <__ctors_start>:
__ctors_start():
      c2:	ef 03       	fmulsu	r22, r23

000000c4 <__ctors_end>:
__dtors_start():
      c4:	56 07       	cpc	r21, r22

000000c6 <__dtors_end>:
__dtors_end():
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d4 e0       	ldi	r29, 0x04	; 4
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      d2:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      d4:	aa e2       	ldi	r26, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      d6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      dc:	a4 31       	cpi	r26, 0x14	; 20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      de:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>

000000e2 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      e2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e8:	e6 ef       	ldi	r30, 0xF6	; 246
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ea:	fb e1       	ldi	r31, 0x1B	; 27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ee:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      f0:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      f2:	aa 32       	cpi	r26, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f4:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      f8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      fa:	c2 e6       	ldi	r28, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      fc:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     100:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     102:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     104:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     108:	c1 36       	cpi	r28, 0x61	; 97
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     10a:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 28 04 	call	0x850	; 0x850 <main>
     112:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__do_global_dtors>

00000116 <__bad_interrupt>:
__vector_22():
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <digitalWrite>:
digitalWrite():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	e6 55       	subi	r30, 0x56	; 86
     120:	ff 4f       	sbci	r31, 0xFF	; 255
     122:	24 91       	lpm	r18, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     124:	fc 01       	movw	r30, r24
     126:	ed 56       	subi	r30, 0x6D	; 109
     128:	ff 4f       	sbci	r31, 0xFF	; 255
     12a:	34 91       	lpm	r19, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     12c:	fc 01       	movw	r30, r24
     12e:	e4 58       	subi	r30, 0x84	; 132
     130:	ff 4f       	sbci	r31, 0xFF	; 255
     132:	e4 91       	lpm	r30, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     134:	ee 23       	and	r30, r30
     136:	c9 f0       	breq	.+50     	; 0x16a <digitalWrite+0x50>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     138:	22 23       	and	r18, r18
     13a:	39 f0       	breq	.+14     	; 0x14a <digitalWrite+0x30>
turnOffPWM():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     13c:	24 30       	cpi	r18, 0x04	; 4
     13e:	01 f1       	breq	.+64     	; 0x180 <digitalWrite+0x66>
     140:	a8 f4       	brcc	.+42     	; 0x16c <digitalWrite+0x52>
     142:	22 30       	cpi	r18, 0x02	; 2
     144:	69 f1       	breq	.+90     	; 0x1a0 <digitalWrite+0x86>
     146:	23 30       	cpi	r18, 0x03	; 3
     148:	79 f1       	breq	.+94     	; 0x1a8 <digitalWrite+0x8e>
digitalWrite():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	ee 0f       	add	r30, r30
     14e:	ff 1f       	adc	r31, r31
     150:	ee 58       	subi	r30, 0x8E	; 142
     152:	ff 4f       	sbci	r31, 0xFF	; 255
     154:	a5 91       	lpm	r26, Z+
     156:	b4 91       	lpm	r27, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     158:	8f b7       	in	r24, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     15a:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     15c:	ec 91       	ld	r30, X
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     15e:	61 11       	cpse	r22, r1
     160:	26 c0       	rjmp	.+76     	; 0x1ae <digitalWrite+0x94>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     162:	30 95       	com	r19
     164:	3e 23       	and	r19, r30
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     166:	3c 93       	st	X, r19
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     168:	8f bf       	out	0x3f, r24	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
     16a:	08 95       	ret
turnOffPWM():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     16c:	28 30       	cpi	r18, 0x08	; 8
     16e:	71 f0       	breq	.+28     	; 0x18c <digitalWrite+0x72>
     170:	29 30       	cpi	r18, 0x09	; 9
     172:	91 f0       	breq	.+36     	; 0x198 <digitalWrite+0x7e>
     174:	25 30       	cpi	r18, 0x05	; 5
     176:	49 f7       	brne	.-46     	; 0x14a <digitalWrite+0x30>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     178:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     17c:	8f 7d       	andi	r24, 0xDF	; 223
     17e:	03 c0       	rjmp	.+6      	; 0x186 <digitalWrite+0x6c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     180:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     184:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     186:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     18a:	df cf       	rjmp	.-66     	; 0x14a <digitalWrite+0x30>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     18c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     190:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     192:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     196:	d9 cf       	rjmp	.-78     	; 0x14a <digitalWrite+0x30>
     198:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     19c:	8f 7d       	andi	r24, 0xDF	; 223
     19e:	f9 cf       	rjmp	.-14     	; 0x192 <digitalWrite+0x78>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     1a0:	84 b5       	in	r24, 0x24	; 36
     1a2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     1a4:	84 bd       	out	0x24, r24	; 36
     1a6:	d1 cf       	rjmp	.-94     	; 0x14a <digitalWrite+0x30>
     1a8:	84 b5       	in	r24, 0x24	; 36
     1aa:	8f 7d       	andi	r24, 0xDF	; 223
     1ac:	fb cf       	rjmp	.-10     	; 0x1a4 <digitalWrite+0x8a>
digitalWrite():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     1ae:	3e 2b       	or	r19, r30
     1b0:	da cf       	rjmp	.-76     	; 0x166 <digitalWrite+0x4c>

000001b2 <pinMode>:
pinMode():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	fc 01       	movw	r30, r24
     1ba:	ed 56       	subi	r30, 0x6D	; 109
     1bc:	ff 4f       	sbci	r31, 0xFF	; 255
     1be:	24 91       	lpm	r18, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     1c0:	84 58       	subi	r24, 0x84	; 132
     1c2:	9f 4f       	sbci	r25, 0xFF	; 255
     1c4:	fc 01       	movw	r30, r24
     1c6:	84 91       	lpm	r24, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     1c8:	88 23       	and	r24, r24
     1ca:	d1 f0       	breq	.+52     	; 0x200 <pinMode+0x4e>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	fc 01       	movw	r30, r24
     1d4:	e8 59       	subi	r30, 0x98	; 152
     1d6:	ff 4f       	sbci	r31, 0xFF	; 255
     1d8:	a5 91       	lpm	r26, Z+
     1da:	b4 91       	lpm	r27, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     1dc:	fc 01       	movw	r30, r24
     1de:	ee 58       	subi	r30, 0x8E	; 142
     1e0:	ff 4f       	sbci	r31, 0xFF	; 255
     1e2:	c5 91       	lpm	r28, Z+
     1e4:	d4 91       	lpm	r29, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     1e6:	61 11       	cpse	r22, r1
     1e8:	0e c0       	rjmp	.+28     	; 0x206 <pinMode+0x54>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     1ea:	9f b7       	in	r25, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     1ec:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     1ee:	8c 91       	ld	r24, X
     1f0:	e2 2f       	mov	r30, r18
     1f2:	e0 95       	com	r30
     1f4:	8e 23       	and	r24, r30
     1f6:	8c 93       	st	X, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     1f8:	28 81       	ld	r18, Y
     1fa:	e2 23       	and	r30, r18
     1fc:	e8 83       	st	Y, r30
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     1fe:	9f bf       	out	0x3f, r25	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     206:	8f b7       	in	r24, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     208:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     20a:	ec 91       	ld	r30, X
     20c:	e2 2b       	or	r30, r18
     20e:	ec 93       	st	X, r30
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     210:	8f bf       	out	0x3f, r24	; 63
     212:	f6 cf       	rjmp	.-20     	; 0x200 <pinMode+0x4e>

00000214 <analogRead>:
analogRead():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     214:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     216:	80 64       	ori	r24, 0x40	; 64
     218:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     21c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     220:	80 64       	ori	r24, 0x40	; 64
     222:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     226:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     22a:	86 fd       	sbrc	r24, 6
     22c:	fc cf       	rjmp	.-8      	; 0x226 <analogRead+0x12>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     22e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     232:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
     236:	08 95       	ret

00000238 <micros>:
micros():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     238:	3f b7       	in	r19, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     23a:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     23c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <timer0_overflow_count>
     240:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <timer0_overflow_count+0x1>
     244:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <timer0_overflow_count+0x2>
     248:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <timer0_overflow_count+0x3>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     24c:	26 b5       	in	r18, 0x26	; 38
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     24e:	a8 9b       	sbis	0x15, 0	; 21
     250:	05 c0       	rjmp	.+10     	; 0x25c <micros+0x24>
     252:	2f 3f       	cpi	r18, 0xFF	; 255
     254:	19 f0       	breq	.+6      	; 0x25c <micros+0x24>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	a1 1d       	adc	r26, r1
     25a:	b1 1d       	adc	r27, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     25c:	3f bf       	out	0x3f, r19	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     25e:	ba 2f       	mov	r27, r26
     260:	a9 2f       	mov	r26, r25
     262:	98 2f       	mov	r25, r24
     264:	88 27       	eor	r24, r24
     266:	bc 01       	movw	r22, r24
     268:	cd 01       	movw	r24, r26
     26a:	62 0f       	add	r22, r18
     26c:	71 1d       	adc	r23, r1
     26e:	81 1d       	adc	r24, r1
     270:	91 1d       	adc	r25, r1
     272:	43 e0       	ldi	r20, 0x03	; 3
     274:	66 0f       	add	r22, r22
     276:	77 1f       	adc	r23, r23
     278:	88 1f       	adc	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	4a 95       	dec	r20
     27e:	d1 f7       	brne	.-12     	; 0x274 <micros+0x3c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     280:	08 95       	ret

00000282 <String::StringIfHelper() const>:
StringIfHelper():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.h:51
{
  // use a function pointer to allow for "if (s)" without the
  // complications of an operator bool(). for more information, see:
  // http://www.artima.com/cppsource/safebool.html
  typedef void (String::*StringIfHelperType)() const;
  void StringIfHelper() const {}
     282:	08 95       	ret

00000284 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     284:	af 92       	push	r10
     286:	bf 92       	push	r11
     288:	cf 92       	push	r12
     28a:	df 92       	push	r13
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	6c 01       	movw	r12, r24
     29a:	7b 01       	movw	r14, r22
     29c:	8b 01       	movw	r16, r22
     29e:	04 0f       	add	r16, r20
     2a0:	15 1f       	adc	r17, r21
     2a2:	eb 01       	movw	r28, r22
     2a4:	5e 01       	movw	r10, r28
     2a6:	ae 18       	sub	r10, r14
     2a8:	bf 08       	sbc	r11, r15
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     2aa:	c0 17       	cp	r28, r16
     2ac:	d1 07       	cpc	r29, r17
     2ae:	59 f0       	breq	.+22     	; 0x2c6 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     2b0:	69 91       	ld	r22, Y+
     2b2:	d6 01       	movw	r26, r12
     2b4:	ed 91       	ld	r30, X+
     2b6:	fc 91       	ld	r31, X
     2b8:	01 90       	ld	r0, Z+
     2ba:	f0 81       	ld	r31, Z
     2bc:	e0 2d       	mov	r30, r0
     2be:	c6 01       	movw	r24, r12
     2c0:	09 95       	icall
     2c2:	89 2b       	or	r24, r25
     2c4:	79 f7       	brne	.-34     	; 0x2a4 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     2c6:	c5 01       	movw	r24, r10
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	df 90       	pop	r13
     2d6:	cf 90       	pop	r12
     2d8:	bf 90       	pop	r11
     2da:	af 90       	pop	r10
     2dc:	08 95       	ret

000002de <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     2de:	fc 01       	movw	r30, r24
     2e0:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     2e2:	44 8d       	ldd	r20, Z+28	; 0x1c
     2e4:	25 2f       	mov	r18, r21
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	84 2f       	mov	r24, r20
     2ea:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2ec:	82 1b       	sub	r24, r18
     2ee:	93 0b       	sbc	r25, r19
     2f0:	54 17       	cp	r21, r20
     2f2:	10 f0       	brcs	.+4      	; 0x2f8 <HardwareSerial::availableForWrite()+0x1a>
     2f4:	cf 96       	adiw	r24, 0x3f	; 63
     2f6:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     2f8:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     2fa:	08 95       	ret

000002fc <HardwareSerial::read()>:
read():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     2fc:	fc 01       	movw	r30, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2fe:	91 8d       	ldd	r25, Z+25	; 0x19
     300:	82 8d       	ldd	r24, Z+26	; 0x1a
     302:	98 17       	cp	r25, r24
     304:	61 f0       	breq	.+24     	; 0x31e <HardwareSerial::read()+0x22>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     306:	a2 8d       	ldd	r26, Z+26	; 0x1a
     308:	ae 0f       	add	r26, r30
     30a:	bf 2f       	mov	r27, r31
     30c:	b1 1d       	adc	r27, r1
     30e:	5d 96       	adiw	r26, 0x1d	; 29
     310:	8c 91       	ld	r24, X
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     312:	92 8d       	ldd	r25, Z+26	; 0x1a
     314:	9f 5f       	subi	r25, 0xFF	; 255
     316:	9f 73       	andi	r25, 0x3F	; 63
     318:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     322:	08 95       	ret

00000324 <HardwareSerial::peek()>:
peek():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     324:	fc 01       	movw	r30, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     326:	91 8d       	ldd	r25, Z+25	; 0x19
     328:	82 8d       	ldd	r24, Z+26	; 0x1a
     32a:	98 17       	cp	r25, r24
     32c:	31 f0       	breq	.+12     	; 0x33a <HardwareSerial::peek()+0x16>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     32e:	82 8d       	ldd	r24, Z+26	; 0x1a
     330:	e8 0f       	add	r30, r24
     332:	f1 1d       	adc	r31, r1
     334:	85 8d       	ldd	r24, Z+29	; 0x1d
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     33e:	08 95       	ret

00000340 <HardwareSerial::available()>:
available():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     340:	fc 01       	movw	r30, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     342:	91 8d       	ldd	r25, Z+25	; 0x19
     344:	22 8d       	ldd	r18, Z+26	; 0x1a
     346:	89 2f       	mov	r24, r25
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	80 5c       	subi	r24, 0xC0	; 192
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	82 1b       	sub	r24, r18
     350:	91 09       	sbc	r25, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     352:	8f 73       	andi	r24, 0x3F	; 63
     354:	99 27       	eor	r25, r25
     356:	08 95       	ret

00000358 <Serial0_available()>:
Serial0_available():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     358:	8b e6       	ldi	r24, 0x6B	; 107
     35a:	93 e0       	ldi	r25, 0x03	; 3
     35c:	0e 94 a0 01 	call	0x340	; 0x340 <HardwareSerial::available()>
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	89 2b       	or	r24, r25
     364:	09 f4       	brne	.+2      	; 0x368 <Serial0_available()+0x10>
     366:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     368:	82 2f       	mov	r24, r18
     36a:	08 95       	ret

0000036c <serialEventRun()>:
serialEventRun():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	89 2b       	or	r24, r25
     372:	29 f0       	breq	.+10     	; 0x37e <serialEventRun()+0x12>
     374:	0e 94 ac 01 	call	0x358	; 0x358 <Serial0_available()>
     378:	81 11       	cpse	r24, r1
     37a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     37e:	08 95       	ret

00000380 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     380:	fc 01       	movw	r30, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     382:	a4 8d       	ldd	r26, Z+28	; 0x1c
     384:	a8 0f       	add	r26, r24
     386:	b9 2f       	mov	r27, r25
     388:	b1 1d       	adc	r27, r1
     38a:	a3 5a       	subi	r26, 0xA3	; 163
     38c:	bf 4f       	sbci	r27, 0xFF	; 255
     38e:	2c 91       	ld	r18, X
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     390:	84 8d       	ldd	r24, Z+28	; 0x1c
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	8f 73       	andi	r24, 0x3F	; 63
     398:	99 27       	eor	r25, r25
     39a:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     39c:	a6 89       	ldd	r26, Z+22	; 0x16
     39e:	b7 89       	ldd	r27, Z+23	; 0x17
     3a0:	2c 93       	st	X, r18
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3a2:	a0 89       	ldd	r26, Z+16	; 0x10
     3a4:	b1 89       	ldd	r27, Z+17	; 0x11
     3a6:	8c 91       	ld	r24, X
     3a8:	83 70       	andi	r24, 0x03	; 3
     3aa:	80 64       	ori	r24, 0x40	; 64
     3ac:	8c 93       	st	X, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     3ae:	93 8d       	ldd	r25, Z+27	; 0x1b
     3b0:	84 8d       	ldd	r24, Z+28	; 0x1c
     3b2:	98 13       	cpse	r25, r24
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     3b6:	02 88       	ldd	r0, Z+18	; 0x12
     3b8:	f3 89       	ldd	r31, Z+19	; 0x13
     3ba:	e0 2d       	mov	r30, r0
     3bc:	80 81       	ld	r24, Z
     3be:	8f 7d       	andi	r24, 0xDF	; 223
     3c0:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     3c2:	08 95       	ret

000003c4 <HardwareSerial::write(unsigned char)>:
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3da:	98 13       	cpse	r25, r24
     3dc:	1a c0       	rjmp	.+52     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3de:	e8 89       	ldd	r30, Y+16	; 0x10
     3e0:	f9 89       	ldd	r31, Y+17	; 0x11
     3e2:	80 81       	ld	r24, Z
     3e4:	85 ff       	sbrs	r24, 5
     3e6:	15 c0       	rjmp	.+42     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3e8:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\alexsn\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ea:	f8 94       	cli
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     3ec:	ee 89       	ldd	r30, Y+22	; 0x16
     3ee:	ff 89       	ldd	r31, Y+23	; 0x17
     3f0:	60 83       	st	Z, r22
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3f2:	e8 89       	ldd	r30, Y+16	; 0x10
     3f4:	f9 89       	ldd	r31, Y+17	; 0x11
     3f6:	80 81       	ld	r24, Z
     3f8:	83 70       	andi	r24, 0x03	; 3
     3fa:	80 64       	ori	r24, 0x40	; 64
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     3fc:	80 83       	st	Z, r24
__iRestore():
c:\users\alexsn\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3fe:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	08 95       	ret
     412:	f6 2e       	mov	r15, r22
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     414:	0b 8d       	ldd	r16, Y+27	; 0x1b
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	0f 5f       	subi	r16, 0xFF	; 255
     41a:	1f 4f       	sbci	r17, 0xFF	; 255
     41c:	0f 73       	andi	r16, 0x3F	; 63
     41e:	11 27       	eor	r17, r17
     420:	e0 2e       	mov	r14, r16
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     422:	8c 8d       	ldd	r24, Y+28	; 0x1c
     424:	8e 11       	cpse	r24, r14
     426:	0c c0       	rjmp	.+24     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	07 fc       	sbrc	r0, 7
     42c:	fa cf       	rjmp	.-12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     42e:	e8 89       	ldd	r30, Y+16	; 0x10
     430:	f9 89       	ldd	r31, Y+17	; 0x11
     432:	80 81       	ld	r24, Z
     434:	85 ff       	sbrs	r24, 5
     436:	f5 cf       	rjmp	.-22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     438:	ce 01       	movw	r24, r28
     43a:	0e 94 c0 01 	call	0x380	; 0x380 <HardwareSerial::_tx_udr_empty_irq()>
     43e:	f1 cf       	rjmp	.-30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     440:	eb 8d       	ldd	r30, Y+27	; 0x1b
     442:	ec 0f       	add	r30, r28
     444:	fd 2f       	mov	r31, r29
     446:	f1 1d       	adc	r31, r1
     448:	e3 5a       	subi	r30, 0xA3	; 163
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	f0 82       	st	Z, r15
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     44e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\alexsn\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     450:	f8 94       	cli
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     452:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     454:	ea 89       	ldd	r30, Y+18	; 0x12
     456:	fb 89       	ldd	r31, Y+19	; 0x13
     458:	80 81       	ld	r24, Z
     45a:	80 62       	ori	r24, 0x20	; 32
     45c:	cf cf       	rjmp	.-98     	; 0x3fc <HardwareSerial::write(unsigned char)+0x38>

0000045e <HardwareSerial::flush()>:
flush():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     464:	88 8d       	ldd	r24, Y+24	; 0x18
     466:	88 23       	and	r24, r24
     468:	b9 f0       	breq	.+46     	; 0x498 <HardwareSerial::flush()+0x3a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     46a:	aa 89       	ldd	r26, Y+18	; 0x12
     46c:	bb 89       	ldd	r27, Y+19	; 0x13
     46e:	e8 89       	ldd	r30, Y+16	; 0x10
     470:	f9 89       	ldd	r31, Y+17	; 0x11
     472:	8c 91       	ld	r24, X
     474:	85 fd       	sbrc	r24, 5
     476:	03 c0       	rjmp	.+6      	; 0x47e <HardwareSerial::flush()+0x20>
     478:	80 81       	ld	r24, Z
     47a:	86 fd       	sbrc	r24, 6
     47c:	0d c0       	rjmp	.+26     	; 0x498 <HardwareSerial::flush()+0x3a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	07 fc       	sbrc	r0, 7
     482:	f7 cf       	rjmp	.-18     	; 0x472 <HardwareSerial::flush()+0x14>
     484:	8c 91       	ld	r24, X
     486:	85 ff       	sbrs	r24, 5
     488:	f2 cf       	rjmp	.-28     	; 0x46e <HardwareSerial::flush()+0x10>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     48a:	80 81       	ld	r24, Z
     48c:	85 ff       	sbrs	r24, 5
     48e:	ed cf       	rjmp	.-38     	; 0x46a <HardwareSerial::flush()+0xc>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     490:	ce 01       	movw	r24, r28
     492:	0e 94 c0 01 	call	0x380	; 0x380 <HardwareSerial::_tx_udr_empty_irq()>
     496:	e9 cf       	rjmp	.-46     	; 0x46a <HardwareSerial::flush()+0xc>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <long round<int>(int const&) [clone .isra.4]>:
_Z5roundIiElRKT_.isra.4():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Arduino.h:324
	auto max(const T& a, const L& b) -> decltype((b < a) ? b : a) {
		return (a < b) ? b : a;
	}

	template<class T>
	long round(const T& x) {
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	ec 01       	movw	r28, r24
     4a4:	bc 01       	movw	r22, r24
     4a6:	99 0f       	add	r25, r25
     4a8:	88 0b       	sbc	r24, r24
     4aa:	99 0b       	sbc	r25, r25
     4ac:	0e 94 3d 0a 	call	0x147a	; 0x147a <__floatsisf>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Arduino.h:325
		return (long)(x >= 0 ? (x + 0.5) : (x - 0.5));
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	5f e3       	ldi	r21, 0x3F	; 63
     4b8:	d7 fd       	sbrc	r29, 7
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <long round<int>(int const&) [clone .isra.4]+0x2c>
     4bc:	0e 94 09 0b 	call	0x1612	; 0x1612 <__addsf3>
     4c0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__fixsfsi>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Arduino.h:326
	}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Arduino.h:325
		return (a < b) ? b : a;
	}

	template<class T>
	long round(const T& x) {
		return (long)(x >= 0 ? (x + 0.5) : (x - 0.5));
     4ca:	0e 94 08 0b 	call	0x1610	; 0x1610 <__subsf3>
     4ce:	f8 cf       	rjmp	.-16     	; 0x4c0 <long round<int>(int const&) [clone .isra.4]+0x22>

000004d0 <SPIClass::endTransaction()>:
endTransaction():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
     4d0:	08 95       	ret

000004d2 <SPIClass::transfer(unsigned char)>:
transfer():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     4d2:	8e bd       	out	0x2e, r24	; 46
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     4d4:	00 00       	nop
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     4d6:	0d b4       	in	r0, 0x2d	; 45
     4d8:	07 fe       	sbrs	r0, 7
     4da:	fd cf       	rjmp	.-6      	; 0x4d6 <SPIClass::transfer(unsigned char)+0x4>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:221
    return SPDR;
     4dc:	8e b5       	in	r24, 0x2e	; 46
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:222
  }
     4de:	08 95       	ret

000004e0 <SPIClass::beginTransaction(SPISettings)>:
beginTransaction():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     4e0:	8c bd       	out	0x2c, r24	; 44
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:207
    SPSR = settings.spsr;
     4e2:	9d bd       	out	0x2d, r25	; 45
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:208
  }
     4e4:	08 95       	ret

000004e6 <subStr(char*, char*, int) [clone .constprop.6]>:
subStr():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:294
    }
  }
}

// Function to return a substring defined by a delimiter at an index
char* subStr (char* str, char *delim, int index) {
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <subStr(char*, char*, int) [clone .constprop.6]+0xe>
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	7b 01       	movw	r14, r22
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:298
  char *act, *sub, *ptr;
  static char copy[MAX_STRING_LEN];
  int i;
  strcpy(copy, str);
     4fa:	bc 01       	movw	r22, r24
     4fc:	85 ed       	ldi	r24, 0xD5	; 213
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <strcpy>
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:299
  for (i = 1, act = copy; i <= index; i++, act = NULL) {
     508:	01 e0       	ldi	r16, 0x01	; 1
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	25 ed       	ldi	r18, 0xD5	; 213
     50e:	31 e0       	ldi	r19, 0x01	; 1
     510:	e0 16       	cp	r14, r16
     512:	f1 06       	cpc	r15, r17
     514:	7c f0       	brlt	.+30     	; 0x534 <__stack+0x35>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:300
     sub = strtok_r(act, delim, &ptr);
     516:	ae 01       	movw	r20, r28
     518:	4f 5f       	subi	r20, 0xFF	; 255
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	6a e1       	ldi	r22, 0x1A	; 26
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	c9 01       	movw	r24, r18
     522:	0e 94 81 07 	call	0xf02	; 0xf02 <strtok_r>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:301
     if (sub == NULL) break;
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	29 f0       	breq	.+10     	; 0x534 <__stack+0x35>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:299
char* subStr (char* str, char *delim, int index) {
  char *act, *sub, *ptr;
  static char copy[MAX_STRING_LEN];
  int i;
  strcpy(copy, str);
  for (i = 1, act = copy; i <= index; i++, act = NULL) {
     52a:	0f 5f       	subi	r16, 0xFF	; 255
     52c:	1f 4f       	sbci	r17, 0xFF	; 255
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	ee cf       	rjmp	.-36     	; 0x510 <__stack+0x11>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:304
     sub = strtok_r(act, delim, &ptr);
     if (sub == NULL) break;
  }
  return sub;
}
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	08 95       	ret

00000546 <Print::print(char const*) [clone .constprop.3]>:
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	69 f0       	breq	.+26     	; 0x564 <Print::print(char const*) [clone .constprop.3]+0x1e>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
     54a:	fc 01       	movw	r30, r24
     54c:	01 90       	ld	r0, Z+
     54e:	00 20       	and	r0, r0
     550:	e9 f7       	brne	.-6      	; 0x54c <Print::print(char const*) [clone .constprop.3]+0x6>
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	af 01       	movw	r20, r30
     556:	48 1b       	sub	r20, r24
     558:	59 0b       	sbc	r21, r25
     55a:	bc 01       	movw	r22, r24
     55c:	8b e6       	ldi	r24, 0x6B	; 107
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	0c 94 42 01 	jmp	0x284	; 0x284 <Print::write(unsigned char const*, unsigned int)>
print():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	08 95       	ret

0000056a <String::toInt() const>:
toInt():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	11 f0       	breq	.+4      	; 0x578 <String::toInt() const+0xe>
     574:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <atol>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:740
  return 0;
}
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	cb 01       	movw	r24, r22
     57e:	08 95       	ret

00000580 <String::move(String&)>:
move():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:195
  return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	8c 01       	movw	r16, r24
     58a:	eb 01       	movw	r28, r22
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:196
  if (buffer) {
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	e1 f0       	breq	.+56     	; 0x5ce <String::move(String&)+0x4e>
     596:	68 81       	ld	r22, Y
     598:	79 81       	ldd	r23, Y+1	; 0x01
_ZNK6StringcvMS_KFvvEEv.isra.0():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
     59a:	61 15       	cp	r22, r1
     59c:	71 05       	cpc	r23, r1
     59e:	a9 f0       	breq	.+42     	; 0x5ca <String::move(String&)+0x4a>
move():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
     5a0:	42 81       	ldd	r20, Z+2	; 0x02
     5a2:	53 81       	ldd	r21, Z+3	; 0x03
     5a4:	2c 81       	ldd	r18, Y+4	; 0x04
     5a6:	3d 81       	ldd	r19, Y+5	; 0x05
     5a8:	42 17       	cp	r20, r18
     5aa:	53 07       	cpc	r21, r19
     5ac:	70 f0       	brcs	.+28     	; 0x5ca <String::move(String&)+0x4a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
     5ae:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <strcpy>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
     5b2:	8c 81       	ldd	r24, Y+4	; 0x04
     5b4:	9d 81       	ldd	r25, Y+5	; 0x05
     5b6:	f8 01       	movw	r30, r16
     5b8:	95 83       	std	Z+5, r25	; 0x05
     5ba:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
     5bc:	1d 82       	std	Y+5, r1	; 0x05
     5be:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:212
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
     5ca:	0e 94 75 0c 	call	0x18ea	; 0x18ea <free>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
     5ce:	88 81       	ld	r24, Y
     5d0:	99 81       	ldd	r25, Y+1	; 0x01
     5d2:	f8 01       	movw	r30, r16
     5d4:	91 83       	std	Z+1, r25	; 0x01
     5d6:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	9b 81       	ldd	r25, Y+3	; 0x03
     5dc:	93 83       	std	Z+3, r25	; 0x03
     5de:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
     5e0:	8c 81       	ldd	r24, Y+4	; 0x04
     5e2:	9d 81       	ldd	r25, Y+5	; 0x05
     5e4:	95 83       	std	Z+5, r25	; 0x05
     5e6:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
     5e8:	19 82       	std	Y+1, r1	; 0x01
     5ea:	18 82       	st	Y, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
     5ec:	1b 82       	std	Y+3, r1	; 0x03
     5ee:	1a 82       	std	Y+2, r1	; 0x02
     5f0:	e5 cf       	rjmp	.-54     	; 0x5bc <String::move(String&)+0x3c>

000005f2 <String::~String()>:
__base_dtor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	11 f0       	breq	.+4      	; 0x600 <String::~String()+0xe>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:125
    free(buffer);
     5fc:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <free>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:126
}
     600:	08 95       	ret

00000602 <String::String(char const*)>:
__base_ctor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	ec 01       	movw	r28, r24
_ZN6String4initEv():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     610:	19 82       	std	Y+1, r1	; 0x01
     612:	18 82       	st	Y, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     614:	1b 82       	std	Y+3, r1	; 0x03
     616:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
     618:	1d 82       	std	Y+5, r1	; 0x05
     61a:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     61c:	61 15       	cp	r22, r1
     61e:	71 05       	cpc	r23, r1
     620:	a9 f1       	breq	.+106    	; 0x68c <String::String(char const*)+0x8a>
     622:	7b 01       	movw	r14, r22
     624:	fb 01       	movw	r30, r22
     626:	01 90       	ld	r0, Z+
     628:	00 20       	and	r0, r0
     62a:	e9 f7       	brne	.-6      	; 0x626 <String::String(char const*)+0x24>
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	8f 01       	movw	r16, r30
     630:	06 1b       	sub	r16, r22
     632:	17 0b       	sbc	r17, r23
changeBuffer():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:158
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     634:	b8 01       	movw	r22, r16
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <realloc>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
     642:	00 97       	sbiw	r24, 0x00	; 0
     644:	b9 f0       	breq	.+46     	; 0x674 <String::String(char const*)+0x72>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
     646:	99 83       	std	Y+1, r25	; 0x01
     648:	88 83       	st	Y, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
     64a:	1b 83       	std	Y+3, r17	; 0x03
     64c:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     64e:	2c 81       	ldd	r18, Y+4	; 0x04
     650:	3d 81       	ldd	r19, Y+5	; 0x05
     652:	23 2b       	or	r18, r19
     654:	11 f4       	brne	.+4      	; 0x65a <String::String(char const*)+0x58>
     656:	fc 01       	movw	r30, r24
     658:	10 82       	st	Z, r1
copy():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     65a:	1d 83       	std	Y+5, r17	; 0x05
     65c:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     65e:	b7 01       	movw	r22, r14
     660:	88 81       	ld	r24, Y
     662:	99 81       	ldd	r25, Y+1	; 0x01
__base_ctor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
copy():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
     670:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <strcpy>
invalidate():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     674:	88 81       	ld	r24, Y
     676:	99 81       	ldd	r25, Y+1	; 0x01
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	11 f0       	breq	.+4      	; 0x680 <String::String(char const*)+0x7e>
     67c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <free>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     680:	19 82       	std	Y+1, r1	; 0x01
     682:	18 82       	st	Y, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     684:	1d 82       	std	Y+5, r1	; 0x05
     686:	1c 82       	std	Y+4, r1	; 0x04
     688:	1b 82       	std	Y+3, r1	; 0x03
     68a:	1a 82       	std	Y+2, r1	; 0x02
__base_ctor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <__vector_16>:
__vector_16():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	2f 93       	push	r18
     6a6:	3f 93       	push	r19
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	af 93       	push	r26
     6ae:	bf 93       	push	r27
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     6b0:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <timer0_millis>
     6b4:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <timer0_millis+0x1>
     6b8:	a0 91 cf 01 	lds	r26, 0x01CF	; 0x8001cf <timer0_millis+0x2>
     6bc:	b0 91 d0 01 	lds	r27, 0x01D0	; 0x8001d0 <timer0_millis+0x3>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     6c0:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <timer0_fract>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     6c4:	26 e0       	ldi	r18, 0x06	; 6
     6c6:	23 0f       	add	r18, r19
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     6c8:	2d 37       	cpi	r18, 0x7D	; 125
     6ca:	68 f1       	brcs	.+90     	; 0x726 <__vector_16+0x8c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     6cc:	29 e8       	ldi	r18, 0x89	; 137
     6ce:	23 0f       	add	r18, r19
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     6d0:	03 96       	adiw	r24, 0x03	; 3
     6d2:	a1 1d       	adc	r26, r1
     6d4:	b1 1d       	adc	r27, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     6d6:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <timer0_fract>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     6da:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <timer0_millis>
     6de:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <timer0_millis+0x1>
     6e2:	a0 93 cf 01 	sts	0x01CF, r26	; 0x8001cf <timer0_millis+0x2>
     6e6:	b0 93 d0 01 	sts	0x01D0, r27	; 0x8001d0 <timer0_millis+0x3>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     6ea:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <timer0_overflow_count>
     6ee:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <timer0_overflow_count+0x1>
     6f2:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <timer0_overflow_count+0x2>
     6f6:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <timer0_overflow_count+0x3>
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	a1 1d       	adc	r26, r1
     6fe:	b1 1d       	adc	r27, r1
     700:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <timer0_overflow_count>
     704:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <timer0_overflow_count+0x1>
     708:	a0 93 d3 01 	sts	0x01D3, r26	; 0x8001d3 <timer0_overflow_count+0x2>
     70c:	b0 93 d4 01 	sts	0x01D4, r27	; 0x8001d4 <timer0_overflow_count+0x3>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     710:	bf 91       	pop	r27
     712:	af 91       	pop	r26
     714:	9f 91       	pop	r25
     716:	8f 91       	pop	r24
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     726:	02 96       	adiw	r24, 0x02	; 2
     728:	a1 1d       	adc	r26, r1
     72a:	b1 1d       	adc	r27, r1
     72c:	d4 cf       	rjmp	.-88     	; 0x6d6 <__vector_16+0x3c>

0000072e <__vector_19>:
__vector_19():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     750:	8b e6       	ldi	r24, 0x6B	; 107
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	0e 94 c0 01 	call	0x380	; 0x380 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_18>:
__vector_18():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     78e:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <Serial+0x10>
     792:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <Serial+0x11>
     796:	80 81       	ld	r24, Z
     798:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <Serial+0x16>
     79c:	f0 91 82 03 	lds	r31, 0x0382	; 0x800382 <Serial+0x17>
     7a0:	82 fd       	sbrc	r24, 2
     7a2:	1b c0       	rjmp	.+54     	; 0x7da <__vector_18+0x60>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     7a4:	90 81       	ld	r25, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     7a6:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <Serial+0x19>
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     7ae:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <Serial+0x1a>
     7b2:	82 17       	cp	r24, r18
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <__vector_18+0x4c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     7b6:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <Serial+0x19>
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	e5 59       	subi	r30, 0x95	; 149
     7be:	fc 4f       	sbci	r31, 0xFC	; 252
     7c0:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     7c2:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <Serial+0x19>
__vector_18():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti
_rx_complete_irq():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     7da:	80 81       	ld	r24, Z
     7dc:	f4 cf       	rjmp	.-24     	; 0x7c6 <__vector_18+0x4c>

000007de <global constructors keyed to 65535_0_NA22_Marx_uC_3cell.ino.cpp.o.2044>:
_GLOBAL__I_65535_0_NA22_Marx_uC_3cell.ino.cpp.o.2044():
     7de:	eb e6       	ldi	r30, 0x6B	; 107
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	13 82       	std	Z+3, r1	; 0x03
     7e4:	12 82       	std	Z+2, r1	; 0x02
     7e6:	88 ee       	ldi	r24, 0xE8	; 232
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	a0 e0       	ldi	r26, 0x00	; 0
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	84 83       	std	Z+4, r24	; 0x04
     7f0:	95 83       	std	Z+5, r25	; 0x05
     7f2:	a6 83       	std	Z+6, r26	; 0x06
     7f4:	b7 83       	std	Z+7, r27	; 0x07
     7f6:	8c e0       	ldi	r24, 0x0C	; 12
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	80 83       	st	Z, r24
     7fe:	85 ec       	ldi	r24, 0xC5	; 197
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	95 87       	std	Z+13, r25	; 0x0d
     804:	84 87       	std	Z+12, r24	; 0x0c
     806:	84 ec       	ldi	r24, 0xC4	; 196
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	97 87       	std	Z+15, r25	; 0x0f
     80c:	86 87       	std	Z+14, r24	; 0x0e
     80e:	80 ec       	ldi	r24, 0xC0	; 192
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	91 8b       	std	Z+17, r25	; 0x11
     814:	80 8b       	std	Z+16, r24	; 0x10
     816:	81 ec       	ldi	r24, 0xC1	; 193
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	93 8b       	std	Z+19, r25	; 0x13
     81c:	82 8b       	std	Z+18, r24	; 0x12
     81e:	82 ec       	ldi	r24, 0xC2	; 194
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	95 8b       	std	Z+21, r25	; 0x15
     824:	84 8b       	std	Z+20, r24	; 0x14
     826:	86 ec       	ldi	r24, 0xC6	; 198
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	97 8b       	std	Z+23, r25	; 0x17
     82c:	86 8b       	std	Z+22, r24	; 0x16
     82e:	11 8e       	std	Z+25, r1	; 0x19
     830:	12 8e       	std	Z+26, r1	; 0x1a
     832:	13 8e       	std	Z+27, r1	; 0x1b
     834:	14 8e       	std	Z+28, r1	; 0x1c
     836:	6b e1       	ldi	r22, 0x1B	; 27
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	8a e0       	ldi	r24, 0x0A	; 10
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
     842:	e8 e0       	ldi	r30, 0x08	; 8
     844:	f4 e0       	ldi	r31, 0x04	; 4
     846:	84 e5       	ldi	r24, 0x54	; 84
     848:	80 83       	st	Z, r24
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	81 83       	std	Z+1, r24	; 0x01
     84e:	08 95       	ret

00000850 <main>:
main():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	2c 97       	sbiw	r28, 0x0c	; 12
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     864:	78 94       	sei
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
     866:	84 b5       	in	r24, 0x24	; 36
     868:	83 60       	ori	r24, 0x03	; 3
     86a:	84 bd       	out	0x24, r24	; 36
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
     86c:	85 b5       	in	r24, 0x25	; 37
     86e:	83 60       	ori	r24, 0x03	; 3
     870:	85 bd       	out	0x25, r24	; 37
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
     872:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     876:	81 60       	ori	r24, 0x01	; 1
     878:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     882:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     886:	81 60       	ori	r24, 0x01	; 1
     888:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     88c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     890:	81 60       	ori	r24, 0x01	; 1
     892:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
     896:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     89a:	84 60       	ori	r24, 0x04	; 4
     89c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
     8a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     8a4:	81 60       	ori	r24, 0x01	; 1
     8a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
     8aa:	86 e8       	ldi	r24, 0x86	; 134
     8ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
     8b0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
operator*():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 c9 0a 	call	0x1592	; 0x1592 <eeprom_read_byte>
setup():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:44
//Set up the speed, data order and data mode
//SettingsB is AD5270, <50 MHz, MSB first, sample on falling clock
SPISettings settingsB(5000000, MSBFIRST, SPI_MODE1); 

void setup() {
  OSCCAL = EEPROM.read(0); // 8MHz recalibration byte must be stored in address 0 of EEPROM by rc_calib protocol
     8bc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
begin():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
     8c0:	1f b7       	in	r17, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     8c2:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
     8c4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     8c8:	81 11       	cpse	r24, r1
     8ca:	27 c0       	rjmp	.+78     	; 0x91a <main+0xca>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     8cc:	e6 e8       	ldi	r30, 0x86	; 134
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	84 91       	lpm	r24, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
     8d2:	ed e9       	ldi	r30, 0x9D	; 157
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	94 91       	lpm	r25, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
     8d8:	e8 2f       	mov	r30, r24
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	e8 59       	subi	r30, 0x98	; 152
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	a5 91       	lpm	r26, Z+
     8e6:	b4 91       	lpm	r27, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     8e8:	ec 91       	ld	r30, X
     8ea:	e9 23       	and	r30, r25
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <main+0xa6>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	8a e0       	ldi	r24, 0x0A	; 10
     8fa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     8fe:	8c b5       	in	r24, 0x2c	; 44
     900:	80 61       	ori	r24, 0x10	; 16
     902:	8c bd       	out	0x2c, r24	; 44
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
     904:	8c b5       	in	r24, 0x2c	; 44
     906:	80 64       	ori	r24, 0x40	; 64
     908:	8c bd       	out	0x2c, r24	; 44
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	8d e0       	ldi	r24, 0x0D	; 13
     90e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	8b e0       	ldi	r24, 0x0B	; 11
     916:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
     91a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
     924:	1f bf       	out	0x3f, r17	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     926:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <Serial+0x10>
     92a:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <Serial+0x11>
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     932:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <Serial+0xc>
     936:	f0 91 78 03 	lds	r31, 0x0378	; 0x800378 <Serial+0xd>
     93a:	10 82       	st	Z, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     93c:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <Serial+0xe>
     940:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <Serial+0xf>
     944:	89 e1       	ldi	r24, 0x19	; 25
     946:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     948:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <Serial+0x18>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     94c:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <Serial+0x14>
     950:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <Serial+0x15>
     954:	86 e0       	ldi	r24, 0x06	; 6
     956:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     958:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <Serial+0x12>
     95c:	f0 91 7e 03 	lds	r31, 0x037E	; 0x80037e <Serial+0x13>
     960:	80 81       	ld	r24, Z
     962:	88 69       	ori	r24, 0x98	; 152
     964:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     966:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <Serial+0x12>
     96a:	f0 91 7e 03 	lds	r31, 0x037E	; 0x80037e <Serial+0x13>
     96e:	80 81       	ld	r24, Z
     970:	8f 7d       	andi	r24, 0xDF	; 223
     972:	80 83       	st	Z, r24
setup():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:47
  SPI.begin();                            //Initialize SPI
  Serial.begin(38400);        // Initialize serial communication at 38400 bits per second
  pinMode(0, INPUT); // MAYBE? 23-07-06 r1 fix attempt
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:48
  pinMode(Charge_disable, OUTPUT);
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:49
  pinMode(Trigger_disable, OUTPUT);
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:50
  pinMode(CS_1, OUTPUT);      //CS1 for U2, rheostat for Vout control
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:51
  digitalWrite(Charge_disable,HIGH);      //Set to disable
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:52
  digitalWrite(Trigger_disable,HIGH);     //Set to disable
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:61
//  digitalWrite(Coil2_enable,LOW);         //Set to disable
//  pinMode(Battery_uC_enable, OUTPUT);
//  digitalWrite(Battery_uC_enable,LOW);    //Set to disable
//  pinMode(Stat1, INPUT);
//  pinMode(Stat2, INPUT);
  digitalWrite(CS_1,HIGH);                //Set to disable
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:62
  digitalWrite(CS_1,LOW);                //Set to disable
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:63
  digitalWrite(CS_1,HIGH);                //Set to disable
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
delay():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:397
#endif // 0
}

void delay(unsigned long ms)
{
  unsigned long start = micros();
     9bc:	0e 94 1c 01 	call	0x238	; 0x238 <micros>
     9c0:	4b 01       	movw	r8, r22
     9c2:	5c 01       	movw	r10, r24
     9c4:	a8 ee       	ldi	r26, 0xE8	; 232
     9c6:	ca 2e       	mov	r12, r26
     9c8:	a3 e0       	ldi	r26, 0x03	; 3
     9ca:	da 2e       	mov	r13, r26
     9cc:	e1 2c       	mov	r14, r1
     9ce:	f1 2c       	mov	r15, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     9d0:	0e 94 1c 01 	call	0x238	; 0x238 <micros>
     9d4:	68 19       	sub	r22, r8
     9d6:	79 09       	sbc	r23, r9
     9d8:	8a 09       	sbc	r24, r10
     9da:	9b 09       	sbc	r25, r11
     9dc:	68 3e       	cpi	r22, 0xE8	; 232
     9de:	73 40       	sbci	r23, 0x03	; 3
     9e0:	81 05       	cpc	r24, r1
     9e2:	91 05       	cpc	r25, r1
     9e4:	a8 f3       	brcs	.-22     	; 0x9d0 <main+0x180>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     9e6:	21 e0       	ldi	r18, 0x01	; 1
     9e8:	c2 1a       	sub	r12, r18
     9ea:	d1 08       	sbc	r13, r1
     9ec:	e1 08       	sbc	r14, r1
     9ee:	f1 08       	sbc	r15, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     9f0:	88 ee       	ldi	r24, 0xE8	; 232
     9f2:	88 0e       	add	r8, r24
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	98 1e       	adc	r9, r24
     9f8:	a1 1c       	adc	r10, r1
     9fa:	b1 1c       	adc	r11, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     9fc:	c1 14       	cp	r12, r1
     9fe:	d1 04       	cpc	r13, r1
     a00:	e1 04       	cpc	r14, r1
     a02:	f1 04       	cpc	r15, r1
     a04:	29 f7       	brne	.-54     	; 0x9d0 <main+0x180>
setup():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:71
  /////////
  //Set output voltage to minimum
  //enable rheostat
  byte high = B00011100;  //command 7 0x1C
  byte lo = B00000010;    // 0x02
  SPI.beginTransaction(settingsB);
     a06:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <settingsB>
     a0a:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <settingsB+0x1>
     a0e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <SPIClass::beginTransaction(SPISettings)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:72
  digitalWrite (CS_1, LOW);
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:73
  SPI.transfer(high); 
     a1a:	8c e1       	ldi	r24, 0x1C	; 28
     a1c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:74
  SPI.transfer(lo); 
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:75
  digitalWrite (CS_1, HIGH);
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:86
  //control bits: B000001 (6bits)
  //followed by 10 bits
  int new_Vdes = 1023; //10bits
  lo = new_Vdes & B11111111; //low 8 bits
  high = B00000100 | ((new_Vdes>>8)&B11); //control bits plus high 2 bits
  SPI.beginTransaction(settingsB);
     a2e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <settingsB>
     a32:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <settingsB+0x1>
     a36:	0e 94 70 02 	call	0x4e0	; 0x4e0 <SPIClass::beginTransaction(SPISettings)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:87
  digitalWrite (CS_1, LOW);
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:88
  SPI.transfer(high); 
     a42:	87 e0       	ldi	r24, 0x07	; 7
     a44:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:89
  SPI.transfer(lo);         
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:90
  digitalWrite (CS_1, HIGH);
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:106
    //Read analog values
    int    temp = 0;
    for (byte j=0; j<10; j++){
      temp = temp + analogRead(A0);   //This is HV bus
    }
    HV_condition_value = round(temp / 10);
     a56:	7a e0       	ldi	r23, 0x0A	; 10
     a58:	a7 2e       	mov	r10, r23
     a5a:	b1 2c       	mov	r11, r1
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:236
      Serial.print(record1);
      Serial.print(","); 
      
    }
    else if (record1[0]=='T'){
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after H is cell num
     a5c:	8e 01       	movw	r16, r28
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:241
      cell_num = temp_S.toInt(); //This is the previous cell number
      
      //update read string with the cell_num
      cell_num = cell_num + 1;
      sprintf(cstr, "%03d", cell_num);
     a62:	ec e1       	ldi	r30, 0x1C	; 28
     a64:	ee 2e       	mov	r14, r30
     a66:	e1 e0       	ldi	r30, 0x01	; 1
     a68:	fe 2e       	mov	r15, r30
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:247
      record1[2] = cstr[0];
      record1[3] = cstr[1];
      record1[4] = cstr[2];

      //update control string with the updated control byte
      sprintf(cstr, "%04d", TS3_value);
     a6a:	f5 e2       	ldi	r31, 0x25	; 37
     a6c:	cf 2e       	mov	r12, r31
     a6e:	f1 e0       	ldi	r31, 0x01	; 1
     a70:	df 2e       	mov	r13, r31
recvWithStartEndBytes():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:288
        ndx = 0;
        newData = true;
      }
    }
    else if (rb == startByte) {
        recvInProgress = true;
     a72:	66 24       	eor	r6, r6
     a74:	63 94       	inc	r6
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:248
      record1[3] = cstr[1];
      record1[4] = cstr[2];

      //update control string with the updated control byte
      sprintf(cstr, "%04d", TS3_value);
      record1[(cell_num-1)*5+6] = cstr[0];
     a76:	45 e0       	ldi	r20, 0x05	; 5
     a78:	74 2e       	mov	r7, r20
recvWithStartEndBytes():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:277
   if (recvInProgress == true) {
      if (rb != endByte) {
        receivedBytes[ndx] = rb;
        ndx++;
        if (ndx >= numChars) {
          ndx = numChars - 1;
     a7a:	55 e9       	ldi	r21, 0x95	; 149
     a7c:	35 2e       	mov	r3, r21
serialEventRun():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	46 2e       	mov	r4, r22
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	56 2e       	mov	r5, r22
delay():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:397
#endif // 0
}

void delay(unsigned long ms)
{
  unsigned long start = micros();
     a86:	3a e0       	ldi	r19, 0x0A	; 10
     a88:	23 2e       	mov	r2, r19
main():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:102
    //Read stat1 and stat2 and set global values
//    Stat1_value = digitalRead(Stat1);
//    Stat2_value = digitalRead(Stat2);

    //Read analog values
    int    temp = 0;
     a8a:	91 2c       	mov	r9, r1
     a8c:	81 2c       	mov	r8, r1
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:104
    for (byte j=0; j<10; j++){
      temp = temp + analogRead(A0);   //This is HV bus
     a8e:	8e e0       	ldi	r24, 0x0E	; 14
     a90:	0e 94 0a 01 	call	0x214	; 0x214 <analogRead>
     a94:	88 0e       	add	r8, r24
     a96:	99 1e       	adc	r9, r25
     a98:	2a 94       	dec	r2
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:103
//    Stat1_value = digitalRead(Stat1);
//    Stat2_value = digitalRead(Stat2);

    //Read analog values
    int    temp = 0;
    for (byte j=0; j<10; j++){
     a9a:	21 10       	cpse	r2, r1
     a9c:	f8 cf       	rjmp	.-16     	; 0xa8e <main+0x23e>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:106
      temp = temp + analogRead(A0);   //This is HV bus
    }
    HV_condition_value = round(temp / 10);
     a9e:	c4 01       	movw	r24, r8
     aa0:	b5 01       	movw	r22, r10
     aa2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__divmodhi4>
     aa6:	cb 01       	movw	r24, r22
     aa8:	0e 94 4f 02 	call	0x49e	; 0x49e <long round<int>(int const&) [clone .isra.4]>
     aac:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <HV_condition_value+0x1>
     ab0:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <HV_condition_value>
     ab4:	2a e0       	ldi	r18, 0x0A	; 10
     ab6:	22 2e       	mov	r2, r18
main():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:108

    temp = 0;
     ab8:	91 2c       	mov	r9, r1
     aba:	81 2c       	mov	r8, r1
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:110
    for (byte j=0; j<10; j++){
      temp = temp + analogRead(A1);   //This is 14V bus
     abc:	8f e0       	ldi	r24, 0x0F	; 15
     abe:	0e 94 0a 01 	call	0x214	; 0x214 <analogRead>
     ac2:	88 0e       	add	r8, r24
     ac4:	99 1e       	adc	r9, r25
     ac6:	2a 94       	dec	r2
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:109
      temp = temp + analogRead(A0);   //This is HV bus
    }
    HV_condition_value = round(temp / 10);

    temp = 0;
    for (byte j=0; j<10; j++){
     ac8:	21 10       	cpse	r2, r1
     aca:	f8 cf       	rjmp	.-16     	; 0xabc <main+0x26c>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:112
      temp = temp + analogRead(A1);   //This is 14V bus
    }
    Bus_condition_value = round(temp / 10);
     acc:	c4 01       	movw	r24, r8
     ace:	b5 01       	movw	r22, r10
     ad0:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__divmodhi4>
     ad4:	cb 01       	movw	r24, r22
     ad6:	0e 94 4f 02 	call	0x49e	; 0x49e <long round<int>(int const&) [clone .isra.4]>
     ada:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <Bus_condition_value+0x1>
     ade:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <Bus_condition_value>
     ae2:	9a e0       	ldi	r25, 0x0A	; 10
     ae4:	29 2e       	mov	r2, r25
main():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:114

    temp = 0;
     ae6:	91 2c       	mov	r9, r1
     ae8:	81 2c       	mov	r8, r1
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:116
    for (byte j=0; j<10; j++){
      temp = temp + analogRead(A2);   //This is TS3 value
     aea:	80 e1       	ldi	r24, 0x10	; 16
     aec:	0e 94 0a 01 	call	0x214	; 0x214 <analogRead>
     af0:	88 0e       	add	r8, r24
     af2:	99 1e       	adc	r9, r25
     af4:	2a 94       	dec	r2
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:115
      temp = temp + analogRead(A1);   //This is 14V bus
    }
    Bus_condition_value = round(temp / 10);

    temp = 0;
    for (byte j=0; j<10; j++){
     af6:	21 10       	cpse	r2, r1
     af8:	f8 cf       	rjmp	.-16     	; 0xaea <main+0x29a>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:118
      temp = temp + analogRead(A2);   //This is TS3 value
    }
    TS3_value = round(temp / 10);
     afa:	c4 01       	movw	r24, r8
     afc:	b5 01       	movw	r22, r10
     afe:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__divmodhi4>
     b02:	cb 01       	movw	r24, r22
     b04:	0e 94 4f 02 	call	0x49e	; 0x49e <long round<int>(int const&) [clone .isra.4]>
     b08:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <TS3_value+0x1>
     b0c:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <TS3_value>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:123

    //update rheostat
    //control bits: B000001 (6bits)
    //followed by 10 bits
    int new_Vdes = HV_desired; //10bits
     b10:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     b14:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:126
    byte lo = new_Vdes & B11111111; //low 8 bits
    byte high = B00000100 | ((new_Vdes>>8)&B11); //control bits plus high 2 bits
    SPI.beginTransaction(settingsB);
     b18:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <settingsB>
     b1c:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <settingsB+0x1>
     b20:	0e 94 70 02 	call	0x4e0	; 0x4e0 <SPIClass::beginTransaction(SPISettings)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:127
    digitalWrite (CS_1, LOW);
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:125
    //update rheostat
    //control bits: B000001 (6bits)
    //followed by 10 bits
    int new_Vdes = HV_desired; //10bits
    byte lo = new_Vdes & B11111111; //low 8 bits
    byte high = B00000100 | ((new_Vdes>>8)&B11); //control bits plus high 2 bits
     b2c:	89 2d       	mov	r24, r9
     b2e:	83 70       	andi	r24, 0x03	; 3
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:128
    SPI.beginTransaction(settingsB);
    digitalWrite (CS_1, LOW);
    SPI.transfer(high); 
     b30:	84 60       	ori	r24, 0x04	; 4
     b32:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:129
    SPI.transfer(lo);         
     b36:	88 2d       	mov	r24, r8
     b38:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:130
    digitalWrite (CS_1, HIGH);
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
recvWithStartEndBytes():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:270
  static boolean recvInProgress = false;
  static byte ndx = 0;                      
  char startByte = '!';                // <- start byte  is a '!'
  char endByte = ',';                  // <- stop byte   is a ','
  char rb;                            
  while (Serial.available() > 0 && newData == false) {
     b44:	8b e6       	ldi	r24, 0x6B	; 107
     b46:	93 e0       	ldi	r25, 0x03	; 3
     b48:	0e 94 a0 01 	call	0x340	; 0x340 <HardwareSerial::available()>
     b4c:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <newData>
     b50:	18 16       	cp	r1, r24
     b52:	19 06       	cpc	r1, r25
     b54:	0c f0       	brlt	.+2      	; 0xb58 <main+0x308>
     b56:	bf c0       	rjmp	.+382    	; 0xcd6 <main+0x486>
     b58:	22 23       	and	r18, r18
     b5a:	09 f4       	brne	.+2      	; 0xb5e <main+0x30e>
     b5c:	97 c0       	rjmp	.+302    	; 0xc8c <main+0x43c>
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:136
    SPI.endTransaction();
    /////////////////

    //Recieve and handle serial inputs
    recvWithStartEndBytes(); //handles serial
    record1 = receivedBytes; //bitches about this. char to *char    
     b5e:	8e e2       	ldi	r24, 0x2E	; 46
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <record1+0x1>
     b66:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <record1>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:143
}

void processNewData() {
  if (newData == true) {
    //store parced data in variables
    String temp_S;
     b6a:	6b e1       	ldi	r22, 0x1B	; 27
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	ce 01       	movw	r24, r28
     b70:	07 96       	adiw	r24, 0x07	; 7
     b72:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:148
    byte control;
    byte cell_num;
    char cstr[5];
    
    if(record1[0]=='C'){//if this a control byte
     b76:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <receivedBytes>
     b7a:	83 34       	cpi	r24, 0x43	; 67
     b7c:	09 f0       	breq	.+2      	; 0xb80 <main+0x330>
     b7e:	bf c0       	rjmp	.+382    	; 0xcfe <main+0x4ae>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:149
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after C is cell num
     b80:	62 e0       	ldi	r22, 0x02	; 2
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	8e e2       	ldi	r24, 0x2E	; 46
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     b8c:	bc 01       	movw	r22, r24
     b8e:	c8 01       	movw	r24, r16
     b90:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
  if (this != &rval) move(rval);
     b94:	b8 01       	movw	r22, r16
     b96:	ce 01       	movw	r24, r28
     b98:	07 96       	adiw	r24, 0x07	; 7
     b9a:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:149
     b9e:	c8 01       	movw	r24, r16
     ba0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:150
      cell_num = temp_S.toInt(); //This is the previous cell number
     ba4:	ce 01       	movw	r24, r28
     ba6:	07 96       	adiw	r24, 0x07	; 7
     ba8:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
     bac:	96 2e       	mov	r9, r22
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:151
      temp_S = String(subStr(record1, " ", cell_num+3));
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	6d 5f       	subi	r22, 0xFD	; 253
     bb2:	7f 4f       	sbci	r23, 0xFF	; 255
     bb4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <record1>
     bb8:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <record1+0x1>
     bbc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     bc0:	bc 01       	movw	r22, r24
     bc2:	c8 01       	movw	r24, r16
     bc4:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     bc8:	b8 01       	movw	r22, r16
     bca:	ce 01       	movw	r24, r28
     bcc:	07 96       	adiw	r24, 0x07	; 7
     bce:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:151
     bd2:	c8 01       	movw	r24, r16
     bd4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:152
      control = temp_S.toInt(); //loaded the corresponding control byte
     bd8:	ce 01       	movw	r24, r28
     bda:	07 96       	adiw	r24, 0x07	; 7
     bdc:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
     be0:	26 2e       	mov	r2, r22
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:153
      Trigger_disable_value = control & B1;                   //bit 0
     be2:	61 70       	andi	r22, 0x01	; 1
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:154
      digitalWrite(Trigger_disable,Trigger_disable_value);
     be4:	84 e0       	ldi	r24, 0x04	; 4
     be6:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:155
      Charge_disable_value = (control>>1) & B1;               //bit 1
     bea:	21 fa       	bst	r2, 1
     bec:	66 27       	eor	r22, r22
     bee:	60 f9       	bld	r22, 0
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:156
      digitalWrite(Charge_disable,Charge_disable_value);
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:169
//      control = (control|B01000000) & (B10111111 | ((B00000000 | (Stat2_value&B1))<<6));//bit 6
      //Bit 7 unused for now

      //update control string with the cell_num
      
      cell_num = cell_num + 1;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	89 0d       	add	r24, r9
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:170
      sprintf(cstr, "%03d", cell_num);
     bfa:	88 2e       	mov	r8, r24
     bfc:	91 2c       	mov	r9, r1
     bfe:	1f 92       	push	r1
     c00:	8f 93       	push	r24
     c02:	ff 92       	push	r15
     c04:	ef 92       	push	r14
     c06:	1f 93       	push	r17
     c08:	0f 93       	push	r16
     c0a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:171
      record1[2] = cstr[0];
     c0e:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     c12:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:172
      record1[3] = cstr[1];
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:173
      record1[4] = cstr[2];
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:176

      //update control string with the updated control byte
      sprintf(cstr, "%03d", control);
     c22:	1f 92       	push	r1
     c24:	2f 92       	push	r2
     c26:	ff 92       	push	r15
     c28:	ef 92       	push	r14
     c2a:	1f 93       	push	r17
     c2c:	0f 93       	push	r16
     c2e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:177
      record1[(cell_num)*4+2] = cstr[0];
     c32:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     c36:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     c3a:	88 0c       	add	r8, r8
     c3c:	99 1c       	adc	r9, r9
     c3e:	88 0c       	add	r8, r8
     c40:	99 1c       	adc	r9, r9
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	e8 0d       	add	r30, r8
     c46:	f9 1d       	adc	r31, r9
     c48:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:178
      record1[(cell_num)*4+2+1] = cstr[1];
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:179
      record1[(cell_num)*4+2+2] = cstr[2];
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:254
      record1[(cell_num-1)*5+7] = cstr[1];
      record1[(cell_num-1)*5+8] = cstr[2];
      record1[(cell_num-1)*5+9] = cstr[3];

      //send to next cell
      Serial.print("!");
     c52:	81 e2       	ldi	r24, 0x21	; 33
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 a3 02 	call	0x546	; 0x546 <Print::print(char const*) [clone .constprop.3]>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:255
      Serial.print(record1);
     c5a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <record1>
     c5e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <record1+0x1>
     c62:	0e 94 a3 02 	call	0x546	; 0x546 <Print::print(char const*) [clone .constprop.3]>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:256
      Serial.print(","); 
     c66:	83 e2       	ldi	r24, 0x23	; 35
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 a3 02 	call	0x546	; 0x546 <Print::print(char const*) [clone .constprop.3]>
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:259
    }

    newData = false;
     c78:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <newData>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:143
}

void processNewData() {
  if (newData == true) {
    //store parced data in variables
    String temp_S;
     c7c:	ce 01       	movw	r24, r28
     c7e:	07 96       	adiw	r24, 0x07	; 7
     c80:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
     c84:	30 c0       	rjmp	.+96     	; 0xce6 <main+0x496>
recvWithStartEndBytes():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:275
  while (Serial.available() > 0 && newData == false) {
   rb = Serial.read();
   if (recvInProgress == true) {
      if (rb != endByte) {
        receivedBytes[ndx] = rb;
        ndx++;
     c86:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <recvWithStartEndBytes()::ndx>
     c8a:	5c cf       	rjmp	.-328    	; 0xb44 <main+0x2f4>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:271
  static byte ndx = 0;                      
  char startByte = '!';                // <- start byte  is a '!'
  char endByte = ',';                  // <- stop byte   is a ','
  char rb;                            
  while (Serial.available() > 0 && newData == false) {
   rb = Serial.read();
     c8c:	8b e6       	ldi	r24, 0x6B	; 107
     c8e:	93 e0       	ldi	r25, 0x03	; 3
     c90:	0e 94 7e 01 	call	0x2fc	; 0x2fc <HardwareSerial::read()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:272
   if (recvInProgress == true) {
     c94:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <recvWithStartEndBytes()::recvInProgress>
     c98:	99 23       	and	r25, r25
     c9a:	b9 f0       	breq	.+46     	; 0xcca <main+0x47a>
     c9c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <recvWithStartEndBytes()::ndx>
     ca0:	e9 2f       	mov	r30, r25
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	e2 5d       	subi	r30, 0xD2	; 210
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:273
      if (rb != endByte) {
     ca8:	8c 32       	cpi	r24, 0x2C	; 44
     caa:	39 f0       	breq	.+14     	; 0xcba <main+0x46a>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:274
        receivedBytes[ndx] = rb;
     cac:	80 83       	st	Z, r24
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:275
        ndx++;
     cae:	9f 5f       	subi	r25, 0xFF	; 255
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:276
        if (ndx >= numChars) {
     cb0:	96 39       	cpi	r25, 0x96	; 150
     cb2:	48 f3       	brcs	.-46     	; 0xc86 <main+0x436>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:277
          ndx = numChars - 1;
     cb4:	30 92 2b 01 	sts	0x012B, r3	; 0x80012b <recvWithStartEndBytes()::ndx>
     cb8:	45 cf       	rjmp	.-374    	; 0xb44 <main+0x2f4>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:281
        }
      }
      else {
        receivedBytes[ndx] = '\0';            // terminate the string
     cba:	10 82       	st	Z, r1
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:282
        recvInProgress = false;
     cbc:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <recvWithStartEndBytes()::recvInProgress>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:283
        ndx = 0;
     cc0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <recvWithStartEndBytes()::ndx>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:284
        newData = true;
     cc4:	60 92 2d 01 	sts	0x012D, r6	; 0x80012d <newData>
     cc8:	3d cf       	rjmp	.-390    	; 0xb44 <main+0x2f4>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:287
      }
    }
    else if (rb == startByte) {
     cca:	81 32       	cpi	r24, 0x21	; 33
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <main+0x480>
     cce:	3a cf       	rjmp	.-396    	; 0xb44 <main+0x2f4>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:288
        recvInProgress = true;
     cd0:	60 92 2c 01 	sts	0x012C, r6	; 0x80012c <recvWithStartEndBytes()::recvInProgress>
     cd4:	37 cf       	rjmp	.-402    	; 0xb44 <main+0x2f4>
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:136
    SPI.endTransaction();
    /////////////////

    //Recieve and handle serial inputs
    recvWithStartEndBytes(); //handles serial
    record1 = receivedBytes; //bitches about this. char to *char    
     cd6:	8e e2       	ldi	r24, 0x2E	; 46
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <record1+0x1>
     cde:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <record1>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:141
    processNewData();        //parse into variables, check fault, update DACs
}

void processNewData() {
  if (newData == true) {
     ce2:	21 11       	cpse	r18, r1
     ce4:	42 cf       	rjmp	.-380    	; 0xb6a <main+0x31a>
serialEventRun():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
     ce6:	41 14       	cp	r4, r1
     ce8:	51 04       	cpc	r5, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <main+0x49e>
     cec:	cc ce       	rjmp	.-616    	; 0xa86 <main+0x236>
     cee:	0e 94 ac 01 	call	0x358	; 0x358 <Serial0_available()>
     cf2:	88 23       	and	r24, r24
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <main+0x4a8>
     cf6:	bf ce       	rjmp	.-642    	; 0xa76 <main+0x226>
     cf8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     cfc:	ba ce       	rjmp	.-652    	; 0xa72 <main+0x222>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:186
      //send to next cell
      Serial.print("!");
      Serial.print(record1);
      Serial.print(",");     
    }
    else if (record1[0]=='H'){ //HV des and act
     cfe:	88 34       	cpi	r24, 0x48	; 72
     d00:	09 f0       	breq	.+2      	; 0xd04 <main+0x4b4>
     d02:	6d c0       	rjmp	.+218    	; 0xdde <main+0x58e>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:187
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after H is cell num
     d04:	62 e0       	ldi	r22, 0x02	; 2
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	8e e2       	ldi	r24, 0x2E	; 46
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     d10:	bc 01       	movw	r22, r24
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     d18:	b8 01       	movw	r22, r16
     d1a:	ce 01       	movw	r24, r28
     d1c:	07 96       	adiw	r24, 0x07	; 7
     d1e:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:187
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:188
      cell_num = temp_S.toInt(); //This is the previous cell number
     d28:	ce 01       	movw	r24, r28
     d2a:	07 96       	adiw	r24, 0x07	; 7
     d2c:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
     d30:	96 2e       	mov	r9, r22
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:189
      temp_S = String(subStr(record1, " ", cell_num*1+3)); //One int per cell
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	6d 5f       	subi	r22, 0xFD	; 253
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <record1>
     d3c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <record1+0x1>
     d40:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     d44:	bc 01       	movw	r22, r24
     d46:	c8 01       	movw	r24, r16
     d48:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     d4c:	b8 01       	movw	r22, r16
     d4e:	ce 01       	movw	r24, r28
     d50:	07 96       	adiw	r24, 0x07	; 7
     d52:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:189
     d56:	c8 01       	movw	r24, r16
     d58:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:190
      HV_desired = temp_S.toInt(); //loaded the desired HV voltage
     d5c:	ce 01       	movw	r24, r28
     d5e:	07 96       	adiw	r24, 0x07	; 7
     d60:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
     d64:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     d68:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:193

      //update read string with the cell_num
      cell_num = cell_num + 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	89 0d       	add	r24, r9
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:194
      sprintf(cstr, "%03d", cell_num);
     d70:	88 2e       	mov	r8, r24
     d72:	91 2c       	mov	r9, r1
     d74:	1f 92       	push	r1
     d76:	8f 93       	push	r24
     d78:	ff 92       	push	r15
     d7a:	ef 92       	push	r14
     d7c:	1f 93       	push	r17
     d7e:	0f 93       	push	r16
     d80:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:195
      record1[2] = cstr[0];
     d84:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     d88:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:196
      record1[3] = cstr[1];
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:197
      record1[4] = cstr[2];
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:200

      //update control string with the updated control byte
      sprintf(cstr, "%04d", HV_condition_value);
     d98:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <HV_condition_value+0x1>
     d9c:	8f 93       	push	r24
     d9e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <HV_condition_value>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:247
      record1[2] = cstr[0];
      record1[3] = cstr[1];
      record1[4] = cstr[2];

      //update control string with the updated control byte
      sprintf(cstr, "%04d", TS3_value);
     da2:	8f 93       	push	r24
     da4:	df 92       	push	r13
     da6:	cf 92       	push	r12
     da8:	1f 93       	push	r17
     daa:	0f 93       	push	r16
     dac:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:248
      record1[(cell_num-1)*5+6] = cstr[0];
     db0:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     db4:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	89 1a       	sub	r8, r25
     dbc:	91 08       	sbc	r9, r1
     dbe:	78 9c       	mul	r7, r8
     dc0:	90 01       	movw	r18, r0
     dc2:	79 9c       	mul	r7, r9
     dc4:	30 0d       	add	r19, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	e2 0f       	add	r30, r18
     dcc:	f3 1f       	adc	r31, r19
     dce:	86 83       	std	Z+6, r24	; 0x06
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:249
      record1[(cell_num-1)*5+7] = cstr[1];
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	87 83       	std	Z+7, r24	; 0x07
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:250
      record1[(cell_num-1)*5+8] = cstr[2];
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	80 87       	std	Z+8, r24	; 0x08
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:251
      record1[(cell_num-1)*5+9] = cstr[3];
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	81 87       	std	Z+9, r24	; 0x09
     ddc:	3a cf       	rjmp	.-396    	; 0xc52 <main+0x402>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:211
      //send to next cell
      Serial.print("!");
      Serial.print(record1);
      Serial.print(",");  
    }
    else if (record1[0]=='B'){
     dde:	82 34       	cpi	r24, 0x42	; 66
     de0:	89 f5       	brne	.+98     	; 0xe44 <main+0x5f4>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:212
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after H is cell num
     de2:	62 e0       	ldi	r22, 0x02	; 2
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	8e e2       	ldi	r24, 0x2E	; 46
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     dee:	bc 01       	movw	r22, r24
     df0:	c8 01       	movw	r24, r16
     df2:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     df6:	b8 01       	movw	r22, r16
     df8:	ce 01       	movw	r24, r28
     dfa:	07 96       	adiw	r24, 0x07	; 7
     dfc:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:212
     e00:	c8 01       	movw	r24, r16
     e02:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:213
      cell_num = temp_S.toInt(); //This is the previous cell number
     e06:	ce 01       	movw	r24, r28
     e08:	07 96       	adiw	r24, 0x07	; 7
     e0a:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:216
      
      //update read string with the cell_num
      cell_num = cell_num + 1;
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:217
      sprintf(cstr, "%03d", cell_num);
     e10:	86 2e       	mov	r8, r22
     e12:	91 2c       	mov	r9, r1
     e14:	1f 92       	push	r1
     e16:	6f 93       	push	r22
     e18:	ff 92       	push	r15
     e1a:	ef 92       	push	r14
     e1c:	1f 93       	push	r17
     e1e:	0f 93       	push	r16
     e20:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:218
      record1[2] = cstr[0];
     e24:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     e28:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:219
      record1[3] = cstr[1];
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:220
      record1[4] = cstr[2];
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:223

      //update control string with the updated control byte
      sprintf(cstr, "%04d", Bus_condition_value);
     e38:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Bus_condition_value+0x1>
     e3c:	8f 93       	push	r24
     e3e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <Bus_condition_value>
     e42:	af cf       	rjmp	.-162    	; 0xda2 <main+0x552>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:235
      Serial.print("!");
      Serial.print(record1);
      Serial.print(","); 
      
    }
    else if (record1[0]=='T'){
     e44:	84 35       	cpi	r24, 0x54	; 84
     e46:	09 f0       	breq	.+2      	; 0xe4a <main+0x5fa>
     e48:	17 cf       	rjmp	.-466    	; 0xc78 <main+0x428>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:236
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after H is cell num
     e4a:	62 e0       	ldi	r22, 0x02	; 2
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8e e2       	ldi	r24, 0x2E	; 46
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     e56:	bc 01       	movw	r22, r24
     e58:	c8 01       	movw	r24, r16
     e5a:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     e5e:	b8 01       	movw	r22, r16
     e60:	ce 01       	movw	r24, r28
     e62:	07 96       	adiw	r24, 0x07	; 7
     e64:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:236
     e68:	c8 01       	movw	r24, r16
     e6a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:237
      cell_num = temp_S.toInt(); //This is the previous cell number
     e6e:	ce 01       	movw	r24, r28
     e70:	07 96       	adiw	r24, 0x07	; 7
     e72:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:240
      
      //update read string with the cell_num
      cell_num = cell_num + 1;
     e76:	6f 5f       	subi	r22, 0xFF	; 255
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:241
      sprintf(cstr, "%03d", cell_num);
     e78:	86 2e       	mov	r8, r22
     e7a:	91 2c       	mov	r9, r1
     e7c:	1f 92       	push	r1
     e7e:	6f 93       	push	r22
     e80:	ff 92       	push	r15
     e82:	ef 92       	push	r14
     e84:	1f 93       	push	r17
     e86:	0f 93       	push	r16
     e88:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:242
      record1[2] = cstr[0];
     e8c:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     e90:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:243
      record1[3] = cstr[1];
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:244
      record1[4] = cstr[2];
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:247

      //update control string with the updated control byte
      sprintf(cstr, "%04d", TS3_value);
     ea0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <TS3_value+0x1>
     ea4:	8f 93       	push	r24
     ea6:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TS3_value>
     eaa:	7b cf       	rjmp	.-266    	; 0xda2 <main+0x552>

00000eac <_GLOBAL__sub_D_HV_condition_value>:
__static_initialization_and_destruction_0():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:32
byte    Trigger_disable_value = 1;
//byte    Coil1_enable_value = 0;
//byte    Coil2_enable_value = 0;
//byte    Battery_uC_enable_value = 0;

String content = "";          //used for serial recieve
     eac:	8a e0       	ldi	r24, 0x0A	; 10
     eae:	94 e0       	ldi	r25, 0x04	; 4
     eb0:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <String::~String()>

00000eb4 <atol>:
atol():
     eb4:	1f 93       	push	r17
     eb6:	fc 01       	movw	r30, r24
     eb8:	99 27       	eor	r25, r25
     eba:	88 27       	eor	r24, r24
     ebc:	bc 01       	movw	r22, r24
     ebe:	e8 94       	clt
     ec0:	11 91       	ld	r17, Z+
     ec2:	10 32       	cpi	r17, 0x20	; 32
     ec4:	e9 f3       	breq	.-6      	; 0xec0 <atol+0xc>
     ec6:	19 30       	cpi	r17, 0x09	; 9
     ec8:	10 f0       	brcs	.+4      	; 0xece <atol+0x1a>
     eca:	1e 30       	cpi	r17, 0x0E	; 14
     ecc:	c8 f3       	brcs	.-14     	; 0xec0 <atol+0xc>
     ece:	1b 32       	cpi	r17, 0x2B	; 43
     ed0:	51 f0       	breq	.+20     	; 0xee6 <atol+0x32>
     ed2:	1d 32       	cpi	r17, 0x2D	; 45
     ed4:	49 f4       	brne	.+18     	; 0xee8 <atol+0x34>
     ed6:	68 94       	set
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <atol+0x32>
     eda:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsi_const_10>
     ede:	61 0f       	add	r22, r17
     ee0:	71 1d       	adc	r23, r1
     ee2:	81 1d       	adc	r24, r1
     ee4:	91 1d       	adc	r25, r1
     ee6:	11 91       	ld	r17, Z+
     ee8:	10 53       	subi	r17, 0x30	; 48
     eea:	1a 30       	cpi	r17, 0x0A	; 10
     eec:	b0 f3       	brcs	.-20     	; 0xeda <atol+0x26>
     eee:	3e f4       	brtc	.+14     	; 0xefe <atol+0x4a>
     ef0:	90 95       	com	r25
     ef2:	80 95       	com	r24
     ef4:	70 95       	com	r23
     ef6:	61 95       	neg	r22
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	1f 91       	pop	r17
     f00:	08 95       	ret

00000f02 <strtok_r>:
strtok_r():
     f02:	fa 01       	movw	r30, r20
     f04:	a1 91       	ld	r26, Z+
     f06:	b0 81       	ld	r27, Z
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	19 f4       	brne	.+6      	; 0xf12 <strtok_r+0x10>
     f0c:	10 97       	sbiw	r26, 0x00	; 0
     f0e:	e1 f0       	breq	.+56     	; 0xf48 <strtok_r+0x46>
     f10:	cd 01       	movw	r24, r26
     f12:	dc 01       	movw	r26, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0d 90       	ld	r0, X+
     f18:	00 20       	and	r0, r0
     f1a:	11 f4       	brne	.+4      	; 0xf20 <strtok_r+0x1e>
     f1c:	c0 01       	movw	r24, r0
     f1e:	13 c0       	rjmp	.+38     	; 0xf46 <strtok_r+0x44>
     f20:	fb 01       	movw	r30, r22
     f22:	21 91       	ld	r18, Z+
     f24:	22 23       	and	r18, r18
     f26:	19 f0       	breq	.+6      	; 0xf2e <strtok_r+0x2c>
     f28:	20 15       	cp	r18, r0
     f2a:	d9 f7       	brne	.-10     	; 0xf22 <strtok_r+0x20>
     f2c:	f3 cf       	rjmp	.-26     	; 0xf14 <strtok_r+0x12>
     f2e:	fb 01       	movw	r30, r22
     f30:	21 91       	ld	r18, Z+
     f32:	20 15       	cp	r18, r0
     f34:	19 f4       	brne	.+6      	; 0xf3c <strtok_r+0x3a>
     f36:	1e 92       	st	-X, r1
     f38:	11 96       	adiw	r26, 0x01	; 1
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <strtok_r+0x46>
     f3c:	22 23       	and	r18, r18
     f3e:	c1 f7       	brne	.-16     	; 0xf30 <strtok_r+0x2e>
     f40:	0d 90       	ld	r0, X+
     f42:	00 20       	and	r0, r0
     f44:	a1 f7       	brne	.-24     	; 0xf2e <strtok_r+0x2c>
     f46:	d0 01       	movw	r26, r0
     f48:	fa 01       	movw	r30, r20
     f4a:	a1 93       	st	Z+, r26
     f4c:	b0 83       	st	Z, r27
     f4e:	08 95       	ret

00000f50 <__mulsi_const_10>:
__mulsi_const_10():
     f50:	59 2f       	mov	r21, r25
     f52:	48 2f       	mov	r20, r24
     f54:	37 2f       	mov	r19, r23
     f56:	26 2f       	mov	r18, r22
     f58:	66 0f       	add	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	62 0f       	add	r22, r18
     f6a:	73 1f       	adc	r23, r19
     f6c:	84 1f       	adc	r24, r20
     f6e:	95 1f       	adc	r25, r21
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	08 95       	ret

00000f7a <vfprintf>:
vfprintf():
     f7a:	ab e0       	ldi	r26, 0x0B	; 11
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e3 ec       	ldi	r30, 0xC3	; 195
     f80:	f7 e0       	ldi	r31, 0x07	; 7
     f82:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__prologue_saves__>
     f86:	7c 01       	movw	r14, r24
     f88:	3b 01       	movw	r6, r22
     f8a:	8a 01       	movw	r16, r20
     f8c:	fc 01       	movw	r30, r24
     f8e:	17 82       	std	Z+7, r1	; 0x07
     f90:	16 82       	std	Z+6, r1	; 0x06
     f92:	83 81       	ldd	r24, Z+3	; 0x03
     f94:	81 ff       	sbrs	r24, 1
     f96:	c8 c1       	rjmp	.+912    	; 0x1328 <vfprintf+0x3ae>
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	5c 01       	movw	r10, r24
     f9e:	f7 01       	movw	r30, r14
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	f3 01       	movw	r30, r6
     fa4:	93 fd       	sbrc	r25, 3
     fa6:	85 91       	lpm	r24, Z+
     fa8:	93 ff       	sbrs	r25, 3
     faa:	81 91       	ld	r24, Z+
     fac:	3f 01       	movw	r6, r30
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <vfprintf+0x3a>
     fb2:	53 c1       	rjmp	.+678    	; 0x125a <vfprintf+0x2e0>
     fb4:	85 32       	cpi	r24, 0x25	; 37
     fb6:	39 f4       	brne	.+14     	; 0xfc6 <vfprintf+0x4c>
     fb8:	93 fd       	sbrc	r25, 3
     fba:	85 91       	lpm	r24, Z+
     fbc:	93 ff       	sbrs	r25, 3
     fbe:	81 91       	ld	r24, Z+
     fc0:	3f 01       	movw	r6, r30
     fc2:	85 32       	cpi	r24, 0x25	; 37
     fc4:	29 f4       	brne	.+10     	; 0xfd0 <vfprintf+0x56>
     fc6:	b7 01       	movw	r22, r14
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
     fce:	e7 cf       	rjmp	.-50     	; 0xf9e <vfprintf+0x24>
     fd0:	91 2c       	mov	r9, r1
     fd2:	21 2c       	mov	r2, r1
     fd4:	31 2c       	mov	r3, r1
     fd6:	ff e1       	ldi	r31, 0x1F	; 31
     fd8:	f3 15       	cp	r31, r3
     fda:	38 f0       	brcs	.+14     	; 0xfea <vfprintf+0x70>
     fdc:	8b 32       	cpi	r24, 0x2B	; 43
     fde:	11 f1       	breq	.+68     	; 0x1024 <vfprintf+0xaa>
     fe0:	90 f4       	brcc	.+36     	; 0x1006 <vfprintf+0x8c>
     fe2:	80 32       	cpi	r24, 0x20	; 32
     fe4:	09 f1       	breq	.+66     	; 0x1028 <vfprintf+0xae>
     fe6:	83 32       	cpi	r24, 0x23	; 35
     fe8:	29 f1       	breq	.+74     	; 0x1034 <vfprintf+0xba>
     fea:	37 fc       	sbrc	r3, 7
     fec:	3c c0       	rjmp	.+120    	; 0x1066 <vfprintf+0xec>
     fee:	20 ed       	ldi	r18, 0xD0	; 208
     ff0:	28 0f       	add	r18, r24
     ff2:	2a 30       	cpi	r18, 0x0A	; 10
     ff4:	50 f5       	brcc	.+84     	; 0x104a <vfprintf+0xd0>
     ff6:	36 fe       	sbrs	r3, 6
     ff8:	20 c0       	rjmp	.+64     	; 0x103a <vfprintf+0xc0>
     ffa:	8a e0       	ldi	r24, 0x0A	; 10
     ffc:	98 9e       	mul	r9, r24
     ffe:	20 0d       	add	r18, r0
    1000:	11 24       	eor	r1, r1
    1002:	92 2e       	mov	r9, r18
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <vfprintf+0x98>
    1006:	8d 32       	cpi	r24, 0x2D	; 45
    1008:	91 f0       	breq	.+36     	; 0x102e <vfprintf+0xb4>
    100a:	80 33       	cpi	r24, 0x30	; 48
    100c:	71 f7       	brne	.-36     	; 0xfea <vfprintf+0x70>
    100e:	68 94       	set
    1010:	30 f8       	bld	r3, 0
    1012:	f3 01       	movw	r30, r6
    1014:	93 fd       	sbrc	r25, 3
    1016:	85 91       	lpm	r24, Z+
    1018:	93 ff       	sbrs	r25, 3
    101a:	81 91       	ld	r24, Z+
    101c:	3f 01       	movw	r6, r30
    101e:	81 11       	cpse	r24, r1
    1020:	da cf       	rjmp	.-76     	; 0xfd6 <vfprintf+0x5c>
    1022:	21 c0       	rjmp	.+66     	; 0x1066 <vfprintf+0xec>
    1024:	68 94       	set
    1026:	31 f8       	bld	r3, 1
    1028:	68 94       	set
    102a:	32 f8       	bld	r3, 2
    102c:	f2 cf       	rjmp	.-28     	; 0x1012 <vfprintf+0x98>
    102e:	68 94       	set
    1030:	33 f8       	bld	r3, 3
    1032:	ef cf       	rjmp	.-34     	; 0x1012 <vfprintf+0x98>
    1034:	68 94       	set
    1036:	34 f8       	bld	r3, 4
    1038:	ec cf       	rjmp	.-40     	; 0x1012 <vfprintf+0x98>
    103a:	ea e0       	ldi	r30, 0x0A	; 10
    103c:	2e 9e       	mul	r2, r30
    103e:	20 0d       	add	r18, r0
    1040:	11 24       	eor	r1, r1
    1042:	22 2e       	mov	r2, r18
    1044:	68 94       	set
    1046:	35 f8       	bld	r3, 5
    1048:	e4 cf       	rjmp	.-56     	; 0x1012 <vfprintf+0x98>
    104a:	8e 32       	cpi	r24, 0x2E	; 46
    104c:	29 f4       	brne	.+10     	; 0x1058 <vfprintf+0xde>
    104e:	36 fc       	sbrc	r3, 6
    1050:	04 c1       	rjmp	.+520    	; 0x125a <vfprintf+0x2e0>
    1052:	68 94       	set
    1054:	36 f8       	bld	r3, 6
    1056:	dd cf       	rjmp	.-70     	; 0x1012 <vfprintf+0x98>
    1058:	8c 36       	cpi	r24, 0x6C	; 108
    105a:	19 f4       	brne	.+6      	; 0x1062 <vfprintf+0xe8>
    105c:	68 94       	set
    105e:	37 f8       	bld	r3, 7
    1060:	d8 cf       	rjmp	.-80     	; 0x1012 <vfprintf+0x98>
    1062:	88 36       	cpi	r24, 0x68	; 104
    1064:	b1 f2       	breq	.-84     	; 0x1012 <vfprintf+0x98>
    1066:	98 2f       	mov	r25, r24
    1068:	9f 7d       	andi	r25, 0xDF	; 223
    106a:	95 54       	subi	r25, 0x45	; 69
    106c:	93 30       	cpi	r25, 0x03	; 3
    106e:	e0 f0       	brcs	.+56     	; 0x10a8 <vfprintf+0x12e>
    1070:	83 36       	cpi	r24, 0x63	; 99
    1072:	a1 f1       	breq	.+104    	; 0x10dc <vfprintf+0x162>
    1074:	83 37       	cpi	r24, 0x73	; 115
    1076:	c1 f1       	breq	.+112    	; 0x10e8 <vfprintf+0x16e>
    1078:	83 35       	cpi	r24, 0x53	; 83
    107a:	09 f0       	breq	.+2      	; 0x107e <vfprintf+0x104>
    107c:	63 c0       	rjmp	.+198    	; 0x1144 <vfprintf+0x1ca>
    107e:	28 01       	movw	r4, r16
    1080:	f2 e0       	ldi	r31, 0x02	; 2
    1082:	4f 0e       	add	r4, r31
    1084:	51 1c       	adc	r5, r1
    1086:	f8 01       	movw	r30, r16
    1088:	c0 80       	ld	r12, Z
    108a:	d1 80       	ldd	r13, Z+1	; 0x01
    108c:	69 2d       	mov	r22, r9
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	36 fc       	sbrc	r3, 6
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <vfprintf+0x11e>
    1094:	6f ef       	ldi	r22, 0xFF	; 255
    1096:	7f ef       	ldi	r23, 0xFF	; 255
    1098:	c6 01       	movw	r24, r12
    109a:	0e 94 97 09 	call	0x132e	; 0x132e <strnlen_P>
    109e:	4c 01       	movw	r8, r24
    10a0:	68 94       	set
    10a2:	37 f8       	bld	r3, 7
    10a4:	82 01       	movw	r16, r4
    10a6:	0a c0       	rjmp	.+20     	; 0x10bc <vfprintf+0x142>
    10a8:	0c 5f       	subi	r16, 0xFC	; 252
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	ff e3       	ldi	r31, 0x3F	; 63
    10ae:	f9 83       	std	Y+1, r31	; 0x01
    10b0:	88 24       	eor	r8, r8
    10b2:	83 94       	inc	r8
    10b4:	91 2c       	mov	r9, r1
    10b6:	65 01       	movw	r12, r10
    10b8:	e8 94       	clt
    10ba:	37 f8       	bld	r3, 7
    10bc:	33 fe       	sbrs	r3, 3
    10be:	2d c0       	rjmp	.+90     	; 0x111a <vfprintf+0x1a0>
    10c0:	52 2c       	mov	r5, r2
    10c2:	81 14       	cp	r8, r1
    10c4:	91 04       	cpc	r9, r1
    10c6:	71 f5       	brne	.+92     	; 0x1124 <vfprintf+0x1aa>
    10c8:	55 20       	and	r5, r5
    10ca:	09 f4       	brne	.+2      	; 0x10ce <vfprintf+0x154>
    10cc:	68 cf       	rjmp	.-304    	; 0xf9e <vfprintf+0x24>
    10ce:	b7 01       	movw	r22, r14
    10d0:	80 e2       	ldi	r24, 0x20	; 32
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    10d8:	5a 94       	dec	r5
    10da:	f6 cf       	rjmp	.-20     	; 0x10c8 <vfprintf+0x14e>
    10dc:	f8 01       	movw	r30, r16
    10de:	80 81       	ld	r24, Z
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	0e 5f       	subi	r16, 0xFE	; 254
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	e4 cf       	rjmp	.-56     	; 0x10b0 <vfprintf+0x136>
    10e8:	28 01       	movw	r4, r16
    10ea:	f2 e0       	ldi	r31, 0x02	; 2
    10ec:	4f 0e       	add	r4, r31
    10ee:	51 1c       	adc	r5, r1
    10f0:	f8 01       	movw	r30, r16
    10f2:	c0 80       	ld	r12, Z
    10f4:	d1 80       	ldd	r13, Z+1	; 0x01
    10f6:	69 2d       	mov	r22, r9
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	36 fc       	sbrc	r3, 6
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <vfprintf+0x188>
    10fe:	6f ef       	ldi	r22, 0xFF	; 255
    1100:	7f ef       	ldi	r23, 0xFF	; 255
    1102:	c6 01       	movw	r24, r12
    1104:	0e 94 a2 09 	call	0x1344	; 0x1344 <strnlen>
    1108:	4c 01       	movw	r8, r24
    110a:	82 01       	movw	r16, r4
    110c:	d5 cf       	rjmp	.-86     	; 0x10b8 <vfprintf+0x13e>
    110e:	b7 01       	movw	r22, r14
    1110:	80 e2       	ldi	r24, 0x20	; 32
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    1118:	2a 94       	dec	r2
    111a:	28 14       	cp	r2, r8
    111c:	19 04       	cpc	r1, r9
    111e:	09 f0       	breq	.+2      	; 0x1122 <vfprintf+0x1a8>
    1120:	b0 f7       	brcc	.-20     	; 0x110e <vfprintf+0x194>
    1122:	ce cf       	rjmp	.-100    	; 0x10c0 <vfprintf+0x146>
    1124:	f6 01       	movw	r30, r12
    1126:	37 fc       	sbrc	r3, 7
    1128:	85 91       	lpm	r24, Z+
    112a:	37 fe       	sbrs	r3, 7
    112c:	81 91       	ld	r24, Z+
    112e:	6f 01       	movw	r12, r30
    1130:	b7 01       	movw	r22, r14
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    1138:	51 10       	cpse	r5, r1
    113a:	5a 94       	dec	r5
    113c:	f1 e0       	ldi	r31, 0x01	; 1
    113e:	8f 1a       	sub	r8, r31
    1140:	91 08       	sbc	r9, r1
    1142:	bf cf       	rjmp	.-130    	; 0x10c2 <vfprintf+0x148>
    1144:	84 36       	cpi	r24, 0x64	; 100
    1146:	19 f0       	breq	.+6      	; 0x114e <vfprintf+0x1d4>
    1148:	89 36       	cpi	r24, 0x69	; 105
    114a:	09 f0       	breq	.+2      	; 0x114e <vfprintf+0x1d4>
    114c:	77 c0       	rjmp	.+238    	; 0x123c <vfprintf+0x2c2>
    114e:	f8 01       	movw	r30, r16
    1150:	37 fe       	sbrs	r3, 7
    1152:	6b c0       	rjmp	.+214    	; 0x122a <vfprintf+0x2b0>
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	0c 5f       	subi	r16, 0xFC	; 252
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	f3 2d       	mov	r31, r3
    1162:	ff 76       	andi	r31, 0x6F	; 111
    1164:	3f 2e       	mov	r3, r31
    1166:	97 ff       	sbrs	r25, 7
    1168:	09 c0       	rjmp	.+18     	; 0x117c <vfprintf+0x202>
    116a:	90 95       	com	r25
    116c:	80 95       	com	r24
    116e:	70 95       	com	r23
    1170:	61 95       	neg	r22
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	68 94       	set
    117a:	37 f8       	bld	r3, 7
    117c:	2a e0       	ldi	r18, 0x0A	; 10
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	a5 01       	movw	r20, r10
    1182:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__ultoa_invert>
    1186:	c8 2e       	mov	r12, r24
    1188:	ca 18       	sub	r12, r10
    118a:	8c 2c       	mov	r8, r12
    118c:	43 2c       	mov	r4, r3
    118e:	36 fe       	sbrs	r3, 6
    1190:	0c c0       	rjmp	.+24     	; 0x11aa <vfprintf+0x230>
    1192:	e8 94       	clt
    1194:	40 f8       	bld	r4, 0
    1196:	c9 14       	cp	r12, r9
    1198:	40 f4       	brcc	.+16     	; 0x11aa <vfprintf+0x230>
    119a:	34 fe       	sbrs	r3, 4
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <vfprintf+0x22e>
    119e:	32 fc       	sbrc	r3, 2
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <vfprintf+0x22e>
    11a2:	f3 2d       	mov	r31, r3
    11a4:	fe 7e       	andi	r31, 0xEE	; 238
    11a6:	4f 2e       	mov	r4, r31
    11a8:	89 2c       	mov	r8, r9
    11aa:	44 fe       	sbrs	r4, 4
    11ac:	95 c0       	rjmp	.+298    	; 0x12d8 <vfprintf+0x35e>
    11ae:	fe 01       	movw	r30, r28
    11b0:	ec 0d       	add	r30, r12
    11b2:	f1 1d       	adc	r31, r1
    11b4:	80 81       	ld	r24, Z
    11b6:	80 33       	cpi	r24, 0x30	; 48
    11b8:	09 f0       	breq	.+2      	; 0x11bc <vfprintf+0x242>
    11ba:	87 c0       	rjmp	.+270    	; 0x12ca <vfprintf+0x350>
    11bc:	24 2d       	mov	r18, r4
    11be:	29 7e       	andi	r18, 0xE9	; 233
    11c0:	42 2e       	mov	r4, r18
    11c2:	84 2d       	mov	r24, r4
    11c4:	88 70       	andi	r24, 0x08	; 8
    11c6:	58 2e       	mov	r5, r24
    11c8:	43 fc       	sbrc	r4, 3
    11ca:	95 c0       	rjmp	.+298    	; 0x12f6 <vfprintf+0x37c>
    11cc:	40 fe       	sbrs	r4, 0
    11ce:	8f c0       	rjmp	.+286    	; 0x12ee <vfprintf+0x374>
    11d0:	9c 2c       	mov	r9, r12
    11d2:	82 14       	cp	r8, r2
    11d4:	18 f4       	brcc	.+6      	; 0x11dc <vfprintf+0x262>
    11d6:	2c 0c       	add	r2, r12
    11d8:	92 2c       	mov	r9, r2
    11da:	98 18       	sub	r9, r8
    11dc:	44 fe       	sbrs	r4, 4
    11de:	91 c0       	rjmp	.+290    	; 0x1302 <vfprintf+0x388>
    11e0:	b7 01       	movw	r22, r14
    11e2:	80 e3       	ldi	r24, 0x30	; 48
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    11ea:	42 fe       	sbrs	r4, 2
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <vfprintf+0x286>
    11ee:	88 e7       	ldi	r24, 0x78	; 120
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	41 fe       	sbrs	r4, 1
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <vfprintf+0x280>
    11f6:	88 e5       	ldi	r24, 0x58	; 88
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	b7 01       	movw	r22, r14
    11fc:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    1200:	c9 14       	cp	r12, r9
    1202:	08 f4       	brcc	.+2      	; 0x1206 <vfprintf+0x28c>
    1204:	8a c0       	rjmp	.+276    	; 0x131a <vfprintf+0x3a0>
    1206:	ca 94       	dec	r12
    1208:	d1 2c       	mov	r13, r1
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	c9 1a       	sub	r12, r25
    120e:	d9 0a       	sbc	r13, r25
    1210:	ca 0c       	add	r12, r10
    1212:	db 1c       	adc	r13, r11
    1214:	f6 01       	movw	r30, r12
    1216:	82 91       	ld	r24, -Z
    1218:	6f 01       	movw	r12, r30
    121a:	b7 01       	movw	r22, r14
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    1222:	ac 14       	cp	r10, r12
    1224:	bd 04       	cpc	r11, r13
    1226:	b1 f7       	brne	.-20     	; 0x1214 <vfprintf+0x29a>
    1228:	4f cf       	rjmp	.-354    	; 0x10c8 <vfprintf+0x14e>
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	07 2e       	mov	r0, r23
    1230:	00 0c       	add	r0, r0
    1232:	88 0b       	sbc	r24, r24
    1234:	99 0b       	sbc	r25, r25
    1236:	0e 5f       	subi	r16, 0xFE	; 254
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	92 cf       	rjmp	.-220    	; 0x1160 <vfprintf+0x1e6>
    123c:	d3 2c       	mov	r13, r3
    123e:	e8 94       	clt
    1240:	d4 f8       	bld	r13, 4
    1242:	2a e0       	ldi	r18, 0x0A	; 10
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	85 37       	cpi	r24, 0x75	; 117
    1248:	39 f1       	breq	.+78     	; 0x1298 <vfprintf+0x31e>
    124a:	23 2d       	mov	r18, r3
    124c:	29 7f       	andi	r18, 0xF9	; 249
    124e:	d2 2e       	mov	r13, r18
    1250:	8f 36       	cpi	r24, 0x6F	; 111
    1252:	01 f1       	breq	.+64     	; 0x1294 <vfprintf+0x31a>
    1254:	48 f4       	brcc	.+18     	; 0x1268 <vfprintf+0x2ee>
    1256:	88 35       	cpi	r24, 0x58	; 88
    1258:	a9 f0       	breq	.+42     	; 0x1284 <vfprintf+0x30a>
    125a:	f7 01       	movw	r30, r14
    125c:	86 81       	ldd	r24, Z+6	; 0x06
    125e:	97 81       	ldd	r25, Z+7	; 0x07
    1260:	2b 96       	adiw	r28, 0x0b	; 11
    1262:	e2 e1       	ldi	r30, 0x12	; 18
    1264:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__epilogue_restores__>
    1268:	80 37       	cpi	r24, 0x70	; 112
    126a:	49 f0       	breq	.+18     	; 0x127e <vfprintf+0x304>
    126c:	88 37       	cpi	r24, 0x78	; 120
    126e:	a9 f7       	brne	.-22     	; 0x125a <vfprintf+0x2e0>
    1270:	d4 fe       	sbrs	r13, 4
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <vfprintf+0x2fe>
    1274:	68 94       	set
    1276:	d2 f8       	bld	r13, 2
    1278:	20 e1       	ldi	r18, 0x10	; 16
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <vfprintf+0x31e>
    127e:	68 94       	set
    1280:	d4 f8       	bld	r13, 4
    1282:	f6 cf       	rjmp	.-20     	; 0x1270 <vfprintf+0x2f6>
    1284:	34 fe       	sbrs	r3, 4
    1286:	03 c0       	rjmp	.+6      	; 0x128e <vfprintf+0x314>
    1288:	82 2f       	mov	r24, r18
    128a:	86 60       	ori	r24, 0x06	; 6
    128c:	d8 2e       	mov	r13, r24
    128e:	20 e1       	ldi	r18, 0x10	; 16
    1290:	32 e0       	ldi	r19, 0x02	; 2
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <vfprintf+0x31e>
    1294:	28 e0       	ldi	r18, 0x08	; 8
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	f8 01       	movw	r30, r16
    129a:	d7 fe       	sbrs	r13, 7
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <vfprintf+0x342>
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	0c 5f       	subi	r16, 0xFC	; 252
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	a5 01       	movw	r20, r10
    12ac:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__ultoa_invert>
    12b0:	c8 2e       	mov	r12, r24
    12b2:	ca 18       	sub	r12, r10
    12b4:	3d 2c       	mov	r3, r13
    12b6:	e8 94       	clt
    12b8:	37 f8       	bld	r3, 7
    12ba:	67 cf       	rjmp	.-306    	; 0x118a <vfprintf+0x210>
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	0e 5f       	subi	r16, 0xFE	; 254
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	f0 cf       	rjmp	.-32     	; 0x12aa <vfprintf+0x330>
    12ca:	42 fc       	sbrc	r4, 2
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <vfprintf+0x358>
    12ce:	83 94       	inc	r8
    12d0:	78 cf       	rjmp	.-272    	; 0x11c2 <vfprintf+0x248>
    12d2:	83 94       	inc	r8
    12d4:	83 94       	inc	r8
    12d6:	75 cf       	rjmp	.-278    	; 0x11c2 <vfprintf+0x248>
    12d8:	84 2d       	mov	r24, r4
    12da:	86 78       	andi	r24, 0x86	; 134
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <vfprintf+0x366>
    12de:	71 cf       	rjmp	.-286    	; 0x11c2 <vfprintf+0x248>
    12e0:	f6 cf       	rjmp	.-20     	; 0x12ce <vfprintf+0x354>
    12e2:	b7 01       	movw	r22, r14
    12e4:	80 e2       	ldi	r24, 0x20	; 32
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    12ec:	83 94       	inc	r8
    12ee:	82 14       	cp	r8, r2
    12f0:	c0 f3       	brcs	.-16     	; 0x12e2 <vfprintf+0x368>
    12f2:	51 2c       	mov	r5, r1
    12f4:	73 cf       	rjmp	.-282    	; 0x11dc <vfprintf+0x262>
    12f6:	52 2c       	mov	r5, r2
    12f8:	58 18       	sub	r5, r8
    12fa:	82 14       	cp	r8, r2
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <vfprintf+0x386>
    12fe:	6e cf       	rjmp	.-292    	; 0x11dc <vfprintf+0x262>
    1300:	f8 cf       	rjmp	.-16     	; 0x12f2 <vfprintf+0x378>
    1302:	84 2d       	mov	r24, r4
    1304:	86 78       	andi	r24, 0x86	; 134
    1306:	09 f4       	brne	.+2      	; 0x130a <vfprintf+0x390>
    1308:	7b cf       	rjmp	.-266    	; 0x1200 <vfprintf+0x286>
    130a:	8b e2       	ldi	r24, 0x2B	; 43
    130c:	41 fe       	sbrs	r4, 1
    130e:	80 e2       	ldi	r24, 0x20	; 32
    1310:	47 fc       	sbrc	r4, 7
    1312:	8d e2       	ldi	r24, 0x2D	; 45
    1314:	b7 01       	movw	r22, r14
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	71 cf       	rjmp	.-286    	; 0x11fc <vfprintf+0x282>
    131a:	b7 01       	movw	r22, r14
    131c:	80 e3       	ldi	r24, 0x30	; 48
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    1324:	9a 94       	dec	r9
    1326:	6c cf       	rjmp	.-296    	; 0x1200 <vfprintf+0x286>
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	9f ef       	ldi	r25, 0xFF	; 255
    132c:	99 cf       	rjmp	.-206    	; 0x1260 <vfprintf+0x2e6>

0000132e <strnlen_P>:
strnlen_P():
    132e:	fc 01       	movw	r30, r24
    1330:	05 90       	lpm	r0, Z+
    1332:	61 50       	subi	r22, 0x01	; 1
    1334:	70 40       	sbci	r23, 0x00	; 0
    1336:	01 10       	cpse	r0, r1
    1338:	d8 f7       	brcc	.-10     	; 0x1330 <strnlen_P+0x2>
    133a:	80 95       	com	r24
    133c:	90 95       	com	r25
    133e:	8e 0f       	add	r24, r30
    1340:	9f 1f       	adc	r25, r31
    1342:	08 95       	ret

00001344 <strnlen>:
strnlen():
    1344:	fc 01       	movw	r30, r24
    1346:	61 50       	subi	r22, 0x01	; 1
    1348:	70 40       	sbci	r23, 0x00	; 0
    134a:	01 90       	ld	r0, Z+
    134c:	01 10       	cpse	r0, r1
    134e:	d8 f7       	brcc	.-10     	; 0x1346 <strnlen+0x2>
    1350:	80 95       	com	r24
    1352:	90 95       	com	r25
    1354:	8e 0f       	add	r24, r30
    1356:	9f 1f       	adc	r25, r31
    1358:	08 95       	ret

0000135a <fputc>:
fputc():
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	18 2f       	mov	r17, r24
    1364:	09 2f       	mov	r16, r25
    1366:	eb 01       	movw	r28, r22
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	81 fd       	sbrc	r24, 1
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <fputc+0x26>
    136e:	1f ef       	ldi	r17, 0xFF	; 255
    1370:	0f ef       	ldi	r16, 0xFF	; 255
    1372:	81 2f       	mov	r24, r17
    1374:	90 2f       	mov	r25, r16
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret
    1380:	82 ff       	sbrs	r24, 2
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <fputc+0x52>
    1384:	2e 81       	ldd	r18, Y+6	; 0x06
    1386:	3f 81       	ldd	r19, Y+7	; 0x07
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	3c f4       	brge	.+14     	; 0x13a0 <fputc+0x46>
    1392:	e8 81       	ld	r30, Y
    1394:	f9 81       	ldd	r31, Y+1	; 0x01
    1396:	cf 01       	movw	r24, r30
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	99 83       	std	Y+1, r25	; 0x01
    139c:	88 83       	st	Y, r24
    139e:	10 83       	st	Z, r17
    13a0:	8e 81       	ldd	r24, Y+6	; 0x06
    13a2:	9f 81       	ldd	r25, Y+7	; 0x07
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	9f 83       	std	Y+7, r25	; 0x07
    13a8:	8e 83       	std	Y+6, r24	; 0x06
    13aa:	e3 cf       	rjmp	.-58     	; 0x1372 <fputc+0x18>
    13ac:	e8 85       	ldd	r30, Y+8	; 0x08
    13ae:	f9 85       	ldd	r31, Y+9	; 0x09
    13b0:	81 2f       	mov	r24, r17
    13b2:	09 95       	icall
    13b4:	89 2b       	or	r24, r25
    13b6:	a1 f3       	breq	.-24     	; 0x13a0 <fputc+0x46>
    13b8:	da cf       	rjmp	.-76     	; 0x136e <fputc+0x14>

000013ba <__ultoa_invert>:
__ultoa_invert():
    13ba:	fa 01       	movw	r30, r20
    13bc:	aa 27       	eor	r26, r26
    13be:	28 30       	cpi	r18, 0x08	; 8
    13c0:	51 f1       	breq	.+84     	; 0x1416 <__ultoa_invert+0x5c>
    13c2:	20 31       	cpi	r18, 0x10	; 16
    13c4:	81 f1       	breq	.+96     	; 0x1426 <__ultoa_invert+0x6c>
    13c6:	e8 94       	clt
    13c8:	6f 93       	push	r22
    13ca:	6e 7f       	andi	r22, 0xFE	; 254
    13cc:	6e 5f       	subi	r22, 0xFE	; 254
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	8f 4f       	sbci	r24, 0xFF	; 255
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	af 4f       	sbci	r26, 0xFF	; 255
    13d6:	b1 e0       	ldi	r27, 0x01	; 1
    13d8:	3e d0       	rcall	.+124    	; 0x1456 <__ultoa_invert+0x9c>
    13da:	b4 e0       	ldi	r27, 0x04	; 4
    13dc:	3c d0       	rcall	.+120    	; 0x1456 <__ultoa_invert+0x9c>
    13de:	67 0f       	add	r22, r23
    13e0:	78 1f       	adc	r23, r24
    13e2:	89 1f       	adc	r24, r25
    13e4:	9a 1f       	adc	r25, r26
    13e6:	a1 1d       	adc	r26, r1
    13e8:	68 0f       	add	r22, r24
    13ea:	79 1f       	adc	r23, r25
    13ec:	8a 1f       	adc	r24, r26
    13ee:	91 1d       	adc	r25, r1
    13f0:	a1 1d       	adc	r26, r1
    13f2:	6a 0f       	add	r22, r26
    13f4:	71 1d       	adc	r23, r1
    13f6:	81 1d       	adc	r24, r1
    13f8:	91 1d       	adc	r25, r1
    13fa:	a1 1d       	adc	r26, r1
    13fc:	20 d0       	rcall	.+64     	; 0x143e <__ultoa_invert+0x84>
    13fe:	09 f4       	brne	.+2      	; 0x1402 <__ultoa_invert+0x48>
    1400:	68 94       	set
    1402:	3f 91       	pop	r19
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	26 9f       	mul	r18, r22
    1408:	11 24       	eor	r1, r1
    140a:	30 19       	sub	r19, r0
    140c:	30 5d       	subi	r19, 0xD0	; 208
    140e:	31 93       	st	Z+, r19
    1410:	de f6       	brtc	.-74     	; 0x13c8 <__ultoa_invert+0xe>
    1412:	cf 01       	movw	r24, r30
    1414:	08 95       	ret
    1416:	46 2f       	mov	r20, r22
    1418:	47 70       	andi	r20, 0x07	; 7
    141a:	40 5d       	subi	r20, 0xD0	; 208
    141c:	41 93       	st	Z+, r20
    141e:	b3 e0       	ldi	r27, 0x03	; 3
    1420:	0f d0       	rcall	.+30     	; 0x1440 <__ultoa_invert+0x86>
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__ultoa_invert+0x5c>
    1424:	f6 cf       	rjmp	.-20     	; 0x1412 <__ultoa_invert+0x58>
    1426:	46 2f       	mov	r20, r22
    1428:	4f 70       	andi	r20, 0x0F	; 15
    142a:	40 5d       	subi	r20, 0xD0	; 208
    142c:	4a 33       	cpi	r20, 0x3A	; 58
    142e:	18 f0       	brcs	.+6      	; 0x1436 <__ultoa_invert+0x7c>
    1430:	49 5d       	subi	r20, 0xD9	; 217
    1432:	31 fd       	sbrc	r19, 1
    1434:	40 52       	subi	r20, 0x20	; 32
    1436:	41 93       	st	Z+, r20
    1438:	02 d0       	rcall	.+4      	; 0x143e <__ultoa_invert+0x84>
    143a:	a9 f7       	brne	.-22     	; 0x1426 <__ultoa_invert+0x6c>
    143c:	ea cf       	rjmp	.-44     	; 0x1412 <__ultoa_invert+0x58>
    143e:	b4 e0       	ldi	r27, 0x04	; 4
    1440:	a6 95       	lsr	r26
    1442:	97 95       	ror	r25
    1444:	87 95       	ror	r24
    1446:	77 95       	ror	r23
    1448:	67 95       	ror	r22
    144a:	ba 95       	dec	r27
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__ultoa_invert+0x86>
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 05       	cpc	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	08 95       	ret
    1456:	9b 01       	movw	r18, r22
    1458:	ac 01       	movw	r20, r24
    145a:	0a 2e       	mov	r0, r26
    145c:	06 94       	lsr	r0
    145e:	57 95       	ror	r21
    1460:	47 95       	ror	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	ba 95       	dec	r27
    1468:	c9 f7       	brne	.-14     	; 0x145c <__ultoa_invert+0xa2>
    146a:	62 0f       	add	r22, r18
    146c:	73 1f       	adc	r23, r19
    146e:	84 1f       	adc	r24, r20
    1470:	95 1f       	adc	r25, r21
    1472:	a0 1d       	adc	r26, r0
    1474:	08 95       	ret

00001476 <__floatunsisf>:
__floatunsisf():
    1476:	e8 94       	clt
    1478:	09 c0       	rjmp	.+18     	; 0x148c <__floatsisf+0x12>

0000147a <__floatsisf>:
    147a:	97 fb       	bst	r25, 7
    147c:	3e f4       	brtc	.+14     	; 0x148c <__floatsisf+0x12>
    147e:	90 95       	com	r25
    1480:	80 95       	com	r24
    1482:	70 95       	com	r23
    1484:	61 95       	neg	r22
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	8f 4f       	sbci	r24, 0xFF	; 255
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	99 23       	and	r25, r25
    148e:	a9 f0       	breq	.+42     	; 0x14ba <__floatsisf+0x40>
    1490:	f9 2f       	mov	r31, r25
    1492:	96 e9       	ldi	r25, 0x96	; 150
    1494:	bb 27       	eor	r27, r27
    1496:	93 95       	inc	r25
    1498:	f6 95       	lsr	r31
    149a:	87 95       	ror	r24
    149c:	77 95       	ror	r23
    149e:	67 95       	ror	r22
    14a0:	b7 95       	ror	r27
    14a2:	f1 11       	cpse	r31, r1
    14a4:	f8 cf       	rjmp	.-16     	; 0x1496 <__floatsisf+0x1c>
    14a6:	fa f4       	brpl	.+62     	; 0x14e6 <__floatsisf+0x6c>
    14a8:	bb 0f       	add	r27, r27
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <__floatsisf+0x36>
    14ac:	60 ff       	sbrs	r22, 0
    14ae:	1b c0       	rjmp	.+54     	; 0x14e6 <__floatsisf+0x6c>
    14b0:	6f 5f       	subi	r22, 0xFF	; 255
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255
    14b4:	8f 4f       	sbci	r24, 0xFF	; 255
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	16 c0       	rjmp	.+44     	; 0x14e6 <__floatsisf+0x6c>
    14ba:	88 23       	and	r24, r24
    14bc:	11 f0       	breq	.+4      	; 0x14c2 <__floatsisf+0x48>
    14be:	96 e9       	ldi	r25, 0x96	; 150
    14c0:	11 c0       	rjmp	.+34     	; 0x14e4 <__floatsisf+0x6a>
    14c2:	77 23       	and	r23, r23
    14c4:	21 f0       	breq	.+8      	; 0x14ce <__floatsisf+0x54>
    14c6:	9e e8       	ldi	r25, 0x8E	; 142
    14c8:	87 2f       	mov	r24, r23
    14ca:	76 2f       	mov	r23, r22
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8 <__floatsisf+0x5e>
    14ce:	66 23       	and	r22, r22
    14d0:	71 f0       	breq	.+28     	; 0x14ee <__floatsisf+0x74>
    14d2:	96 e8       	ldi	r25, 0x86	; 134
    14d4:	86 2f       	mov	r24, r22
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	2a f0       	brmi	.+10     	; 0x14e6 <__floatsisf+0x6c>
    14dc:	9a 95       	dec	r25
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	da f7       	brpl	.-10     	; 0x14dc <__floatsisf+0x62>
    14e6:	88 0f       	add	r24, r24
    14e8:	96 95       	lsr	r25
    14ea:	87 95       	ror	r24
    14ec:	97 f9       	bld	r25, 7
    14ee:	08 95       	ret

000014f0 <__fp_inf>:
__fp_inf():
    14f0:	97 f9       	bld	r25, 7
    14f2:	9f 67       	ori	r25, 0x7F	; 127
    14f4:	80 e8       	ldi	r24, 0x80	; 128
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	08 95       	ret

000014fc <__fp_nan>:
__fp_nan():
    14fc:	9f ef       	ldi	r25, 0xFF	; 255
    14fe:	80 ec       	ldi	r24, 0xC0	; 192
    1500:	08 95       	ret

00001502 <__fp_pscA>:
__fp_pscA():
    1502:	00 24       	eor	r0, r0
    1504:	0a 94       	dec	r0
    1506:	16 16       	cp	r1, r22
    1508:	17 06       	cpc	r1, r23
    150a:	18 06       	cpc	r1, r24
    150c:	09 06       	cpc	r0, r25
    150e:	08 95       	ret

00001510 <__fp_pscB>:
__fp_pscB():
    1510:	00 24       	eor	r0, r0
    1512:	0a 94       	dec	r0
    1514:	12 16       	cp	r1, r18
    1516:	13 06       	cpc	r1, r19
    1518:	14 06       	cpc	r1, r20
    151a:	05 06       	cpc	r0, r21
    151c:	08 95       	ret

0000151e <__fp_round>:
__fp_round():
    151e:	09 2e       	mov	r0, r25
    1520:	03 94       	inc	r0
    1522:	00 0c       	add	r0, r0
    1524:	11 f4       	brne	.+4      	; 0x152a <__fp_round+0xc>
    1526:	88 23       	and	r24, r24
    1528:	52 f0       	brmi	.+20     	; 0x153e <__fp_round+0x20>
    152a:	bb 0f       	add	r27, r27
    152c:	40 f4       	brcc	.+16     	; 0x153e <__fp_round+0x20>
    152e:	bf 2b       	or	r27, r31
    1530:	11 f4       	brne	.+4      	; 0x1536 <__fp_round+0x18>
    1532:	60 ff       	sbrs	r22, 0
    1534:	04 c0       	rjmp	.+8      	; 0x153e <__fp_round+0x20>
    1536:	6f 5f       	subi	r22, 0xFF	; 255
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	8f 4f       	sbci	r24, 0xFF	; 255
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	08 95       	ret

00001540 <__fp_split3>:
__fp_split3():
    1540:	57 fd       	sbrc	r21, 7
    1542:	90 58       	subi	r25, 0x80	; 128
    1544:	44 0f       	add	r20, r20
    1546:	55 1f       	adc	r21, r21
    1548:	59 f0       	breq	.+22     	; 0x1560 <__fp_splitA+0x10>
    154a:	5f 3f       	cpi	r21, 0xFF	; 255
    154c:	71 f0       	breq	.+28     	; 0x156a <__fp_splitA+0x1a>
    154e:	47 95       	ror	r20

00001550 <__fp_splitA>:
    1550:	88 0f       	add	r24, r24
    1552:	97 fb       	bst	r25, 7
    1554:	99 1f       	adc	r25, r25
    1556:	61 f0       	breq	.+24     	; 0x1570 <__fp_splitA+0x20>
    1558:	9f 3f       	cpi	r25, 0xFF	; 255
    155a:	79 f0       	breq	.+30     	; 0x157a <__fp_splitA+0x2a>
    155c:	87 95       	ror	r24
    155e:	08 95       	ret
    1560:	12 16       	cp	r1, r18
    1562:	13 06       	cpc	r1, r19
    1564:	14 06       	cpc	r1, r20
    1566:	55 1f       	adc	r21, r21
    1568:	f2 cf       	rjmp	.-28     	; 0x154e <__fp_split3+0xe>
    156a:	46 95       	lsr	r20
    156c:	f1 df       	rcall	.-30     	; 0x1550 <__fp_splitA>
    156e:	08 c0       	rjmp	.+16     	; 0x1580 <__fp_splitA+0x30>
    1570:	16 16       	cp	r1, r22
    1572:	17 06       	cpc	r1, r23
    1574:	18 06       	cpc	r1, r24
    1576:	99 1f       	adc	r25, r25
    1578:	f1 cf       	rjmp	.-30     	; 0x155c <__fp_splitA+0xc>
    157a:	86 95       	lsr	r24
    157c:	71 05       	cpc	r23, r1
    157e:	61 05       	cpc	r22, r1
    1580:	08 94       	sec
    1582:	08 95       	ret

00001584 <__fp_zero>:
__fp_zero():
    1584:	e8 94       	clt

00001586 <__fp_szero>:
    1586:	bb 27       	eor	r27, r27
    1588:	66 27       	eor	r22, r22
    158a:	77 27       	eor	r23, r23
    158c:	cb 01       	movw	r24, r22
    158e:	97 f9       	bld	r25, 7
    1590:	08 95       	ret

00001592 <eeprom_read_byte>:
eeprom_read_byte():
    1592:	f9 99       	sbic	0x1f, 1	; 31
    1594:	fe cf       	rjmp	.-4      	; 0x1592 <eeprom_read_byte>
    1596:	92 bd       	out	0x22, r25	; 34
    1598:	81 bd       	out	0x21, r24	; 33
    159a:	f8 9a       	sbi	0x1f, 0	; 31
    159c:	99 27       	eor	r25, r25
    159e:	80 b5       	in	r24, 0x20	; 32
    15a0:	08 95       	ret

000015a2 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    15a2:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    15a4:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    15a6:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    15a8:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    15aa:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    15ac:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    15ae:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    15b0:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    15b2:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    15b4:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    15b6:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    15b8:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    15ba:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    15bc:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    15be:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    15c0:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    15c2:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    15c4:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    15c6:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    15c8:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    15ca:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    15cc:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    15ce:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    15d0:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    15d2:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    15d4:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    15d6:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    15d8:	09 94       	ijmp

000015da <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    15da:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    15dc:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    15de:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    15e0:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    15e2:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    15e4:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    15e6:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    15e8:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    15ea:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    15ec:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    15ee:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    15f0:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    15f2:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    15f4:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    15f6:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    15f8:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    15fa:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    15fc:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    15fe:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1600:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1602:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1604:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1606:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1608:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    160a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    160c:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    160e:	08 95       	ret

00001610 <__subsf3>:
__subsf3():
    1610:	50 58       	subi	r21, 0x80	; 128

00001612 <__addsf3>:
    1612:	bb 27       	eor	r27, r27
    1614:	aa 27       	eor	r26, r26
    1616:	0e 94 20 0b 	call	0x1640	; 0x1640 <__addsf3x>
    161a:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__fp_round>
__addsf3():
    161e:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fp_pscA>
    1622:	38 f0       	brcs	.+14     	; 0x1632 <__addsf3+0x20>
    1624:	0e 94 88 0a 	call	0x1510	; 0x1510 <__fp_pscB>
    1628:	20 f0       	brcs	.+8      	; 0x1632 <__addsf3+0x20>
    162a:	39 f4       	brne	.+14     	; 0x163a <__addsf3+0x28>
    162c:	9f 3f       	cpi	r25, 0xFF	; 255
    162e:	19 f4       	brne	.+6      	; 0x1636 <__addsf3+0x24>
    1630:	26 f4       	brtc	.+8      	; 0x163a <__addsf3+0x28>
    1632:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_nan>
    1636:	0e f4       	brtc	.+2      	; 0x163a <__addsf3+0x28>
    1638:	e0 95       	com	r30
    163a:	e7 fb       	bst	r30, 7
    163c:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__fp_inf>

00001640 <__addsf3x>:
__addsf3x():
    1640:	e9 2f       	mov	r30, r25
    1642:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__fp_split3>
    1646:	58 f3       	brcs	.-42     	; 0x161e <__addsf3+0xc>
    1648:	ba 17       	cp	r27, r26
    164a:	62 07       	cpc	r22, r18
    164c:	73 07       	cpc	r23, r19
    164e:	84 07       	cpc	r24, r20
    1650:	95 07       	cpc	r25, r21
    1652:	20 f0       	brcs	.+8      	; 0x165c <__addsf3x+0x1c>
    1654:	79 f4       	brne	.+30     	; 0x1674 <__addsf3x+0x34>
    1656:	a6 f5       	brtc	.+104    	; 0x16c0 <__addsf3x+0x80>
    1658:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__fp_zero>
    165c:	0e f4       	brtc	.+2      	; 0x1660 <__addsf3x+0x20>
    165e:	e0 95       	com	r30
    1660:	0b 2e       	mov	r0, r27
    1662:	ba 2f       	mov	r27, r26
    1664:	a0 2d       	mov	r26, r0
    1666:	0b 01       	movw	r0, r22
    1668:	b9 01       	movw	r22, r18
    166a:	90 01       	movw	r18, r0
    166c:	0c 01       	movw	r0, r24
    166e:	ca 01       	movw	r24, r20
    1670:	a0 01       	movw	r20, r0
    1672:	11 24       	eor	r1, r1
    1674:	ff 27       	eor	r31, r31
    1676:	59 1b       	sub	r21, r25
    1678:	99 f0       	breq	.+38     	; 0x16a0 <__addsf3x+0x60>
    167a:	59 3f       	cpi	r21, 0xF9	; 249
    167c:	50 f4       	brcc	.+20     	; 0x1692 <__addsf3x+0x52>
    167e:	50 3e       	cpi	r21, 0xE0	; 224
    1680:	68 f1       	brcs	.+90     	; 0x16dc <__addsf3x+0x9c>
    1682:	1a 16       	cp	r1, r26
    1684:	f0 40       	sbci	r31, 0x00	; 0
    1686:	a2 2f       	mov	r26, r18
    1688:	23 2f       	mov	r18, r19
    168a:	34 2f       	mov	r19, r20
    168c:	44 27       	eor	r20, r20
    168e:	58 5f       	subi	r21, 0xF8	; 248
    1690:	f3 cf       	rjmp	.-26     	; 0x1678 <__addsf3x+0x38>
    1692:	46 95       	lsr	r20
    1694:	37 95       	ror	r19
    1696:	27 95       	ror	r18
    1698:	a7 95       	ror	r26
    169a:	f0 40       	sbci	r31, 0x00	; 0
    169c:	53 95       	inc	r21
    169e:	c9 f7       	brne	.-14     	; 0x1692 <__addsf3x+0x52>
    16a0:	7e f4       	brtc	.+30     	; 0x16c0 <__addsf3x+0x80>
    16a2:	1f 16       	cp	r1, r31
    16a4:	ba 0b       	sbc	r27, r26
    16a6:	62 0b       	sbc	r22, r18
    16a8:	73 0b       	sbc	r23, r19
    16aa:	84 0b       	sbc	r24, r20
    16ac:	ba f0       	brmi	.+46     	; 0x16dc <__addsf3x+0x9c>
    16ae:	91 50       	subi	r25, 0x01	; 1
    16b0:	a1 f0       	breq	.+40     	; 0x16da <__addsf3x+0x9a>
    16b2:	ff 0f       	add	r31, r31
    16b4:	bb 1f       	adc	r27, r27
    16b6:	66 1f       	adc	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	c2 f7       	brpl	.-16     	; 0x16ae <__addsf3x+0x6e>
    16be:	0e c0       	rjmp	.+28     	; 0x16dc <__addsf3x+0x9c>
    16c0:	ba 0f       	add	r27, r26
    16c2:	62 1f       	adc	r22, r18
    16c4:	73 1f       	adc	r23, r19
    16c6:	84 1f       	adc	r24, r20
    16c8:	48 f4       	brcc	.+18     	; 0x16dc <__addsf3x+0x9c>
    16ca:	87 95       	ror	r24
    16cc:	77 95       	ror	r23
    16ce:	67 95       	ror	r22
    16d0:	b7 95       	ror	r27
    16d2:	f7 95       	ror	r31
    16d4:	9e 3f       	cpi	r25, 0xFE	; 254
    16d6:	08 f0       	brcs	.+2      	; 0x16da <__addsf3x+0x9a>
    16d8:	b0 cf       	rjmp	.-160    	; 0x163a <__addsf3+0x28>
    16da:	93 95       	inc	r25
    16dc:	88 0f       	add	r24, r24
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <__addsf3x+0xa2>
    16e0:	99 27       	eor	r25, r25
    16e2:	ee 0f       	add	r30, r30
    16e4:	97 95       	ror	r25
    16e6:	87 95       	ror	r24
    16e8:	08 95       	ret

000016ea <__fixsfsi>:
    16ea:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__fixunssfsi>
    16ee:	68 94       	set
    16f0:	b1 11       	cpse	r27, r1
    16f2:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_szero>
    16f6:	08 95       	ret

000016f8 <__fixunssfsi>:
    16f8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_splitA>
    16fc:	88 f0       	brcs	.+34     	; 0x1720 <__fixunssfsi+0x28>
    16fe:	9f 57       	subi	r25, 0x7F	; 127
    1700:	98 f0       	brcs	.+38     	; 0x1728 <__fixunssfsi+0x30>
    1702:	b9 2f       	mov	r27, r25
    1704:	99 27       	eor	r25, r25
    1706:	b7 51       	subi	r27, 0x17	; 23
    1708:	b0 f0       	brcs	.+44     	; 0x1736 <__fixunssfsi+0x3e>
    170a:	e1 f0       	breq	.+56     	; 0x1744 <__fixunssfsi+0x4c>
__fixunssfsi():
    170c:	66 0f       	add	r22, r22
    170e:	77 1f       	adc	r23, r23
    1710:	88 1f       	adc	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	1a f0       	brmi	.+6      	; 0x171c <__fixunssfsi+0x24>
    1716:	ba 95       	dec	r27
    1718:	c9 f7       	brne	.-14     	; 0x170c <__fixunssfsi+0x14>
    171a:	14 c0       	rjmp	.+40     	; 0x1744 <__fixunssfsi+0x4c>
    171c:	b1 30       	cpi	r27, 0x01	; 1
    171e:	91 f0       	breq	.+36     	; 0x1744 <__fixunssfsi+0x4c>
    1720:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__fp_zero>
    1724:	b1 e0       	ldi	r27, 0x01	; 1
    1726:	08 95       	ret
    1728:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__fp_zero>
    172c:	67 2f       	mov	r22, r23
    172e:	78 2f       	mov	r23, r24
    1730:	88 27       	eor	r24, r24
    1732:	b8 5f       	subi	r27, 0xF8	; 248
    1734:	39 f0       	breq	.+14     	; 0x1744 <__fixunssfsi+0x4c>
    1736:	b9 3f       	cpi	r27, 0xF9	; 249
    1738:	cc f3       	brlt	.-14     	; 0x172c <__fixunssfsi+0x34>
    173a:	86 95       	lsr	r24
    173c:	77 95       	ror	r23
    173e:	67 95       	ror	r22
    1740:	b3 95       	inc	r27
    1742:	d9 f7       	brne	.-10     	; 0x173a <__fixunssfsi+0x42>
    1744:	3e f4       	brtc	.+14     	; 0x1754 <__fixunssfsi+0x5c>
    1746:	90 95       	com	r25
    1748:	80 95       	com	r24
    174a:	70 95       	com	r23
    174c:	61 95       	neg	r22
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	8f 4f       	sbci	r24, 0xFF	; 255
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	08 95       	ret

00001756 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1756:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1758:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    175a:	16 f4       	brtc	.+4      	; 0x1760 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    175c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    175e:	07 d0       	rcall	.+14     	; 0x176e <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1760:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1762:	09 d0       	rcall	.+18     	; 0x1776 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1764:	0e 94 bf 0b 	call	0x177e	; 0x177e <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1768:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    176a:	05 d0       	rcall	.+10     	; 0x1776 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    176c:	3e f4       	brtc	.+14     	; 0x177c <__divmodhi4_exit>

0000176e <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    176e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    1770:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1774:	08 95       	ret

00001776 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1776:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1778:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    177a:	7f 4f       	sbci	r23, 0xFF	; 255

0000177c <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    177c:	08 95       	ret

0000177e <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    177e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1780:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1782:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1784:	07 c0       	rjmp	.+14     	; 0x1794 <__udivmodhi4_ep>

00001786 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1786:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1788:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    178a:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    178c:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    178e:	10 f0       	brcs	.+4      	; 0x1794 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1790:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1792:	b7 0b       	sbc	r27, r23

00001794 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1794:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1796:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1798:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    179a:	a9 f7       	brne	.-22     	; 0x1786 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    179c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    179e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    17a0:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    17a2:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    17a4:	08 95       	ret

000017a6 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    17a6:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    17a8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    17aa:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    17ac:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    17ae:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    17b0:	09 94       	ijmp

000017b2 <malloc>:
malloc():
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	91 05       	cpc	r25, r1
    17be:	10 f4       	brcc	.+4      	; 0x17c4 <malloc+0x12>
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <__flp>
    17c8:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <__flp+0x1>
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	30 97       	sbiw	r30, 0x00	; 0
    17d6:	99 f4       	brne	.+38     	; 0x17fe <malloc+0x4c>
    17d8:	21 15       	cp	r18, r1
    17da:	31 05       	cpc	r19, r1
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <malloc+0x2e>
    17de:	4a c0       	rjmp	.+148    	; 0x1874 <malloc+0xc2>
    17e0:	28 1b       	sub	r18, r24
    17e2:	39 0b       	sbc	r19, r25
    17e4:	24 30       	cpi	r18, 0x04	; 4
    17e6:	31 05       	cpc	r19, r1
    17e8:	d8 f5       	brcc	.+118    	; 0x1860 <malloc+0xae>
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	9b 81       	ldd	r25, Y+3	; 0x03
    17ee:	61 15       	cp	r22, r1
    17f0:	71 05       	cpc	r23, r1
    17f2:	89 f1       	breq	.+98     	; 0x1856 <malloc+0xa4>
    17f4:	fb 01       	movw	r30, r22
    17f6:	93 83       	std	Z+3, r25	; 0x03
    17f8:	82 83       	std	Z+2, r24	; 0x02
    17fa:	fe 01       	movw	r30, r28
    17fc:	11 c0       	rjmp	.+34     	; 0x1820 <malloc+0x6e>
    17fe:	40 81       	ld	r20, Z
    1800:	51 81       	ldd	r21, Z+1	; 0x01
    1802:	02 81       	ldd	r16, Z+2	; 0x02
    1804:	13 81       	ldd	r17, Z+3	; 0x03
    1806:	48 17       	cp	r20, r24
    1808:	59 07       	cpc	r21, r25
    180a:	e0 f0       	brcs	.+56     	; 0x1844 <malloc+0x92>
    180c:	48 17       	cp	r20, r24
    180e:	59 07       	cpc	r21, r25
    1810:	99 f4       	brne	.+38     	; 0x1838 <malloc+0x86>
    1812:	10 97       	sbiw	r26, 0x00	; 0
    1814:	61 f0       	breq	.+24     	; 0x182e <malloc+0x7c>
    1816:	12 96       	adiw	r26, 0x02	; 2
    1818:	0c 93       	st	X, r16
    181a:	12 97       	sbiw	r26, 0x02	; 2
    181c:	13 96       	adiw	r26, 0x03	; 3
    181e:	1c 93       	st	X, r17
    1820:	32 96       	adiw	r30, 0x02	; 2
    1822:	cf 01       	movw	r24, r30
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	08 95       	ret
    182e:	00 93 12 04 	sts	0x0412, r16	; 0x800412 <__flp>
    1832:	10 93 13 04 	sts	0x0413, r17	; 0x800413 <__flp+0x1>
    1836:	f4 cf       	rjmp	.-24     	; 0x1820 <malloc+0x6e>
    1838:	21 15       	cp	r18, r1
    183a:	31 05       	cpc	r19, r1
    183c:	51 f0       	breq	.+20     	; 0x1852 <malloc+0xa0>
    183e:	42 17       	cp	r20, r18
    1840:	53 07       	cpc	r21, r19
    1842:	38 f0       	brcs	.+14     	; 0x1852 <malloc+0xa0>
    1844:	a9 01       	movw	r20, r18
    1846:	db 01       	movw	r26, r22
    1848:	9a 01       	movw	r18, r20
    184a:	bd 01       	movw	r22, r26
    184c:	df 01       	movw	r26, r30
    184e:	f8 01       	movw	r30, r16
    1850:	c1 cf       	rjmp	.-126    	; 0x17d4 <malloc+0x22>
    1852:	ef 01       	movw	r28, r30
    1854:	f9 cf       	rjmp	.-14     	; 0x1848 <malloc+0x96>
    1856:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <__flp+0x1>
    185a:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__flp>
    185e:	cd cf       	rjmp	.-102    	; 0x17fa <malloc+0x48>
    1860:	fe 01       	movw	r30, r28
    1862:	e2 0f       	add	r30, r18
    1864:	f3 1f       	adc	r31, r19
    1866:	81 93       	st	Z+, r24
    1868:	91 93       	st	Z+, r25
    186a:	22 50       	subi	r18, 0x02	; 2
    186c:	31 09       	sbc	r19, r1
    186e:	39 83       	std	Y+1, r19	; 0x01
    1870:	28 83       	st	Y, r18
    1872:	d7 cf       	rjmp	.-82     	; 0x1822 <malloc+0x70>
    1874:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    1878:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    187c:	23 2b       	or	r18, r19
    187e:	41 f4       	brne	.+16     	; 0x1890 <malloc+0xde>
    1880:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
    1884:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
    1888:	30 93 11 04 	sts	0x0411, r19	; 0x800411 <__brkval+0x1>
    188c:	20 93 10 04 	sts	0x0410, r18	; 0x800410 <__brkval>
    1890:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
    1894:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    1898:	21 15       	cp	r18, r1
    189a:	31 05       	cpc	r19, r1
    189c:	41 f4       	brne	.+16     	; 0x18ae <malloc+0xfc>
    189e:	2d b7       	in	r18, 0x3d	; 61
    18a0:	3e b7       	in	r19, 0x3e	; 62
    18a2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    18a6:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    18aa:	24 1b       	sub	r18, r20
    18ac:	35 0b       	sbc	r19, r21
    18ae:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <__brkval>
    18b2:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <__brkval+0x1>
    18b6:	e2 17       	cp	r30, r18
    18b8:	f3 07       	cpc	r31, r19
    18ba:	a0 f4       	brcc	.+40     	; 0x18e4 <malloc+0x132>
    18bc:	2e 1b       	sub	r18, r30
    18be:	3f 0b       	sbc	r19, r31
    18c0:	28 17       	cp	r18, r24
    18c2:	39 07       	cpc	r19, r25
    18c4:	78 f0       	brcs	.+30     	; 0x18e4 <malloc+0x132>
    18c6:	ac 01       	movw	r20, r24
    18c8:	4e 5f       	subi	r20, 0xFE	; 254
    18ca:	5f 4f       	sbci	r21, 0xFF	; 255
    18cc:	24 17       	cp	r18, r20
    18ce:	35 07       	cpc	r19, r21
    18d0:	48 f0       	brcs	.+18     	; 0x18e4 <malloc+0x132>
    18d2:	4e 0f       	add	r20, r30
    18d4:	5f 1f       	adc	r21, r31
    18d6:	50 93 11 04 	sts	0x0411, r21	; 0x800411 <__brkval+0x1>
    18da:	40 93 10 04 	sts	0x0410, r20	; 0x800410 <__brkval>
    18de:	81 93       	st	Z+, r24
    18e0:	91 93       	st	Z+, r25
    18e2:	9f cf       	rjmp	.-194    	; 0x1822 <malloc+0x70>
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	e0 e0       	ldi	r30, 0x00	; 0
    18e8:	9c cf       	rjmp	.-200    	; 0x1822 <malloc+0x70>

000018ea <free>:
free():
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	e9 f0       	breq	.+58     	; 0x192c <free+0x42>
    18f2:	fc 01       	movw	r30, r24
    18f4:	32 97       	sbiw	r30, 0x02	; 2
    18f6:	13 82       	std	Z+3, r1	; 0x03
    18f8:	12 82       	std	Z+2, r1	; 0x02
    18fa:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <__flp>
    18fe:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <__flp+0x1>
    1902:	ed 01       	movw	r28, r26
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	10 97       	sbiw	r26, 0x00	; 0
    190a:	a1 f4       	brne	.+40     	; 0x1934 <free+0x4a>
    190c:	20 81       	ld	r18, Z
    190e:	31 81       	ldd	r19, Z+1	; 0x01
    1910:	82 0f       	add	r24, r18
    1912:	93 1f       	adc	r25, r19
    1914:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    1918:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    191c:	28 17       	cp	r18, r24
    191e:	39 07       	cpc	r19, r25
    1920:	09 f0       	breq	.+2      	; 0x1924 <free+0x3a>
    1922:	61 c0       	rjmp	.+194    	; 0x19e6 <free+0xfc>
    1924:	f0 93 11 04 	sts	0x0411, r31	; 0x800411 <__brkval+0x1>
    1928:	e0 93 10 04 	sts	0x0410, r30	; 0x800410 <__brkval>
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret
    1932:	ea 01       	movw	r28, r20
    1934:	ce 17       	cp	r28, r30
    1936:	df 07       	cpc	r29, r31
    1938:	e8 f5       	brcc	.+122    	; 0x19b4 <free+0xca>
    193a:	4a 81       	ldd	r20, Y+2	; 0x02
    193c:	5b 81       	ldd	r21, Y+3	; 0x03
    193e:	9e 01       	movw	r18, r28
    1940:	41 15       	cp	r20, r1
    1942:	51 05       	cpc	r21, r1
    1944:	b1 f7       	brne	.-20     	; 0x1932 <free+0x48>
    1946:	e9 01       	movw	r28, r18
    1948:	fb 83       	std	Y+3, r31	; 0x03
    194a:	ea 83       	std	Y+2, r30	; 0x02
    194c:	49 91       	ld	r20, Y+
    194e:	59 91       	ld	r21, Y+
    1950:	c4 0f       	add	r28, r20
    1952:	d5 1f       	adc	r29, r21
    1954:	ec 17       	cp	r30, r28
    1956:	fd 07       	cpc	r31, r29
    1958:	61 f4       	brne	.+24     	; 0x1972 <free+0x88>
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	02 96       	adiw	r24, 0x02	; 2
    1960:	84 0f       	add	r24, r20
    1962:	95 1f       	adc	r25, r21
    1964:	e9 01       	movw	r28, r18
    1966:	99 83       	std	Y+1, r25	; 0x01
    1968:	88 83       	st	Y, r24
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	9b 83       	std	Y+3, r25	; 0x03
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	e0 e0       	ldi	r30, 0x00	; 0
    1976:	12 96       	adiw	r26, 0x02	; 2
    1978:	8d 91       	ld	r24, X+
    197a:	9c 91       	ld	r25, X
    197c:	13 97       	sbiw	r26, 0x03	; 3
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	b9 f5       	brne	.+110    	; 0x19f0 <free+0x106>
    1982:	2d 91       	ld	r18, X+
    1984:	3c 91       	ld	r19, X
    1986:	11 97       	sbiw	r26, 0x01	; 1
    1988:	cd 01       	movw	r24, r26
    198a:	02 96       	adiw	r24, 0x02	; 2
    198c:	82 0f       	add	r24, r18
    198e:	93 1f       	adc	r25, r19
    1990:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    1994:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    1998:	28 17       	cp	r18, r24
    199a:	39 07       	cpc	r19, r25
    199c:	39 f6       	brne	.-114    	; 0x192c <free+0x42>
    199e:	30 97       	sbiw	r30, 0x00	; 0
    19a0:	51 f5       	brne	.+84     	; 0x19f6 <free+0x10c>
    19a2:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <__flp+0x1>
    19a6:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__flp>
    19aa:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <__brkval+0x1>
    19ae:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <__brkval>
    19b2:	bc cf       	rjmp	.-136    	; 0x192c <free+0x42>
    19b4:	d3 83       	std	Z+3, r29	; 0x03
    19b6:	c2 83       	std	Z+2, r28	; 0x02
    19b8:	40 81       	ld	r20, Z
    19ba:	51 81       	ldd	r21, Z+1	; 0x01
    19bc:	84 0f       	add	r24, r20
    19be:	95 1f       	adc	r25, r21
    19c0:	c8 17       	cp	r28, r24
    19c2:	d9 07       	cpc	r29, r25
    19c4:	61 f4       	brne	.+24     	; 0x19de <free+0xf4>
    19c6:	4e 5f       	subi	r20, 0xFE	; 254
    19c8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ca:	88 81       	ld	r24, Y
    19cc:	99 81       	ldd	r25, Y+1	; 0x01
    19ce:	48 0f       	add	r20, r24
    19d0:	59 1f       	adc	r21, r25
    19d2:	51 83       	std	Z+1, r21	; 0x01
    19d4:	40 83       	st	Z, r20
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	93 83       	std	Z+3, r25	; 0x03
    19dc:	82 83       	std	Z+2, r24	; 0x02
    19de:	21 15       	cp	r18, r1
    19e0:	31 05       	cpc	r19, r1
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <free+0xfc>
    19e4:	b0 cf       	rjmp	.-160    	; 0x1946 <free+0x5c>
    19e6:	f0 93 13 04 	sts	0x0413, r31	; 0x800413 <__flp+0x1>
    19ea:	e0 93 12 04 	sts	0x0412, r30	; 0x800412 <__flp>
    19ee:	9e cf       	rjmp	.-196    	; 0x192c <free+0x42>
    19f0:	fd 01       	movw	r30, r26
    19f2:	dc 01       	movw	r26, r24
    19f4:	c0 cf       	rjmp	.-128    	; 0x1976 <free+0x8c>
    19f6:	13 82       	std	Z+3, r1	; 0x03
    19f8:	12 82       	std	Z+2, r1	; 0x02
    19fa:	d7 cf       	rjmp	.-82     	; 0x19aa <free+0xc0>

000019fc <realloc>:
realloc():
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	a0 e0       	ldi	r26, 0x00	; 0
    1a00:	e4 e0       	ldi	r30, 0x04	; 4
    1a02:	fd e0       	ldi	r31, 0x0D	; 13
    1a04:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__prologue_saves__+0x4>
    1a08:	8c 01       	movw	r16, r24
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	51 f4       	brne	.+20     	; 0x1a22 <realloc+0x26>
    1a0e:	cb 01       	movw	r24, r22
    1a10:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <malloc>
    1a14:	8c 01       	movw	r16, r24
    1a16:	c8 01       	movw	r24, r16
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	e0 e1       	ldi	r30, 0x10	; 16
    1a1e:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__epilogue_restores__+0x4>
    1a22:	fc 01       	movw	r30, r24
    1a24:	e6 0f       	add	r30, r22
    1a26:	f7 1f       	adc	r31, r23
    1a28:	9c 01       	movw	r18, r24
    1a2a:	22 50       	subi	r18, 0x02	; 2
    1a2c:	31 09       	sbc	r19, r1
    1a2e:	e2 17       	cp	r30, r18
    1a30:	f3 07       	cpc	r31, r19
    1a32:	08 f4       	brcc	.+2      	; 0x1a36 <realloc+0x3a>
    1a34:	9d c0       	rjmp	.+314    	; 0x1b70 <realloc+0x174>
    1a36:	d9 01       	movw	r26, r18
    1a38:	cd 91       	ld	r28, X+
    1a3a:	dc 91       	ld	r29, X
    1a3c:	11 97       	sbiw	r26, 0x01	; 1
    1a3e:	c6 17       	cp	r28, r22
    1a40:	d7 07       	cpc	r29, r23
    1a42:	98 f0       	brcs	.+38     	; 0x1a6a <realloc+0x6e>
    1a44:	c5 30       	cpi	r28, 0x05	; 5
    1a46:	d1 05       	cpc	r29, r1
    1a48:	30 f3       	brcs	.-52     	; 0x1a16 <realloc+0x1a>
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	04 97       	sbiw	r24, 0x04	; 4
    1a4e:	86 17       	cp	r24, r22
    1a50:	97 07       	cpc	r25, r23
    1a52:	08 f3       	brcs	.-62     	; 0x1a16 <realloc+0x1a>
    1a54:	c6 1b       	sub	r28, r22
    1a56:	d7 0b       	sbc	r29, r23
    1a58:	22 97       	sbiw	r28, 0x02	; 2
    1a5a:	c1 93       	st	Z+, r28
    1a5c:	d1 93       	st	Z+, r29
    1a5e:	6d 93       	st	X+, r22
    1a60:	7c 93       	st	X, r23
    1a62:	cf 01       	movw	r24, r30
    1a64:	0e 94 75 0c 	call	0x18ea	; 0x18ea <free>
    1a68:	d6 cf       	rjmp	.-84     	; 0x1a16 <realloc+0x1a>
    1a6a:	5b 01       	movw	r10, r22
    1a6c:	ac 1a       	sub	r10, r28
    1a6e:	bd 0a       	sbc	r11, r29
    1a70:	4c 01       	movw	r8, r24
    1a72:	8c 0e       	add	r8, r28
    1a74:	9d 1e       	adc	r9, r29
    1a76:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <__flp>
    1a7a:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <__flp+0x1>
    1a7e:	51 2c       	mov	r5, r1
    1a80:	41 2c       	mov	r4, r1
    1a82:	f1 2c       	mov	r15, r1
    1a84:	e1 2c       	mov	r14, r1
    1a86:	10 97       	sbiw	r26, 0x00	; 0
    1a88:	31 f5       	brne	.+76     	; 0x1ad6 <realloc+0xda>
    1a8a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <__brkval>
    1a8e:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <__brkval+0x1>
    1a92:	88 15       	cp	r24, r8
    1a94:	99 05       	cpc	r25, r9
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <realloc+0x9e>
    1a98:	5c c0       	rjmp	.+184    	; 0x1b52 <realloc+0x156>
    1a9a:	46 16       	cp	r4, r22
    1a9c:	57 06       	cpc	r5, r23
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <realloc+0xa6>
    1aa0:	58 c0       	rjmp	.+176    	; 0x1b52 <realloc+0x156>
    1aa2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_end>
    1aa6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	41 f4       	brne	.+16     	; 0x1abe <realloc+0xc2>
    1aae:	8d b7       	in	r24, 0x3d	; 61
    1ab0:	9e b7       	in	r25, 0x3e	; 62
    1ab2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    1ab6:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    1aba:	84 1b       	sub	r24, r20
    1abc:	95 0b       	sbc	r25, r21
    1abe:	e8 17       	cp	r30, r24
    1ac0:	f9 07       	cpc	r31, r25
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <realloc+0xca>
    1ac4:	55 c0       	rjmp	.+170    	; 0x1b70 <realloc+0x174>
    1ac6:	f0 93 11 04 	sts	0x0411, r31	; 0x800411 <__brkval+0x1>
    1aca:	e0 93 10 04 	sts	0x0410, r30	; 0x800410 <__brkval>
    1ace:	f9 01       	movw	r30, r18
    1ad0:	71 83       	std	Z+1, r23	; 0x01
    1ad2:	60 83       	st	Z, r22
    1ad4:	a0 cf       	rjmp	.-192    	; 0x1a16 <realloc+0x1a>
    1ad6:	8d 91       	ld	r24, X+
    1ad8:	9c 91       	ld	r25, X
    1ada:	11 97       	sbiw	r26, 0x01	; 1
    1adc:	12 96       	adiw	r26, 0x02	; 2
    1ade:	6c 90       	ld	r6, X
    1ae0:	12 97       	sbiw	r26, 0x02	; 2
    1ae2:	13 96       	adiw	r26, 0x03	; 3
    1ae4:	7c 90       	ld	r7, X
    1ae6:	13 97       	sbiw	r26, 0x03	; 3
    1ae8:	a8 15       	cp	r26, r8
    1aea:	b9 05       	cpc	r27, r9
    1aec:	59 f5       	brne	.+86     	; 0x1b44 <realloc+0x148>
    1aee:	6c 01       	movw	r12, r24
    1af0:	42 e0       	ldi	r20, 0x02	; 2
    1af2:	c4 0e       	add	r12, r20
    1af4:	d1 1c       	adc	r13, r1
    1af6:	ca 14       	cp	r12, r10
    1af8:	db 04       	cpc	r13, r11
    1afa:	20 f1       	brcs	.+72     	; 0x1b44 <realloc+0x148>
    1afc:	ac 01       	movw	r20, r24
    1afe:	4a 19       	sub	r20, r10
    1b00:	5b 09       	sbc	r21, r11
    1b02:	da 01       	movw	r26, r20
    1b04:	12 96       	adiw	r26, 0x02	; 2
    1b06:	15 97       	sbiw	r26, 0x05	; 5
    1b08:	80 f0       	brcs	.+32     	; 0x1b2a <realloc+0x12e>
    1b0a:	62 82       	std	Z+2, r6	; 0x02
    1b0c:	73 82       	std	Z+3, r7	; 0x03
    1b0e:	51 83       	std	Z+1, r21	; 0x01
    1b10:	40 83       	st	Z, r20
    1b12:	d9 01       	movw	r26, r18
    1b14:	6d 93       	st	X+, r22
    1b16:	7c 93       	st	X, r23
    1b18:	e1 14       	cp	r14, r1
    1b1a:	f1 04       	cpc	r15, r1
    1b1c:	71 f0       	breq	.+28     	; 0x1b3a <realloc+0x13e>
    1b1e:	d7 01       	movw	r26, r14
    1b20:	13 96       	adiw	r26, 0x03	; 3
    1b22:	fc 93       	st	X, r31
    1b24:	ee 93       	st	-X, r30
    1b26:	12 97       	sbiw	r26, 0x02	; 2
    1b28:	76 cf       	rjmp	.-276    	; 0x1a16 <realloc+0x1a>
    1b2a:	22 96       	adiw	r28, 0x02	; 2
    1b2c:	8c 0f       	add	r24, r28
    1b2e:	9d 1f       	adc	r25, r29
    1b30:	f9 01       	movw	r30, r18
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	f3 01       	movw	r30, r6
    1b38:	ef cf       	rjmp	.-34     	; 0x1b18 <realloc+0x11c>
    1b3a:	f0 93 13 04 	sts	0x0413, r31	; 0x800413 <__flp+0x1>
    1b3e:	e0 93 12 04 	sts	0x0412, r30	; 0x800412 <__flp>
    1b42:	69 cf       	rjmp	.-302    	; 0x1a16 <realloc+0x1a>
    1b44:	48 16       	cp	r4, r24
    1b46:	59 06       	cpc	r5, r25
    1b48:	08 f4       	brcc	.+2      	; 0x1b4c <realloc+0x150>
    1b4a:	2c 01       	movw	r4, r24
    1b4c:	7d 01       	movw	r14, r26
    1b4e:	d3 01       	movw	r26, r6
    1b50:	9a cf       	rjmp	.-204    	; 0x1a86 <realloc+0x8a>
    1b52:	cb 01       	movw	r24, r22
    1b54:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <malloc>
    1b58:	7c 01       	movw	r14, r24
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	49 f0       	breq	.+18     	; 0x1b70 <realloc+0x174>
    1b5e:	ae 01       	movw	r20, r28
    1b60:	b8 01       	movw	r22, r16
    1b62:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <memcpy>
    1b66:	c8 01       	movw	r24, r16
    1b68:	0e 94 75 0c 	call	0x18ea	; 0x18ea <free>
    1b6c:	87 01       	movw	r16, r14
    1b6e:	53 cf       	rjmp	.-346    	; 0x1a16 <realloc+0x1a>
    1b70:	10 e0       	ldi	r17, 0x00	; 0
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	50 cf       	rjmp	.-352    	; 0x1a16 <realloc+0x1a>

00001b76 <memcpy>:
memcpy():
    1b76:	fb 01       	movw	r30, r22
    1b78:	dc 01       	movw	r26, r24
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <memcpy+0xa>
    1b7c:	01 90       	ld	r0, Z+
    1b7e:	0d 92       	st	X+, r0
    1b80:	41 50       	subi	r20, 0x01	; 1
    1b82:	50 40       	sbci	r21, 0x00	; 0
    1b84:	d8 f7       	brcc	.-10     	; 0x1b7c <memcpy+0x6>
    1b86:	08 95       	ret

00001b88 <strcpy>:
strcpy():
    1b88:	fb 01       	movw	r30, r22
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	01 90       	ld	r0, Z+
    1b8e:	0d 92       	st	X+, r0
    1b90:	00 20       	and	r0, r0
    1b92:	e1 f7       	brne	.-8      	; 0x1b8c <strcpy+0x4>
    1b94:	08 95       	ret

00001b96 <sprintf>:
sprintf():
    1b96:	ae e0       	ldi	r26, 0x0E	; 14
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e1 ed       	ldi	r30, 0xD1	; 209
    1b9c:	fd e0       	ldi	r31, 0x0D	; 13
    1b9e:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__prologue_saves__+0x1c>
    1ba2:	0d 89       	ldd	r16, Y+21	; 0x15
    1ba4:	1e 89       	ldd	r17, Y+22	; 0x16
    1ba6:	86 e0       	ldi	r24, 0x06	; 6
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
    1baa:	1a 83       	std	Y+2, r17	; 0x02
    1bac:	09 83       	std	Y+1, r16	; 0x01
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	9f e7       	ldi	r25, 0x7F	; 127
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	ae 01       	movw	r20, r28
    1bb8:	47 5e       	subi	r20, 0xE7	; 231
    1bba:	5f 4f       	sbci	r21, 0xFF	; 255
    1bbc:	6f 89       	ldd	r22, Y+23	; 0x17
    1bbe:	78 8d       	ldd	r23, Y+24	; 0x18
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <vfprintf>
    1bc8:	2f 81       	ldd	r18, Y+7	; 0x07
    1bca:	38 85       	ldd	r19, Y+8	; 0x08
    1bcc:	02 0f       	add	r16, r18
    1bce:	13 1f       	adc	r17, r19
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	10 82       	st	Z, r1
    1bd4:	2e 96       	adiw	r28, 0x0e	; 14
    1bd6:	e4 e0       	ldi	r30, 0x04	; 4
    1bd8:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__epilogue_restores__+0x1c>

00001bdc <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1bdc:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1bde:	c2 e6       	ldi	r28, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1be0:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1be4:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1be6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1bea:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1bec:	c3 36       	cpi	r28, 0x63	; 99
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1bee:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1bf0:	c9 f7       	brne	.-14     	; 0x1be4 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1bf2:	f8 94       	cli

00001bf4 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1bf4:	ff cf       	rjmp	.-2      	; 0x1bf4 <__stop_program>
