
C:\Users\alexsn\AppData\Local\Temp\1\arduino\sketches\1A5EB07363DD63BDDB21EEAEAF67DC9D/NA22_Marx_uC_3cell.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_18>
      4c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03 02 02 03                                .......

00000093 <digital_pin_to_bit_mask_PGM>:
      93:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a3:	04 08 10 20 40 80 40                                ... @.@

000000aa <digital_pin_to_timer_PGM>:
      aa:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000000c2 <__ctors_start>:
__ctors_start():
      c2:	ef 03       	fmulsu	r22, r23

000000c4 <__ctors_end>:
__dtors_start():
      c4:	55 07       	cpc	r21, r21

000000c6 <__dtors_end>:
__dtors_end():
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      d2:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      d4:	aa e2       	ldi	r26, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      d6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      dc:	a4 31       	cpi	r26, 0x14	; 20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      de:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>

000000e2 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      e2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e8:	e4 ef       	ldi	r30, 0xF4	; 244
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ea:	fb e1       	ldi	r31, 0x1B	; 27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ee:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      f0:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      f2:	aa 32       	cpi	r26, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f4:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      f8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      fa:	c2 e6       	ldi	r28, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      fc:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     100:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     102:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     104:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     108:	c1 36       	cpi	r28, 0x61	; 97
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     10a:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 27 04 	call	0x84e	; 0x84e <main>
     112:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__do_global_dtors>

00000116 <__bad_interrupt>:
__vector_22():
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <digitalWrite>:
digitalWrite():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	e6 55       	subi	r30, 0x56	; 86
     120:	ff 4f       	sbci	r31, 0xFF	; 255
     122:	24 91       	lpm	r18, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     124:	fc 01       	movw	r30, r24
     126:	ed 56       	subi	r30, 0x6D	; 109
     128:	ff 4f       	sbci	r31, 0xFF	; 255
     12a:	34 91       	lpm	r19, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     12c:	fc 01       	movw	r30, r24
     12e:	e4 58       	subi	r30, 0x84	; 132
     130:	ff 4f       	sbci	r31, 0xFF	; 255
     132:	e4 91       	lpm	r30, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     134:	ee 23       	and	r30, r30
     136:	c9 f0       	breq	.+50     	; 0x16a <digitalWrite+0x50>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     138:	22 23       	and	r18, r18
     13a:	39 f0       	breq	.+14     	; 0x14a <digitalWrite+0x30>
turnOffPWM():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     13c:	24 30       	cpi	r18, 0x04	; 4
     13e:	01 f1       	breq	.+64     	; 0x180 <digitalWrite+0x66>
     140:	a8 f4       	brcc	.+42     	; 0x16c <digitalWrite+0x52>
     142:	22 30       	cpi	r18, 0x02	; 2
     144:	69 f1       	breq	.+90     	; 0x1a0 <digitalWrite+0x86>
     146:	23 30       	cpi	r18, 0x03	; 3
     148:	79 f1       	breq	.+94     	; 0x1a8 <digitalWrite+0x8e>
digitalWrite():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	ee 0f       	add	r30, r30
     14e:	ff 1f       	adc	r31, r31
     150:	ee 58       	subi	r30, 0x8E	; 142
     152:	ff 4f       	sbci	r31, 0xFF	; 255
     154:	a5 91       	lpm	r26, Z+
     156:	b4 91       	lpm	r27, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     158:	8f b7       	in	r24, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     15a:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     15c:	ec 91       	ld	r30, X
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     15e:	61 11       	cpse	r22, r1
     160:	26 c0       	rjmp	.+76     	; 0x1ae <digitalWrite+0x94>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     162:	30 95       	com	r19
     164:	3e 23       	and	r19, r30
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     166:	3c 93       	st	X, r19
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     168:	8f bf       	out	0x3f, r24	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
     16a:	08 95       	ret
turnOffPWM():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     16c:	28 30       	cpi	r18, 0x08	; 8
     16e:	71 f0       	breq	.+28     	; 0x18c <digitalWrite+0x72>
     170:	29 30       	cpi	r18, 0x09	; 9
     172:	91 f0       	breq	.+36     	; 0x198 <digitalWrite+0x7e>
     174:	25 30       	cpi	r18, 0x05	; 5
     176:	49 f7       	brne	.-46     	; 0x14a <digitalWrite+0x30>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     178:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     17c:	8f 7d       	andi	r24, 0xDF	; 223
     17e:	03 c0       	rjmp	.+6      	; 0x186 <digitalWrite+0x6c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     180:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     184:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     186:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     18a:	df cf       	rjmp	.-66     	; 0x14a <digitalWrite+0x30>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     18c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     190:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     192:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     196:	d9 cf       	rjmp	.-78     	; 0x14a <digitalWrite+0x30>
     198:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     19c:	8f 7d       	andi	r24, 0xDF	; 223
     19e:	f9 cf       	rjmp	.-14     	; 0x192 <digitalWrite+0x78>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     1a0:	84 b5       	in	r24, 0x24	; 36
     1a2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     1a4:	84 bd       	out	0x24, r24	; 36
     1a6:	d1 cf       	rjmp	.-94     	; 0x14a <digitalWrite+0x30>
     1a8:	84 b5       	in	r24, 0x24	; 36
     1aa:	8f 7d       	andi	r24, 0xDF	; 223
     1ac:	fb cf       	rjmp	.-10     	; 0x1a4 <digitalWrite+0x8a>
digitalWrite():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     1ae:	3e 2b       	or	r19, r30
     1b0:	da cf       	rjmp	.-76     	; 0x166 <digitalWrite+0x4c>

000001b2 <pinMode>:
pinMode():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	fc 01       	movw	r30, r24
     1ba:	ed 56       	subi	r30, 0x6D	; 109
     1bc:	ff 4f       	sbci	r31, 0xFF	; 255
     1be:	24 91       	lpm	r18, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     1c0:	84 58       	subi	r24, 0x84	; 132
     1c2:	9f 4f       	sbci	r25, 0xFF	; 255
     1c4:	fc 01       	movw	r30, r24
     1c6:	84 91       	lpm	r24, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     1c8:	88 23       	and	r24, r24
     1ca:	d1 f0       	breq	.+52     	; 0x200 <pinMode+0x4e>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	fc 01       	movw	r30, r24
     1d4:	e8 59       	subi	r30, 0x98	; 152
     1d6:	ff 4f       	sbci	r31, 0xFF	; 255
     1d8:	a5 91       	lpm	r26, Z+
     1da:	b4 91       	lpm	r27, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     1dc:	fc 01       	movw	r30, r24
     1de:	ee 58       	subi	r30, 0x8E	; 142
     1e0:	ff 4f       	sbci	r31, 0xFF	; 255
     1e2:	c5 91       	lpm	r28, Z+
     1e4:	d4 91       	lpm	r29, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     1e6:	61 11       	cpse	r22, r1
     1e8:	0e c0       	rjmp	.+28     	; 0x206 <pinMode+0x54>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     1ea:	9f b7       	in	r25, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     1ec:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     1ee:	8c 91       	ld	r24, X
     1f0:	e2 2f       	mov	r30, r18
     1f2:	e0 95       	com	r30
     1f4:	8e 23       	and	r24, r30
     1f6:	8c 93       	st	X, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     1f8:	28 81       	ld	r18, Y
     1fa:	e2 23       	and	r30, r18
     1fc:	e8 83       	st	Y, r30
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     1fe:	9f bf       	out	0x3f, r25	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     206:	8f b7       	in	r24, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     208:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     20a:	ec 91       	ld	r30, X
     20c:	e2 2b       	or	r30, r18
     20e:	ec 93       	st	X, r30
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     210:	8f bf       	out	0x3f, r24	; 63
     212:	f6 cf       	rjmp	.-20     	; 0x200 <pinMode+0x4e>

00000214 <analogRead>:
analogRead():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     214:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     216:	80 64       	ori	r24, 0x40	; 64
     218:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     21c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     220:	80 64       	ori	r24, 0x40	; 64
     222:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     226:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     22a:	86 fd       	sbrc	r24, 6
     22c:	fc cf       	rjmp	.-8      	; 0x226 <analogRead+0x12>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     22e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     232:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
     236:	08 95       	ret

00000238 <micros>:
micros():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     238:	3f b7       	in	r19, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     23a:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     23c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <timer0_overflow_count>
     240:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <timer0_overflow_count+0x1>
     244:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <timer0_overflow_count+0x2>
     248:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <timer0_overflow_count+0x3>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     24c:	26 b5       	in	r18, 0x26	; 38
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     24e:	a8 9b       	sbis	0x15, 0	; 21
     250:	05 c0       	rjmp	.+10     	; 0x25c <micros+0x24>
     252:	2f 3f       	cpi	r18, 0xFF	; 255
     254:	19 f0       	breq	.+6      	; 0x25c <micros+0x24>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	a1 1d       	adc	r26, r1
     25a:	b1 1d       	adc	r27, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     25c:	3f bf       	out	0x3f, r19	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     25e:	ba 2f       	mov	r27, r26
     260:	a9 2f       	mov	r26, r25
     262:	98 2f       	mov	r25, r24
     264:	88 27       	eor	r24, r24
     266:	bc 01       	movw	r22, r24
     268:	cd 01       	movw	r24, r26
     26a:	62 0f       	add	r22, r18
     26c:	71 1d       	adc	r23, r1
     26e:	81 1d       	adc	r24, r1
     270:	91 1d       	adc	r25, r1
     272:	42 e0       	ldi	r20, 0x02	; 2
     274:	66 0f       	add	r22, r22
     276:	77 1f       	adc	r23, r23
     278:	88 1f       	adc	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	4a 95       	dec	r20
     27e:	d1 f7       	brne	.-12     	; 0x274 <micros+0x3c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     280:	08 95       	ret

00000282 <String::StringIfHelper() const>:
StringIfHelper():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.h:51
{
  // use a function pointer to allow for "if (s)" without the
  // complications of an operator bool(). for more information, see:
  // http://www.artima.com/cppsource/safebool.html
  typedef void (String::*StringIfHelperType)() const;
  void StringIfHelper() const {}
     282:	08 95       	ret

00000284 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     284:	af 92       	push	r10
     286:	bf 92       	push	r11
     288:	cf 92       	push	r12
     28a:	df 92       	push	r13
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	6c 01       	movw	r12, r24
     29a:	7b 01       	movw	r14, r22
     29c:	8b 01       	movw	r16, r22
     29e:	04 0f       	add	r16, r20
     2a0:	15 1f       	adc	r17, r21
     2a2:	eb 01       	movw	r28, r22
     2a4:	5e 01       	movw	r10, r28
     2a6:	ae 18       	sub	r10, r14
     2a8:	bf 08       	sbc	r11, r15
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     2aa:	c0 17       	cp	r28, r16
     2ac:	d1 07       	cpc	r29, r17
     2ae:	59 f0       	breq	.+22     	; 0x2c6 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     2b0:	69 91       	ld	r22, Y+
     2b2:	d6 01       	movw	r26, r12
     2b4:	ed 91       	ld	r30, X+
     2b6:	fc 91       	ld	r31, X
     2b8:	01 90       	ld	r0, Z+
     2ba:	f0 81       	ld	r31, Z
     2bc:	e0 2d       	mov	r30, r0
     2be:	c6 01       	movw	r24, r12
     2c0:	09 95       	icall
     2c2:	89 2b       	or	r24, r25
     2c4:	79 f7       	brne	.-34     	; 0x2a4 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     2c6:	c5 01       	movw	r24, r10
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	df 90       	pop	r13
     2d6:	cf 90       	pop	r12
     2d8:	bf 90       	pop	r11
     2da:	af 90       	pop	r10
     2dc:	08 95       	ret

000002de <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     2de:	fc 01       	movw	r30, r24
     2e0:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     2e2:	44 8d       	ldd	r20, Z+28	; 0x1c
     2e4:	25 2f       	mov	r18, r21
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	84 2f       	mov	r24, r20
     2ea:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2ec:	82 1b       	sub	r24, r18
     2ee:	93 0b       	sbc	r25, r19
     2f0:	54 17       	cp	r21, r20
     2f2:	10 f0       	brcs	.+4      	; 0x2f8 <HardwareSerial::availableForWrite()+0x1a>
     2f4:	cf 96       	adiw	r24, 0x3f	; 63
     2f6:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     2f8:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     2fa:	08 95       	ret

000002fc <HardwareSerial::read()>:
read():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     2fc:	fc 01       	movw	r30, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2fe:	91 8d       	ldd	r25, Z+25	; 0x19
     300:	82 8d       	ldd	r24, Z+26	; 0x1a
     302:	98 17       	cp	r25, r24
     304:	61 f0       	breq	.+24     	; 0x31e <HardwareSerial::read()+0x22>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     306:	a2 8d       	ldd	r26, Z+26	; 0x1a
     308:	ae 0f       	add	r26, r30
     30a:	bf 2f       	mov	r27, r31
     30c:	b1 1d       	adc	r27, r1
     30e:	5d 96       	adiw	r26, 0x1d	; 29
     310:	8c 91       	ld	r24, X
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     312:	92 8d       	ldd	r25, Z+26	; 0x1a
     314:	9f 5f       	subi	r25, 0xFF	; 255
     316:	9f 73       	andi	r25, 0x3F	; 63
     318:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     322:	08 95       	ret

00000324 <HardwareSerial::peek()>:
peek():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     324:	fc 01       	movw	r30, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     326:	91 8d       	ldd	r25, Z+25	; 0x19
     328:	82 8d       	ldd	r24, Z+26	; 0x1a
     32a:	98 17       	cp	r25, r24
     32c:	31 f0       	breq	.+12     	; 0x33a <HardwareSerial::peek()+0x16>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     32e:	82 8d       	ldd	r24, Z+26	; 0x1a
     330:	e8 0f       	add	r30, r24
     332:	f1 1d       	adc	r31, r1
     334:	85 8d       	ldd	r24, Z+29	; 0x1d
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     33e:	08 95       	ret

00000340 <HardwareSerial::available()>:
available():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     340:	fc 01       	movw	r30, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     342:	91 8d       	ldd	r25, Z+25	; 0x19
     344:	22 8d       	ldd	r18, Z+26	; 0x1a
     346:	89 2f       	mov	r24, r25
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	80 5c       	subi	r24, 0xC0	; 192
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	82 1b       	sub	r24, r18
     350:	91 09       	sbc	r25, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     352:	8f 73       	andi	r24, 0x3F	; 63
     354:	99 27       	eor	r25, r25
     356:	08 95       	ret

00000358 <Serial0_available()>:
Serial0_available():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     358:	8b e6       	ldi	r24, 0x6B	; 107
     35a:	93 e0       	ldi	r25, 0x03	; 3
     35c:	0e 94 a0 01 	call	0x340	; 0x340 <HardwareSerial::available()>
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	89 2b       	or	r24, r25
     364:	09 f4       	brne	.+2      	; 0x368 <Serial0_available()+0x10>
     366:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     368:	82 2f       	mov	r24, r18
     36a:	08 95       	ret

0000036c <serialEventRun()>:
serialEventRun():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	89 2b       	or	r24, r25
     372:	29 f0       	breq	.+10     	; 0x37e <serialEventRun()+0x12>
     374:	0e 94 ac 01 	call	0x358	; 0x358 <Serial0_available()>
     378:	81 11       	cpse	r24, r1
     37a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     37e:	08 95       	ret

00000380 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     380:	fc 01       	movw	r30, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     382:	a4 8d       	ldd	r26, Z+28	; 0x1c
     384:	a8 0f       	add	r26, r24
     386:	b9 2f       	mov	r27, r25
     388:	b1 1d       	adc	r27, r1
     38a:	a3 5a       	subi	r26, 0xA3	; 163
     38c:	bf 4f       	sbci	r27, 0xFF	; 255
     38e:	2c 91       	ld	r18, X
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     390:	84 8d       	ldd	r24, Z+28	; 0x1c
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	8f 73       	andi	r24, 0x3F	; 63
     398:	99 27       	eor	r25, r25
     39a:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     39c:	a6 89       	ldd	r26, Z+22	; 0x16
     39e:	b7 89       	ldd	r27, Z+23	; 0x17
     3a0:	2c 93       	st	X, r18
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3a2:	a0 89       	ldd	r26, Z+16	; 0x10
     3a4:	b1 89       	ldd	r27, Z+17	; 0x11
     3a6:	8c 91       	ld	r24, X
     3a8:	83 70       	andi	r24, 0x03	; 3
     3aa:	80 64       	ori	r24, 0x40	; 64
     3ac:	8c 93       	st	X, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     3ae:	93 8d       	ldd	r25, Z+27	; 0x1b
     3b0:	84 8d       	ldd	r24, Z+28	; 0x1c
     3b2:	98 13       	cpse	r25, r24
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     3b6:	02 88       	ldd	r0, Z+18	; 0x12
     3b8:	f3 89       	ldd	r31, Z+19	; 0x13
     3ba:	e0 2d       	mov	r30, r0
     3bc:	80 81       	ld	r24, Z
     3be:	8f 7d       	andi	r24, 0xDF	; 223
     3c0:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     3c2:	08 95       	ret

000003c4 <HardwareSerial::write(unsigned char)>:
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3da:	98 13       	cpse	r25, r24
     3dc:	1a c0       	rjmp	.+52     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3de:	e8 89       	ldd	r30, Y+16	; 0x10
     3e0:	f9 89       	ldd	r31, Y+17	; 0x11
     3e2:	80 81       	ld	r24, Z
     3e4:	85 ff       	sbrs	r24, 5
     3e6:	15 c0       	rjmp	.+42     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3e8:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\alexsn\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ea:	f8 94       	cli
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     3ec:	ee 89       	ldd	r30, Y+22	; 0x16
     3ee:	ff 89       	ldd	r31, Y+23	; 0x17
     3f0:	60 83       	st	Z, r22
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3f2:	e8 89       	ldd	r30, Y+16	; 0x10
     3f4:	f9 89       	ldd	r31, Y+17	; 0x11
     3f6:	80 81       	ld	r24, Z
     3f8:	83 70       	andi	r24, 0x03	; 3
     3fa:	80 64       	ori	r24, 0x40	; 64
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     3fc:	80 83       	st	Z, r24
__iRestore():
c:\users\alexsn\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3fe:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	08 95       	ret
     412:	f6 2e       	mov	r15, r22
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     414:	0b 8d       	ldd	r16, Y+27	; 0x1b
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	0f 5f       	subi	r16, 0xFF	; 255
     41a:	1f 4f       	sbci	r17, 0xFF	; 255
     41c:	0f 73       	andi	r16, 0x3F	; 63
     41e:	11 27       	eor	r17, r17
     420:	e0 2e       	mov	r14, r16
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     422:	8c 8d       	ldd	r24, Y+28	; 0x1c
     424:	8e 11       	cpse	r24, r14
     426:	0c c0       	rjmp	.+24     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	07 fc       	sbrc	r0, 7
     42c:	fa cf       	rjmp	.-12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     42e:	e8 89       	ldd	r30, Y+16	; 0x10
     430:	f9 89       	ldd	r31, Y+17	; 0x11
     432:	80 81       	ld	r24, Z
     434:	85 ff       	sbrs	r24, 5
     436:	f5 cf       	rjmp	.-22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     438:	ce 01       	movw	r24, r28
     43a:	0e 94 c0 01 	call	0x380	; 0x380 <HardwareSerial::_tx_udr_empty_irq()>
     43e:	f1 cf       	rjmp	.-30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     440:	eb 8d       	ldd	r30, Y+27	; 0x1b
     442:	ec 0f       	add	r30, r28
     444:	fd 2f       	mov	r31, r29
     446:	f1 1d       	adc	r31, r1
     448:	e3 5a       	subi	r30, 0xA3	; 163
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	f0 82       	st	Z, r15
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     44e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\alexsn\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     450:	f8 94       	cli
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     452:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     454:	ea 89       	ldd	r30, Y+18	; 0x12
     456:	fb 89       	ldd	r31, Y+19	; 0x13
     458:	80 81       	ld	r24, Z
     45a:	80 62       	ori	r24, 0x20	; 32
     45c:	cf cf       	rjmp	.-98     	; 0x3fc <HardwareSerial::write(unsigned char)+0x38>

0000045e <HardwareSerial::flush()>:
flush():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     464:	88 8d       	ldd	r24, Y+24	; 0x18
     466:	88 23       	and	r24, r24
     468:	b9 f0       	breq	.+46     	; 0x498 <HardwareSerial::flush()+0x3a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     46a:	aa 89       	ldd	r26, Y+18	; 0x12
     46c:	bb 89       	ldd	r27, Y+19	; 0x13
     46e:	e8 89       	ldd	r30, Y+16	; 0x10
     470:	f9 89       	ldd	r31, Y+17	; 0x11
     472:	8c 91       	ld	r24, X
     474:	85 fd       	sbrc	r24, 5
     476:	03 c0       	rjmp	.+6      	; 0x47e <HardwareSerial::flush()+0x20>
     478:	80 81       	ld	r24, Z
     47a:	86 fd       	sbrc	r24, 6
     47c:	0d c0       	rjmp	.+26     	; 0x498 <HardwareSerial::flush()+0x3a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	07 fc       	sbrc	r0, 7
     482:	f7 cf       	rjmp	.-18     	; 0x472 <HardwareSerial::flush()+0x14>
     484:	8c 91       	ld	r24, X
     486:	85 ff       	sbrs	r24, 5
     488:	f2 cf       	rjmp	.-28     	; 0x46e <HardwareSerial::flush()+0x10>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     48a:	80 81       	ld	r24, Z
     48c:	85 ff       	sbrs	r24, 5
     48e:	ed cf       	rjmp	.-38     	; 0x46a <HardwareSerial::flush()+0xc>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     490:	ce 01       	movw	r24, r28
     492:	0e 94 c0 01 	call	0x380	; 0x380 <HardwareSerial::_tx_udr_empty_irq()>
     496:	e9 cf       	rjmp	.-46     	; 0x46a <HardwareSerial::flush()+0xc>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <long round<int>(int const&) [clone .isra.4]>:
_Z5roundIiElRKT_.isra.4():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Arduino.h:324
	auto max(const T& a, const L& b) -> decltype((b < a) ? b : a) {
		return (a < b) ? b : a;
	}

	template<class T>
	long round(const T& x) {
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	ec 01       	movw	r28, r24
     4a4:	bc 01       	movw	r22, r24
     4a6:	99 0f       	add	r25, r25
     4a8:	88 0b       	sbc	r24, r24
     4aa:	99 0b       	sbc	r25, r25
     4ac:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__floatsisf>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Arduino.h:325
		return (long)(x >= 0 ? (x + 0.5) : (x - 0.5));
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	5f e3       	ldi	r21, 0x3F	; 63
     4b8:	d7 fd       	sbrc	r29, 7
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <long round<int>(int const&) [clone .isra.4]+0x2c>
     4bc:	0e 94 08 0b 	call	0x1610	; 0x1610 <__addsf3>
     4c0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__fixsfsi>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Arduino.h:326
	}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Arduino.h:325
		return (a < b) ? b : a;
	}

	template<class T>
	long round(const T& x) {
		return (long)(x >= 0 ? (x + 0.5) : (x - 0.5));
     4ca:	0e 94 07 0b 	call	0x160e	; 0x160e <__subsf3>
     4ce:	f8 cf       	rjmp	.-16     	; 0x4c0 <long round<int>(int const&) [clone .isra.4]+0x22>

000004d0 <SPIClass::endTransaction()>:
endTransaction():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
     4d0:	08 95       	ret

000004d2 <SPIClass::transfer(unsigned char)>:
transfer():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     4d2:	8e bd       	out	0x2e, r24	; 46
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     4d4:	00 00       	nop
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     4d6:	0d b4       	in	r0, 0x2d	; 45
     4d8:	07 fe       	sbrs	r0, 7
     4da:	fd cf       	rjmp	.-6      	; 0x4d6 <SPIClass::transfer(unsigned char)+0x4>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:221
    return SPDR;
     4dc:	8e b5       	in	r24, 0x2e	; 46
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:222
  }
     4de:	08 95       	ret

000004e0 <SPIClass::beginTransaction(SPISettings)>:
beginTransaction():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     4e0:	8c bd       	out	0x2c, r24	; 44
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:207
    SPSR = settings.spsr;
     4e2:	9d bd       	out	0x2d, r25	; 45
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.h:208
  }
     4e4:	08 95       	ret

000004e6 <subStr(char*, char*, int) [clone .constprop.6]>:
subStr():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:294
    }
  }
}

// Function to return a substring defined by a delimiter at an index
char* subStr (char* str, char *delim, int index) {
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <subStr(char*, char*, int) [clone .constprop.6]+0xe>
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	7b 01       	movw	r14, r22
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:298
  char *act, *sub, *ptr;
  static char copy[MAX_STRING_LEN];
  int i;
  strcpy(copy, str);
     4fa:	bc 01       	movw	r22, r24
     4fc:	85 ed       	ldi	r24, 0xD5	; 213
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <strcpy>
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:299
  for (i = 1, act = copy; i <= index; i++, act = NULL) {
     508:	01 e0       	ldi	r16, 0x01	; 1
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	25 ed       	ldi	r18, 0xD5	; 213
     50e:	31 e0       	ldi	r19, 0x01	; 1
     510:	e0 16       	cp	r14, r16
     512:	f1 06       	cpc	r15, r17
     514:	7c f0       	brlt	.+30     	; 0x534 <subStr(char*, char*, int) [clone .constprop.6]+0x4e>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:300
     sub = strtok_r(act, delim, &ptr);
     516:	ae 01       	movw	r20, r28
     518:	4f 5f       	subi	r20, 0xFF	; 255
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	6a e1       	ldi	r22, 0x1A	; 26
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	c9 01       	movw	r24, r18
     522:	0e 94 80 07 	call	0xf00	; 0xf00 <strtok_r>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:301
     if (sub == NULL) break;
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	29 f0       	breq	.+10     	; 0x534 <subStr(char*, char*, int) [clone .constprop.6]+0x4e>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:299
char* subStr (char* str, char *delim, int index) {
  char *act, *sub, *ptr;
  static char copy[MAX_STRING_LEN];
  int i;
  strcpy(copy, str);
  for (i = 1, act = copy; i <= index; i++, act = NULL) {
     52a:	0f 5f       	subi	r16, 0xFF	; 255
     52c:	1f 4f       	sbci	r17, 0xFF	; 255
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	ee cf       	rjmp	.-36     	; 0x510 <subStr(char*, char*, int) [clone .constprop.6]+0x2a>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:304
     sub = strtok_r(act, delim, &ptr);
     if (sub == NULL) break;
  }
  return sub;
}
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	08 95       	ret

00000546 <Print::print(char const*) [clone .constprop.3]>:
write():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	69 f0       	breq	.+26     	; 0x564 <Print::print(char const*) [clone .constprop.3]+0x1e>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
     54a:	fc 01       	movw	r30, r24
     54c:	01 90       	ld	r0, Z+
     54e:	00 20       	and	r0, r0
     550:	e9 f7       	brne	.-6      	; 0x54c <Print::print(char const*) [clone .constprop.3]+0x6>
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	af 01       	movw	r20, r30
     556:	48 1b       	sub	r20, r24
     558:	59 0b       	sbc	r21, r25
     55a:	bc 01       	movw	r22, r24
     55c:	8b e6       	ldi	r24, 0x6B	; 107
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	0c 94 42 01 	jmp	0x284	; 0x284 <Print::write(unsigned char const*, unsigned int)>
print():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	08 95       	ret

0000056a <String::toInt() const>:
toInt():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	11 f0       	breq	.+4      	; 0x578 <String::toInt() const+0xe>
     574:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <atol>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:740
  return 0;
}
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	cb 01       	movw	r24, r22
     57e:	08 95       	ret

00000580 <String::move(String&)>:
move():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:195
  return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	8c 01       	movw	r16, r24
     58a:	eb 01       	movw	r28, r22
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:196
  if (buffer) {
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	e1 f0       	breq	.+56     	; 0x5ce <String::move(String&)+0x4e>
     596:	68 81       	ld	r22, Y
     598:	79 81       	ldd	r23, Y+1	; 0x01
_ZNK6StringcvMS_KFvvEEv.isra.0():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
     59a:	61 15       	cp	r22, r1
     59c:	71 05       	cpc	r23, r1
     59e:	a9 f0       	breq	.+42     	; 0x5ca <String::move(String&)+0x4a>
move():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
     5a0:	42 81       	ldd	r20, Z+2	; 0x02
     5a2:	53 81       	ldd	r21, Z+3	; 0x03
     5a4:	2c 81       	ldd	r18, Y+4	; 0x04
     5a6:	3d 81       	ldd	r19, Y+5	; 0x05
     5a8:	42 17       	cp	r20, r18
     5aa:	53 07       	cpc	r21, r19
     5ac:	70 f0       	brcs	.+28     	; 0x5ca <String::move(String&)+0x4a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
     5ae:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <strcpy>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
     5b2:	8c 81       	ldd	r24, Y+4	; 0x04
     5b4:	9d 81       	ldd	r25, Y+5	; 0x05
     5b6:	f8 01       	movw	r30, r16
     5b8:	95 83       	std	Z+5, r25	; 0x05
     5ba:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
     5bc:	1d 82       	std	Y+5, r1	; 0x05
     5be:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:212
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	08 95       	ret
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
     5ca:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <free>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
     5ce:	88 81       	ld	r24, Y
     5d0:	99 81       	ldd	r25, Y+1	; 0x01
     5d2:	f8 01       	movw	r30, r16
     5d4:	91 83       	std	Z+1, r25	; 0x01
     5d6:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	9b 81       	ldd	r25, Y+3	; 0x03
     5dc:	93 83       	std	Z+3, r25	; 0x03
     5de:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
     5e0:	8c 81       	ldd	r24, Y+4	; 0x04
     5e2:	9d 81       	ldd	r25, Y+5	; 0x05
     5e4:	95 83       	std	Z+5, r25	; 0x05
     5e6:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
     5e8:	19 82       	std	Y+1, r1	; 0x01
     5ea:	18 82       	st	Y, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
     5ec:	1b 82       	std	Y+3, r1	; 0x03
     5ee:	1a 82       	std	Y+2, r1	; 0x02
     5f0:	e5 cf       	rjmp	.-54     	; 0x5bc <String::move(String&)+0x3c>

000005f2 <String::~String()>:
__base_dtor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	11 f0       	breq	.+4      	; 0x600 <String::~String()+0xe>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:125
    free(buffer);
     5fc:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <free>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:126
}
     600:	08 95       	ret

00000602 <String::String(char const*)>:
__base_ctor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	ec 01       	movw	r28, r24
_ZN6String4initEv():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     610:	19 82       	std	Y+1, r1	; 0x01
     612:	18 82       	st	Y, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     614:	1b 82       	std	Y+3, r1	; 0x03
     616:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
     618:	1d 82       	std	Y+5, r1	; 0x05
     61a:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     61c:	61 15       	cp	r22, r1
     61e:	71 05       	cpc	r23, r1
     620:	a9 f1       	breq	.+106    	; 0x68c <String::String(char const*)+0x8a>
     622:	7b 01       	movw	r14, r22
     624:	fb 01       	movw	r30, r22
     626:	01 90       	ld	r0, Z+
     628:	00 20       	and	r0, r0
     62a:	e9 f7       	brne	.-6      	; 0x626 <String::String(char const*)+0x24>
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	8f 01       	movw	r16, r30
     630:	06 1b       	sub	r16, r22
     632:	17 0b       	sbc	r17, r23
changeBuffer():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:158
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     634:	b8 01       	movw	r22, r16
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <realloc>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
     642:	00 97       	sbiw	r24, 0x00	; 0
     644:	b9 f0       	breq	.+46     	; 0x674 <String::String(char const*)+0x72>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
     646:	99 83       	std	Y+1, r25	; 0x01
     648:	88 83       	st	Y, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
     64a:	1b 83       	std	Y+3, r17	; 0x03
     64c:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     64e:	2c 81       	ldd	r18, Y+4	; 0x04
     650:	3d 81       	ldd	r19, Y+5	; 0x05
     652:	23 2b       	or	r18, r19
     654:	11 f4       	brne	.+4      	; 0x65a <String::String(char const*)+0x58>
     656:	fc 01       	movw	r30, r24
     658:	10 82       	st	Z, r1
copy():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     65a:	1d 83       	std	Y+5, r17	; 0x05
     65c:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     65e:	b7 01       	movw	r22, r14
     660:	88 81       	ld	r24, Y
     662:	99 81       	ldd	r25, Y+1	; 0x01
__base_ctor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
copy():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
     670:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <strcpy>
invalidate():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     674:	88 81       	ld	r24, Y
     676:	99 81       	ldd	r25, Y+1	; 0x01
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	11 f0       	breq	.+4      	; 0x680 <String::String(char const*)+0x7e>
     67c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <free>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     680:	19 82       	std	Y+1, r1	; 0x01
     682:	18 82       	st	Y, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     684:	1d 82       	std	Y+5, r1	; 0x05
     686:	1c 82       	std	Y+4, r1	; 0x04
     688:	1b 82       	std	Y+3, r1	; 0x03
     68a:	1a 82       	std	Y+2, r1	; 0x02
__base_ctor ():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <__vector_16>:
__vector_16():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	2f 93       	push	r18
     6a6:	3f 93       	push	r19
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	af 93       	push	r26
     6ae:	bf 93       	push	r27
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     6b0:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <timer0_millis>
     6b4:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <timer0_millis+0x1>
     6b8:	a0 91 cf 01 	lds	r26, 0x01CF	; 0x8001cf <timer0_millis+0x2>
     6bc:	b0 91 d0 01 	lds	r27, 0x01D0	; 0x8001d0 <timer0_millis+0x3>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     6c0:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <timer0_fract>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     6c4:	23 e0       	ldi	r18, 0x03	; 3
     6c6:	23 0f       	add	r18, r19
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     6c8:	2d 37       	cpi	r18, 0x7D	; 125
     6ca:	68 f1       	brcs	.+90     	; 0x726 <__vector_16+0x8c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     6cc:	26 e8       	ldi	r18, 0x86	; 134
     6ce:	23 0f       	add	r18, r19
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     6d0:	02 96       	adiw	r24, 0x02	; 2
     6d2:	a1 1d       	adc	r26, r1
     6d4:	b1 1d       	adc	r27, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     6d6:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <timer0_fract>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     6da:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <timer0_millis>
     6de:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <timer0_millis+0x1>
     6e2:	a0 93 cf 01 	sts	0x01CF, r26	; 0x8001cf <timer0_millis+0x2>
     6e6:	b0 93 d0 01 	sts	0x01D0, r27	; 0x8001d0 <timer0_millis+0x3>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     6ea:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <timer0_overflow_count>
     6ee:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <timer0_overflow_count+0x1>
     6f2:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <timer0_overflow_count+0x2>
     6f6:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <timer0_overflow_count+0x3>
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	a1 1d       	adc	r26, r1
     6fe:	b1 1d       	adc	r27, r1
     700:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <timer0_overflow_count>
     704:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <timer0_overflow_count+0x1>
     708:	a0 93 d3 01 	sts	0x01D3, r26	; 0x8001d3 <timer0_overflow_count+0x2>
     70c:	b0 93 d4 01 	sts	0x01D4, r27	; 0x8001d4 <timer0_overflow_count+0x3>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     710:	bf 91       	pop	r27
     712:	af 91       	pop	r26
     714:	9f 91       	pop	r25
     716:	8f 91       	pop	r24
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	a1 1d       	adc	r26, r1
     72a:	b1 1d       	adc	r27, r1
     72c:	d4 cf       	rjmp	.-88     	; 0x6d6 <__vector_16+0x3c>

0000072e <__vector_19>:
__vector_19():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     750:	8b e6       	ldi	r24, 0x6B	; 107
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	0e 94 c0 01 	call	0x380	; 0x380 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_18>:
__vector_18():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     78e:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <Serial+0x10>
     792:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <Serial+0x11>
     796:	80 81       	ld	r24, Z
     798:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <Serial+0x16>
     79c:	f0 91 82 03 	lds	r31, 0x0382	; 0x800382 <Serial+0x17>
     7a0:	82 fd       	sbrc	r24, 2
     7a2:	1b c0       	rjmp	.+54     	; 0x7da <__vector_18+0x60>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     7a4:	90 81       	ld	r25, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     7a6:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <Serial+0x19>
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     7ae:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <Serial+0x1a>
     7b2:	82 17       	cp	r24, r18
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <__vector_18+0x4c>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     7b6:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <Serial+0x19>
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	e5 59       	subi	r30, 0x95	; 149
     7be:	fc 4f       	sbci	r31, 0xFC	; 252
     7c0:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     7c2:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <Serial+0x19>
__vector_18():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti
_rx_complete_irq():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     7da:	80 81       	ld	r24, Z
     7dc:	f4 cf       	rjmp	.-24     	; 0x7c6 <__vector_18+0x4c>

000007de <global constructors keyed to 65535_0_NA22_Marx_uC_3cell.ino.cpp.o.2044>:
_GLOBAL__I_65535_0_NA22_Marx_uC_3cell.ino.cpp.o.2044():
     7de:	eb e6       	ldi	r30, 0x6B	; 107
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	13 82       	std	Z+3, r1	; 0x03
     7e4:	12 82       	std	Z+2, r1	; 0x02
     7e6:	88 ee       	ldi	r24, 0xE8	; 232
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	a0 e0       	ldi	r26, 0x00	; 0
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	84 83       	std	Z+4, r24	; 0x04
     7f0:	95 83       	std	Z+5, r25	; 0x05
     7f2:	a6 83       	std	Z+6, r26	; 0x06
     7f4:	b7 83       	std	Z+7, r27	; 0x07
     7f6:	8c e0       	ldi	r24, 0x0C	; 12
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	80 83       	st	Z, r24
     7fe:	85 ec       	ldi	r24, 0xC5	; 197
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	95 87       	std	Z+13, r25	; 0x0d
     804:	84 87       	std	Z+12, r24	; 0x0c
     806:	84 ec       	ldi	r24, 0xC4	; 196
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	97 87       	std	Z+15, r25	; 0x0f
     80c:	86 87       	std	Z+14, r24	; 0x0e
     80e:	80 ec       	ldi	r24, 0xC0	; 192
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	91 8b       	std	Z+17, r25	; 0x11
     814:	80 8b       	std	Z+16, r24	; 0x10
     816:	81 ec       	ldi	r24, 0xC1	; 193
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	93 8b       	std	Z+19, r25	; 0x13
     81c:	82 8b       	std	Z+18, r24	; 0x12
     81e:	82 ec       	ldi	r24, 0xC2	; 194
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	95 8b       	std	Z+21, r25	; 0x15
     824:	84 8b       	std	Z+20, r24	; 0x14
     826:	86 ec       	ldi	r24, 0xC6	; 198
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	97 8b       	std	Z+23, r25	; 0x17
     82c:	86 8b       	std	Z+22, r24	; 0x16
     82e:	11 8e       	std	Z+25, r1	; 0x19
     830:	12 8e       	std	Z+26, r1	; 0x1a
     832:	13 8e       	std	Z+27, r1	; 0x1b
     834:	14 8e       	std	Z+28, r1	; 0x1c
     836:	6b e1       	ldi	r22, 0x1B	; 27
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	8a e0       	ldi	r24, 0x0A	; 10
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
     842:	e8 e0       	ldi	r30, 0x08	; 8
     844:	f4 e0       	ldi	r31, 0x04	; 4
     846:	84 e5       	ldi	r24, 0x54	; 84
     848:	80 83       	st	Z, r24
     84a:	11 82       	std	Z+1, r1	; 0x01
     84c:	08 95       	ret

0000084e <main>:
main():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	2c 97       	sbiw	r28, 0x0c	; 12
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     862:	78 94       	sei
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
     864:	84 b5       	in	r24, 0x24	; 36
     866:	83 60       	ori	r24, 0x03	; 3
     868:	84 bd       	out	0x24, r24	; 36
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
     86a:	85 b5       	in	r24, 0x25	; 37
     86c:	83 60       	ori	r24, 0x03	; 3
     86e:	85 bd       	out	0x25, r24	; 37
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
     870:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     874:	81 60       	ori	r24, 0x01	; 1
     876:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     880:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     884:	81 60       	ori	r24, 0x01	; 1
     886:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     88a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     88e:	81 60       	ori	r24, 0x01	; 1
     890:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
     894:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     898:	84 60       	ori	r24, 0x04	; 4
     89a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
     89e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     8a2:	81 60       	ori	r24, 0x01	; 1
     8a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
     8a8:	87 e8       	ldi	r24, 0x87	; 135
     8aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
     8ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
operator*():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <eeprom_read_byte>
setup():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:44
//Set up the speed, data order and data mode
//SettingsB is AD5270, <50 MHz, MSB first, sample on falling clock
SPISettings settingsB(5000000, MSBFIRST, SPI_MODE1); 

void setup() {
  OSCCAL = EEPROM.read(0); // 8MHz recalibration byte must be stored in address 0 of EEPROM by rc_calib protocol
     8ba:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
begin():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
     8be:	1f b7       	in	r17, 0x3f	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     8c0:	f8 94       	cli
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
     8c2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     8c6:	81 11       	cpse	r24, r1
     8c8:	27 c0       	rjmp	.+78     	; 0x918 <__stack+0x19>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     8ca:	e6 e8       	ldi	r30, 0x86	; 134
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	84 91       	lpm	r24, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
     8d0:	ed e9       	ldi	r30, 0x9D	; 157
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	94 91       	lpm	r25, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
     8d6:	e8 2f       	mov	r30, r24
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	e8 59       	subi	r30, 0x98	; 152
     8e0:	ff 4f       	sbci	r31, 0xFF	; 255
     8e2:	a5 91       	lpm	r26, Z+
     8e4:	b4 91       	lpm	r27, Z
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     8e6:	ec 91       	ld	r30, X
     8e8:	e9 23       	and	r30, r25
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <main+0xa6>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	8a e0       	ldi	r24, 0x0A	; 10
     8f0:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	8a e0       	ldi	r24, 0x0A	; 10
     8f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     8fc:	8c b5       	in	r24, 0x2c	; 44
     8fe:	80 61       	ori	r24, 0x10	; 16
     900:	8c bd       	out	0x2c, r24	; 44
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
     902:	8c b5       	in	r24, 0x2c	; 44
     904:	80 64       	ori	r24, 0x40	; 64
     906:	8c bd       	out	0x2c, r24	; 44
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	8d e0       	ldi	r24, 0x0D	; 13
     90c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	8b e0       	ldi	r24, 0x0B	; 11
     914:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
     918:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
     922:	1f bf       	out	0x3f, r17	; 63
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     924:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <Serial+0x10>
     928:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <Serial+0x11>
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     930:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <Serial+0xc>
     934:	f0 91 78 03 	lds	r31, 0x0378	; 0x800378 <Serial+0xd>
     938:	10 82       	st	Z, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     93a:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <Serial+0xe>
     93e:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <Serial+0xf>
     942:	83 e3       	ldi	r24, 0x33	; 51
     944:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     946:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <Serial+0x18>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     94a:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <Serial+0x14>
     94e:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <Serial+0x15>
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     956:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <Serial+0x12>
     95a:	f0 91 7e 03 	lds	r31, 0x037E	; 0x80037e <Serial+0x13>
     95e:	80 81       	ld	r24, Z
     960:	88 69       	ori	r24, 0x98	; 152
     962:	80 83       	st	Z, r24
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     964:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <Serial+0x12>
     968:	f0 91 7e 03 	lds	r31, 0x037E	; 0x80037e <Serial+0x13>
     96c:	80 81       	ld	r24, Z
     96e:	8f 7d       	andi	r24, 0xDF	; 223
     970:	80 83       	st	Z, r24
setup():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:47
  SPI.begin();                            //Initialize SPI
  Serial.begin(38400);        // Initialize serial communication at 38400 bits per second
  pinMode(0, INPUT); // MAYBE? 23-07-06 r1 fix attempt
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:48
  pinMode(Charge_disable, OUTPUT);
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:49
  pinMode(Trigger_disable, OUTPUT);
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	84 e0       	ldi	r24, 0x04	; 4
     986:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:50
  pinMode(CS_1, OUTPUT);      //CS1 for U2, rheostat for Vout control
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinMode>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:51
  digitalWrite(Charge_disable,HIGH);      //Set to disable
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:52
  digitalWrite(Trigger_disable,HIGH);     //Set to disable
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:61
//  digitalWrite(Coil2_enable,LOW);         //Set to disable
//  pinMode(Battery_uC_enable, OUTPUT);
//  digitalWrite(Battery_uC_enable,LOW);    //Set to disable
//  pinMode(Stat1, INPUT);
//  pinMode(Stat2, INPUT);
  digitalWrite(CS_1,HIGH);                //Set to disable
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:62
  digitalWrite(CS_1,LOW);                //Set to disable
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:63
  digitalWrite(CS_1,HIGH);                //Set to disable
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
delay():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:397
#endif // 0
}

void delay(unsigned long ms)
{
  unsigned long start = micros();
     9ba:	0e 94 1c 01 	call	0x238	; 0x238 <micros>
     9be:	4b 01       	movw	r8, r22
     9c0:	5c 01       	movw	r10, r24
     9c2:	a8 ee       	ldi	r26, 0xE8	; 232
     9c4:	ca 2e       	mov	r12, r26
     9c6:	a3 e0       	ldi	r26, 0x03	; 3
     9c8:	da 2e       	mov	r13, r26
     9ca:	e1 2c       	mov	r14, r1
     9cc:	f1 2c       	mov	r15, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     9ce:	0e 94 1c 01 	call	0x238	; 0x238 <micros>
     9d2:	68 19       	sub	r22, r8
     9d4:	79 09       	sbc	r23, r9
     9d6:	8a 09       	sbc	r24, r10
     9d8:	9b 09       	sbc	r25, r11
     9da:	68 3e       	cpi	r22, 0xE8	; 232
     9dc:	73 40       	sbci	r23, 0x03	; 3
     9de:	81 05       	cpc	r24, r1
     9e0:	91 05       	cpc	r25, r1
     9e2:	a8 f3       	brcs	.-22     	; 0x9ce <__stack+0xcf>
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	c2 1a       	sub	r12, r18
     9e8:	d1 08       	sbc	r13, r1
     9ea:	e1 08       	sbc	r14, r1
     9ec:	f1 08       	sbc	r15, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     9ee:	88 ee       	ldi	r24, 0xE8	; 232
     9f0:	88 0e       	add	r8, r24
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	98 1e       	adc	r9, r24
     9f6:	a1 1c       	adc	r10, r1
     9f8:	b1 1c       	adc	r11, r1
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     9fa:	c1 14       	cp	r12, r1
     9fc:	d1 04       	cpc	r13, r1
     9fe:	e1 04       	cpc	r14, r1
     a00:	f1 04       	cpc	r15, r1
     a02:	29 f7       	brne	.-54     	; 0x9ce <__stack+0xcf>
setup():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:71
  /////////
  //Set output voltage to minimum
  //enable rheostat
  byte high = B00011100;  //command 7 0x1C
  byte lo = B00000010;    // 0x02
  SPI.beginTransaction(settingsB);
     a04:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <settingsB>
     a08:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <settingsB+0x1>
     a0c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <SPIClass::beginTransaction(SPISettings)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:72
  digitalWrite (CS_1, LOW);
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:73
  SPI.transfer(high); 
     a18:	8c e1       	ldi	r24, 0x1C	; 28
     a1a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:74
  SPI.transfer(lo); 
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:75
  digitalWrite (CS_1, HIGH);
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:86
  //control bits: B000001 (6bits)
  //followed by 10 bits
  int new_Vdes = 1023; //10bits
  lo = new_Vdes & B11111111; //low 8 bits
  high = B00000100 | ((new_Vdes>>8)&B11); //control bits plus high 2 bits
  SPI.beginTransaction(settingsB);
     a2c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <settingsB>
     a30:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <settingsB+0x1>
     a34:	0e 94 70 02 	call	0x4e0	; 0x4e0 <SPIClass::beginTransaction(SPISettings)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:87
  digitalWrite (CS_1, LOW);
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:88
  SPI.transfer(high); 
     a40:	87 e0       	ldi	r24, 0x07	; 7
     a42:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:89
  SPI.transfer(lo);         
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:90
  digitalWrite (CS_1, HIGH);
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:106
    //Read analog values
    int    temp = 0;
    for (byte j=0; j<10; j++){
      temp = temp + analogRead(A0);   //This is HV bus
    }
    HV_condition_value = round(temp / 10);
     a54:	7a e0       	ldi	r23, 0x0A	; 10
     a56:	a7 2e       	mov	r10, r23
     a58:	b1 2c       	mov	r11, r1
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:236
      Serial.print(record1);
      Serial.print(","); 
      
    }
    else if (record1[0]=='T'){
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after H is cell num
     a5a:	8e 01       	movw	r16, r28
     a5c:	0f 5f       	subi	r16, 0xFF	; 255
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:241
      cell_num = temp_S.toInt(); //This is the previous cell number
      
      //update read string with the cell_num
      cell_num = cell_num + 1;
      sprintf(cstr, "%03d", cell_num);
     a60:	ec e1       	ldi	r30, 0x1C	; 28
     a62:	ee 2e       	mov	r14, r30
     a64:	e1 e0       	ldi	r30, 0x01	; 1
     a66:	fe 2e       	mov	r15, r30
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:247
      record1[2] = cstr[0];
      record1[3] = cstr[1];
      record1[4] = cstr[2];

      //update control string with the updated control byte
      sprintf(cstr, "%04d", TS3_value);
     a68:	f5 e2       	ldi	r31, 0x25	; 37
     a6a:	cf 2e       	mov	r12, r31
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	df 2e       	mov	r13, r31
recvWithStartEndBytes():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:288
        ndx = 0;
        newData = true;
      }
    }
    else if (rb == startByte) {
        recvInProgress = true;
     a70:	66 24       	eor	r6, r6
     a72:	63 94       	inc	r6
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:248
      record1[3] = cstr[1];
      record1[4] = cstr[2];

      //update control string with the updated control byte
      sprintf(cstr, "%04d", TS3_value);
      record1[(cell_num-1)*5+6] = cstr[0];
     a74:	45 e0       	ldi	r20, 0x05	; 5
     a76:	74 2e       	mov	r7, r20
recvWithStartEndBytes():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:277
   if (recvInProgress == true) {
      if (rb != endByte) {
        receivedBytes[ndx] = rb;
        ndx++;
        if (ndx >= numChars) {
          ndx = numChars - 1;
     a78:	55 e9       	ldi	r21, 0x95	; 149
     a7a:	35 2e       	mov	r3, r21
serialEventRun():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	46 2e       	mov	r4, r22
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	56 2e       	mov	r5, r22
delay():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:397
#endif // 0
}

void delay(unsigned long ms)
{
  unsigned long start = micros();
     a84:	3a e0       	ldi	r19, 0x0A	; 10
     a86:	23 2e       	mov	r2, r19
main():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:102
    //Read stat1 and stat2 and set global values
//    Stat1_value = digitalRead(Stat1);
//    Stat2_value = digitalRead(Stat2);

    //Read analog values
    int    temp = 0;
     a88:	91 2c       	mov	r9, r1
     a8a:	81 2c       	mov	r8, r1
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:104
    for (byte j=0; j<10; j++){
      temp = temp + analogRead(A0);   //This is HV bus
     a8c:	8e e0       	ldi	r24, 0x0E	; 14
     a8e:	0e 94 0a 01 	call	0x214	; 0x214 <analogRead>
     a92:	88 0e       	add	r8, r24
     a94:	99 1e       	adc	r9, r25
     a96:	2a 94       	dec	r2
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:103
//    Stat1_value = digitalRead(Stat1);
//    Stat2_value = digitalRead(Stat2);

    //Read analog values
    int    temp = 0;
    for (byte j=0; j<10; j++){
     a98:	21 10       	cpse	r2, r1
     a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <__stack+0x18d>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:106
      temp = temp + analogRead(A0);   //This is HV bus
    }
    HV_condition_value = round(temp / 10);
     a9c:	c4 01       	movw	r24, r8
     a9e:	b5 01       	movw	r22, r10
     aa0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__divmodhi4>
     aa4:	cb 01       	movw	r24, r22
     aa6:	0e 94 4f 02 	call	0x49e	; 0x49e <long round<int>(int const&) [clone .isra.4]>
     aaa:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <HV_condition_value+0x1>
     aae:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <HV_condition_value>
     ab2:	2a e0       	ldi	r18, 0x0A	; 10
     ab4:	22 2e       	mov	r2, r18
main():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:108

    temp = 0;
     ab6:	91 2c       	mov	r9, r1
     ab8:	81 2c       	mov	r8, r1
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:110
    for (byte j=0; j<10; j++){
      temp = temp + analogRead(A1);   //This is 14V bus
     aba:	8f e0       	ldi	r24, 0x0F	; 15
     abc:	0e 94 0a 01 	call	0x214	; 0x214 <analogRead>
     ac0:	88 0e       	add	r8, r24
     ac2:	99 1e       	adc	r9, r25
     ac4:	2a 94       	dec	r2
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:109
      temp = temp + analogRead(A0);   //This is HV bus
    }
    HV_condition_value = round(temp / 10);

    temp = 0;
    for (byte j=0; j<10; j++){
     ac6:	21 10       	cpse	r2, r1
     ac8:	f8 cf       	rjmp	.-16     	; 0xaba <__stack+0x1bb>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:112
      temp = temp + analogRead(A1);   //This is 14V bus
    }
    Bus_condition_value = round(temp / 10);
     aca:	c4 01       	movw	r24, r8
     acc:	b5 01       	movw	r22, r10
     ace:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__divmodhi4>
     ad2:	cb 01       	movw	r24, r22
     ad4:	0e 94 4f 02 	call	0x49e	; 0x49e <long round<int>(int const&) [clone .isra.4]>
     ad8:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <Bus_condition_value+0x1>
     adc:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <Bus_condition_value>
     ae0:	9a e0       	ldi	r25, 0x0A	; 10
     ae2:	29 2e       	mov	r2, r25
main():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:114

    temp = 0;
     ae4:	91 2c       	mov	r9, r1
     ae6:	81 2c       	mov	r8, r1
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:116
    for (byte j=0; j<10; j++){
      temp = temp + analogRead(A2);   //This is TS3 value
     ae8:	80 e1       	ldi	r24, 0x10	; 16
     aea:	0e 94 0a 01 	call	0x214	; 0x214 <analogRead>
     aee:	88 0e       	add	r8, r24
     af0:	99 1e       	adc	r9, r25
     af2:	2a 94       	dec	r2
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:115
      temp = temp + analogRead(A1);   //This is 14V bus
    }
    Bus_condition_value = round(temp / 10);

    temp = 0;
    for (byte j=0; j<10; j++){
     af4:	21 10       	cpse	r2, r1
     af6:	f8 cf       	rjmp	.-16     	; 0xae8 <__stack+0x1e9>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:118
      temp = temp + analogRead(A2);   //This is TS3 value
    }
    TS3_value = round(temp / 10);
     af8:	c4 01       	movw	r24, r8
     afa:	b5 01       	movw	r22, r10
     afc:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__divmodhi4>
     b00:	cb 01       	movw	r24, r22
     b02:	0e 94 4f 02 	call	0x49e	; 0x49e <long round<int>(int const&) [clone .isra.4]>
     b06:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <TS3_value+0x1>
     b0a:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <TS3_value>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:123

    //update rheostat
    //control bits: B000001 (6bits)
    //followed by 10 bits
    int new_Vdes = HV_desired; //10bits
     b0e:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     b12:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:126
    byte lo = new_Vdes & B11111111; //low 8 bits
    byte high = B00000100 | ((new_Vdes>>8)&B11); //control bits plus high 2 bits
    SPI.beginTransaction(settingsB);
     b16:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <settingsB>
     b1a:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <settingsB+0x1>
     b1e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <SPIClass::beginTransaction(SPISettings)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:127
    digitalWrite (CS_1, LOW);
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:125
    //update rheostat
    //control bits: B000001 (6bits)
    //followed by 10 bits
    int new_Vdes = HV_desired; //10bits
    byte lo = new_Vdes & B11111111; //low 8 bits
    byte high = B00000100 | ((new_Vdes>>8)&B11); //control bits plus high 2 bits
     b2a:	89 2d       	mov	r24, r9
     b2c:	83 70       	andi	r24, 0x03	; 3
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:128
    SPI.beginTransaction(settingsB);
    digitalWrite (CS_1, LOW);
    SPI.transfer(high); 
     b2e:	84 60       	ori	r24, 0x04	; 4
     b30:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:129
    SPI.transfer(lo);         
     b34:	88 2d       	mov	r24, r8
     b36:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPIClass::transfer(unsigned char)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:130
    digitalWrite (CS_1, HIGH);
     b3a:	61 e0       	ldi	r22, 0x01	; 1
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
recvWithStartEndBytes():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:270
  static boolean recvInProgress = false;
  static byte ndx = 0;                      
  char startByte = '!';                // <- start byte  is a '!'
  char endByte = ',';                  // <- stop byte   is a ','
  char rb;                            
  while (Serial.available() > 0 && newData == false) {
     b42:	8b e6       	ldi	r24, 0x6B	; 107
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	0e 94 a0 01 	call	0x340	; 0x340 <HardwareSerial::available()>
     b4a:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <newData>
     b4e:	18 16       	cp	r1, r24
     b50:	19 06       	cpc	r1, r25
     b52:	0c f0       	brlt	.+2      	; 0xb56 <__stack+0x257>
     b54:	bf c0       	rjmp	.+382    	; 0xcd4 <__stack+0x3d5>
     b56:	22 23       	and	r18, r18
     b58:	09 f4       	brne	.+2      	; 0xb5c <__stack+0x25d>
     b5a:	97 c0       	rjmp	.+302    	; 0xc8a <__stack+0x38b>
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:136
    SPI.endTransaction();
    /////////////////

    //Recieve and handle serial inputs
    recvWithStartEndBytes(); //handles serial
    record1 = receivedBytes; //bitches about this. char to *char    
     b5c:	8e e2       	ldi	r24, 0x2E	; 46
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <record1+0x1>
     b64:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <record1>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:143
}

void processNewData() {
  if (newData == true) {
    //store parced data in variables
    String temp_S;
     b68:	6b e1       	ldi	r22, 0x1B	; 27
     b6a:	71 e0       	ldi	r23, 0x01	; 1
     b6c:	ce 01       	movw	r24, r28
     b6e:	07 96       	adiw	r24, 0x07	; 7
     b70:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:148
    byte control;
    byte cell_num;
    char cstr[5];
    
    if(record1[0]=='C'){//if this a control byte
     b74:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <receivedBytes>
     b78:	83 34       	cpi	r24, 0x43	; 67
     b7a:	09 f0       	breq	.+2      	; 0xb7e <__stack+0x27f>
     b7c:	bf c0       	rjmp	.+382    	; 0xcfc <__stack+0x3fd>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:149
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after C is cell num
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	8e e2       	ldi	r24, 0x2E	; 46
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     b8a:	bc 01       	movw	r22, r24
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
  if (this != &rval) move(rval);
     b92:	b8 01       	movw	r22, r16
     b94:	ce 01       	movw	r24, r28
     b96:	07 96       	adiw	r24, 0x07	; 7
     b98:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:149
     b9c:	c8 01       	movw	r24, r16
     b9e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:150
      cell_num = temp_S.toInt(); //This is the previous cell number
     ba2:	ce 01       	movw	r24, r28
     ba4:	07 96       	adiw	r24, 0x07	; 7
     ba6:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
     baa:	96 2e       	mov	r9, r22
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:151
      temp_S = String(subStr(record1, " ", cell_num+3));
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	6d 5f       	subi	r22, 0xFD	; 253
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <record1>
     bb6:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <record1+0x1>
     bba:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     bbe:	bc 01       	movw	r22, r24
     bc0:	c8 01       	movw	r24, r16
     bc2:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     bc6:	b8 01       	movw	r22, r16
     bc8:	ce 01       	movw	r24, r28
     bca:	07 96       	adiw	r24, 0x07	; 7
     bcc:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:151
     bd0:	c8 01       	movw	r24, r16
     bd2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:152
      control = temp_S.toInt(); //loaded the corresponding control byte
     bd6:	ce 01       	movw	r24, r28
     bd8:	07 96       	adiw	r24, 0x07	; 7
     bda:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
     bde:	26 2e       	mov	r2, r22
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:153
      Trigger_disable_value = control & B1;                   //bit 0
     be0:	61 70       	andi	r22, 0x01	; 1
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:154
      digitalWrite(Trigger_disable,Trigger_disable_value);
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:155
      Charge_disable_value = (control>>1) & B1;               //bit 1
     be8:	21 fa       	bst	r2, 1
     bea:	66 27       	eor	r22, r22
     bec:	60 f9       	bld	r22, 0
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:156
      digitalWrite(Charge_disable,Charge_disable_value);
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	0e 94 8d 00 	call	0x11a	; 0x11a <digitalWrite>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:169
//      control = (control|B01000000) & (B10111111 | ((B00000000 | (Stat2_value&B1))<<6));//bit 6
      //Bit 7 unused for now

      //update control string with the cell_num
      
      cell_num = cell_num + 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	89 0d       	add	r24, r9
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:170
      sprintf(cstr, "%03d", cell_num);
     bf8:	88 2e       	mov	r8, r24
     bfa:	91 2c       	mov	r9, r1
     bfc:	1f 92       	push	r1
     bfe:	8f 93       	push	r24
     c00:	ff 92       	push	r15
     c02:	ef 92       	push	r14
     c04:	1f 93       	push	r17
     c06:	0f 93       	push	r16
     c08:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:171
      record1[2] = cstr[0];
     c0c:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     c10:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:172
      record1[3] = cstr[1];
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:173
      record1[4] = cstr[2];
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:176

      //update control string with the updated control byte
      sprintf(cstr, "%03d", control);
     c20:	1f 92       	push	r1
     c22:	2f 92       	push	r2
     c24:	ff 92       	push	r15
     c26:	ef 92       	push	r14
     c28:	1f 93       	push	r17
     c2a:	0f 93       	push	r16
     c2c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:177
      record1[(cell_num)*4+2] = cstr[0];
     c30:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     c34:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     c38:	88 0c       	add	r8, r8
     c3a:	99 1c       	adc	r9, r9
     c3c:	88 0c       	add	r8, r8
     c3e:	99 1c       	adc	r9, r9
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	e8 0d       	add	r30, r8
     c44:	f9 1d       	adc	r31, r9
     c46:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:178
      record1[(cell_num)*4+2+1] = cstr[1];
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:179
      record1[(cell_num)*4+2+2] = cstr[2];
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:254
      record1[(cell_num-1)*5+7] = cstr[1];
      record1[(cell_num-1)*5+8] = cstr[2];
      record1[(cell_num-1)*5+9] = cstr[3];

      //send to next cell
      Serial.print("!");
     c50:	81 e2       	ldi	r24, 0x21	; 33
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 a3 02 	call	0x546	; 0x546 <Print::print(char const*) [clone .constprop.3]>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:255
      Serial.print(record1);
     c58:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <record1>
     c5c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <record1+0x1>
     c60:	0e 94 a3 02 	call	0x546	; 0x546 <Print::print(char const*) [clone .constprop.3]>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:256
      Serial.print(","); 
     c64:	83 e2       	ldi	r24, 0x23	; 35
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	0e 94 a3 02 	call	0x546	; 0x546 <Print::print(char const*) [clone .constprop.3]>
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:259
    }

    newData = false;
     c76:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <newData>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:143
}

void processNewData() {
  if (newData == true) {
    //store parced data in variables
    String temp_S;
     c7a:	ce 01       	movw	r24, r28
     c7c:	07 96       	adiw	r24, 0x07	; 7
     c7e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
     c82:	30 c0       	rjmp	.+96     	; 0xce4 <__stack+0x3e5>
recvWithStartEndBytes():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:275
  while (Serial.available() > 0 && newData == false) {
   rb = Serial.read();
   if (recvInProgress == true) {
      if (rb != endByte) {
        receivedBytes[ndx] = rb;
        ndx++;
     c84:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <recvWithStartEndBytes()::ndx>
     c88:	5c cf       	rjmp	.-328    	; 0xb42 <__stack+0x243>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:271
  static byte ndx = 0;                      
  char startByte = '!';                // <- start byte  is a '!'
  char endByte = ',';                  // <- stop byte   is a ','
  char rb;                            
  while (Serial.available() > 0 && newData == false) {
   rb = Serial.read();
     c8a:	8b e6       	ldi	r24, 0x6B	; 107
     c8c:	93 e0       	ldi	r25, 0x03	; 3
     c8e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <HardwareSerial::read()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:272
   if (recvInProgress == true) {
     c92:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <recvWithStartEndBytes()::recvInProgress>
     c96:	99 23       	and	r25, r25
     c98:	b9 f0       	breq	.+46     	; 0xcc8 <__stack+0x3c9>
     c9a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <recvWithStartEndBytes()::ndx>
     c9e:	e9 2f       	mov	r30, r25
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	e2 5d       	subi	r30, 0xD2	; 210
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:273
      if (rb != endByte) {
     ca6:	8c 32       	cpi	r24, 0x2C	; 44
     ca8:	39 f0       	breq	.+14     	; 0xcb8 <__stack+0x3b9>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:274
        receivedBytes[ndx] = rb;
     caa:	80 83       	st	Z, r24
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:275
        ndx++;
     cac:	9f 5f       	subi	r25, 0xFF	; 255
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:276
        if (ndx >= numChars) {
     cae:	96 39       	cpi	r25, 0x96	; 150
     cb0:	48 f3       	brcs	.-46     	; 0xc84 <__stack+0x385>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:277
          ndx = numChars - 1;
     cb2:	30 92 2b 01 	sts	0x012B, r3	; 0x80012b <recvWithStartEndBytes()::ndx>
     cb6:	45 cf       	rjmp	.-374    	; 0xb42 <__stack+0x243>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:281
        }
      }
      else {
        receivedBytes[ndx] = '\0';            // terminate the string
     cb8:	10 82       	st	Z, r1
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:282
        recvInProgress = false;
     cba:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <recvWithStartEndBytes()::recvInProgress>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:283
        ndx = 0;
     cbe:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <recvWithStartEndBytes()::ndx>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:284
        newData = true;
     cc2:	60 92 2d 01 	sts	0x012D, r6	; 0x80012d <newData>
     cc6:	3d cf       	rjmp	.-390    	; 0xb42 <__stack+0x243>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:287
      }
    }
    else if (rb == startByte) {
     cc8:	81 32       	cpi	r24, 0x21	; 33
     cca:	09 f0       	breq	.+2      	; 0xcce <__stack+0x3cf>
     ccc:	3a cf       	rjmp	.-396    	; 0xb42 <__stack+0x243>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:288
        recvInProgress = true;
     cce:	60 92 2c 01 	sts	0x012C, r6	; 0x80012c <recvWithStartEndBytes()::recvInProgress>
     cd2:	37 cf       	rjmp	.-402    	; 0xb42 <__stack+0x243>
loop():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:136
    SPI.endTransaction();
    /////////////////

    //Recieve and handle serial inputs
    recvWithStartEndBytes(); //handles serial
    record1 = receivedBytes; //bitches about this. char to *char    
     cd4:	8e e2       	ldi	r24, 0x2E	; 46
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <record1+0x1>
     cdc:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <record1>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:141
    processNewData();        //parse into variables, check fault, update DACs
}

void processNewData() {
  if (newData == true) {
     ce0:	21 11       	cpse	r18, r1
     ce2:	42 cf       	rjmp	.-380    	; 0xb68 <__stack+0x269>
serialEventRun():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
     ce4:	41 14       	cp	r4, r1
     ce6:	51 04       	cpc	r5, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <__stack+0x3ed>
     cea:	cc ce       	rjmp	.-616    	; 0xa84 <__stack+0x185>
     cec:	0e 94 ac 01 	call	0x358	; 0x358 <Serial0_available()>
     cf0:	88 23       	and	r24, r24
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <__stack+0x3f7>
     cf4:	bf ce       	rjmp	.-642    	; 0xa74 <__stack+0x175>
     cf6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     cfa:	ba ce       	rjmp	.-652    	; 0xa70 <__stack+0x171>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:186
      //send to next cell
      Serial.print("!");
      Serial.print(record1);
      Serial.print(",");     
    }
    else if (record1[0]=='H'){ //HV des and act
     cfc:	88 34       	cpi	r24, 0x48	; 72
     cfe:	09 f0       	breq	.+2      	; 0xd02 <__stack+0x403>
     d00:	6d c0       	rjmp	.+218    	; 0xddc <__stack+0x4dd>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:187
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after H is cell num
     d02:	62 e0       	ldi	r22, 0x02	; 2
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	8e e2       	ldi	r24, 0x2E	; 46
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     d0e:	bc 01       	movw	r22, r24
     d10:	c8 01       	movw	r24, r16
     d12:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     d16:	b8 01       	movw	r22, r16
     d18:	ce 01       	movw	r24, r28
     d1a:	07 96       	adiw	r24, 0x07	; 7
     d1c:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:187
     d20:	c8 01       	movw	r24, r16
     d22:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:188
      cell_num = temp_S.toInt(); //This is the previous cell number
     d26:	ce 01       	movw	r24, r28
     d28:	07 96       	adiw	r24, 0x07	; 7
     d2a:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
     d2e:	96 2e       	mov	r9, r22
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:189
      temp_S = String(subStr(record1, " ", cell_num*1+3)); //One int per cell
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	6d 5f       	subi	r22, 0xFD	; 253
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <record1>
     d3a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <record1+0x1>
     d3e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     d42:	bc 01       	movw	r22, r24
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     d4a:	b8 01       	movw	r22, r16
     d4c:	ce 01       	movw	r24, r28
     d4e:	07 96       	adiw	r24, 0x07	; 7
     d50:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:189
     d54:	c8 01       	movw	r24, r16
     d56:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:190
      HV_desired = temp_S.toInt(); //loaded the desired HV voltage
     d5a:	ce 01       	movw	r24, r28
     d5c:	07 96       	adiw	r24, 0x07	; 7
     d5e:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
     d62:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     d66:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:193

      //update read string with the cell_num
      cell_num = cell_num + 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 0d       	add	r24, r9
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:194
      sprintf(cstr, "%03d", cell_num);
     d6e:	88 2e       	mov	r8, r24
     d70:	91 2c       	mov	r9, r1
     d72:	1f 92       	push	r1
     d74:	8f 93       	push	r24
     d76:	ff 92       	push	r15
     d78:	ef 92       	push	r14
     d7a:	1f 93       	push	r17
     d7c:	0f 93       	push	r16
     d7e:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:195
      record1[2] = cstr[0];
     d82:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     d86:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:196
      record1[3] = cstr[1];
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:197
      record1[4] = cstr[2];
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:200

      //update control string with the updated control byte
      sprintf(cstr, "%04d", HV_condition_value);
     d96:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <HV_condition_value+0x1>
     d9a:	8f 93       	push	r24
     d9c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <HV_condition_value>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:247
      record1[2] = cstr[0];
      record1[3] = cstr[1];
      record1[4] = cstr[2];

      //update control string with the updated control byte
      sprintf(cstr, "%04d", TS3_value);
     da0:	8f 93       	push	r24
     da2:	df 92       	push	r13
     da4:	cf 92       	push	r12
     da6:	1f 93       	push	r17
     da8:	0f 93       	push	r16
     daa:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:248
      record1[(cell_num-1)*5+6] = cstr[0];
     dae:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     db2:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	89 1a       	sub	r8, r25
     dba:	91 08       	sbc	r9, r1
     dbc:	78 9c       	mul	r7, r8
     dbe:	90 01       	movw	r18, r0
     dc0:	79 9c       	mul	r7, r9
     dc2:	30 0d       	add	r19, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	e2 0f       	add	r30, r18
     dca:	f3 1f       	adc	r31, r19
     dcc:	86 83       	std	Z+6, r24	; 0x06
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:249
      record1[(cell_num-1)*5+7] = cstr[1];
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	87 83       	std	Z+7, r24	; 0x07
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:250
      record1[(cell_num-1)*5+8] = cstr[2];
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	80 87       	std	Z+8, r24	; 0x08
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:251
      record1[(cell_num-1)*5+9] = cstr[3];
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	81 87       	std	Z+9, r24	; 0x09
     dda:	3a cf       	rjmp	.-396    	; 0xc50 <__stack+0x351>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:211
      //send to next cell
      Serial.print("!");
      Serial.print(record1);
      Serial.print(",");  
    }
    else if (record1[0]=='B'){
     ddc:	82 34       	cpi	r24, 0x42	; 66
     dde:	89 f5       	brne	.+98     	; 0xe42 <__stack+0x543>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:212
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after H is cell num
     de0:	62 e0       	ldi	r22, 0x02	; 2
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	8e e2       	ldi	r24, 0x2E	; 46
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     dec:	bc 01       	movw	r22, r24
     dee:	c8 01       	movw	r24, r16
     df0:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     df4:	b8 01       	movw	r22, r16
     df6:	ce 01       	movw	r24, r28
     df8:	07 96       	adiw	r24, 0x07	; 7
     dfa:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:212
     dfe:	c8 01       	movw	r24, r16
     e00:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:213
      cell_num = temp_S.toInt(); //This is the previous cell number
     e04:	ce 01       	movw	r24, r28
     e06:	07 96       	adiw	r24, 0x07	; 7
     e08:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:216
      
      //update read string with the cell_num
      cell_num = cell_num + 1;
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:217
      sprintf(cstr, "%03d", cell_num);
     e0e:	86 2e       	mov	r8, r22
     e10:	91 2c       	mov	r9, r1
     e12:	1f 92       	push	r1
     e14:	6f 93       	push	r22
     e16:	ff 92       	push	r15
     e18:	ef 92       	push	r14
     e1a:	1f 93       	push	r17
     e1c:	0f 93       	push	r16
     e1e:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:218
      record1[2] = cstr[0];
     e22:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     e26:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:219
      record1[3] = cstr[1];
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:220
      record1[4] = cstr[2];
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:223

      //update control string with the updated control byte
      sprintf(cstr, "%04d", Bus_condition_value);
     e36:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Bus_condition_value+0x1>
     e3a:	8f 93       	push	r24
     e3c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <Bus_condition_value>
     e40:	af cf       	rjmp	.-162    	; 0xda0 <__stack+0x4a1>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:235
      Serial.print("!");
      Serial.print(record1);
      Serial.print(","); 
      
    }
    else if (record1[0]=='T'){
     e42:	84 35       	cpi	r24, 0x54	; 84
     e44:	09 f0       	breq	.+2      	; 0xe48 <__stack+0x549>
     e46:	17 cf       	rjmp	.-466    	; 0xc76 <__stack+0x377>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:236
      temp_S = String(subStr(record1, " ", 1+1)); //first byte after H is cell num
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	8e e2       	ldi	r24, 0x2E	; 46
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	0e 94 73 02 	call	0x4e6	; 0x4e6 <subStr(char*, char*, int) [clone .constprop.6]>
     e54:	bc 01       	movw	r22, r24
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 01 03 	call	0x602	; 0x602 <String::String(char const*)>
operator=():
C:\Users\alexsn\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WString.cpp:228
     e5c:	b8 01       	movw	r22, r16
     e5e:	ce 01       	movw	r24, r28
     e60:	07 96       	adiw	r24, 0x07	; 7
     e62:	0e 94 c0 02 	call	0x580	; 0x580 <String::move(String&)>
processNewData():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:236
     e66:	c8 01       	movw	r24, r16
     e68:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <String::~String()>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:237
      cell_num = temp_S.toInt(); //This is the previous cell number
     e6c:	ce 01       	movw	r24, r28
     e6e:	07 96       	adiw	r24, 0x07	; 7
     e70:	0e 94 b5 02 	call	0x56a	; 0x56a <String::toInt() const>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:240
      
      //update read string with the cell_num
      cell_num = cell_num + 1;
     e74:	6f 5f       	subi	r22, 0xFF	; 255
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:241
      sprintf(cstr, "%03d", cell_num);
     e76:	86 2e       	mov	r8, r22
     e78:	91 2c       	mov	r9, r1
     e7a:	1f 92       	push	r1
     e7c:	6f 93       	push	r22
     e7e:	ff 92       	push	r15
     e80:	ef 92       	push	r14
     e82:	1f 93       	push	r17
     e84:	0f 93       	push	r16
     e86:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <sprintf>
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:242
      record1[2] = cstr[0];
     e8a:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <record1>
     e8e:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <record1+0x1>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	82 83       	std	Z+2, r24	; 0x02
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:243
      record1[3] = cstr[1];
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	83 83       	std	Z+3, r24	; 0x03
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:244
      record1[4] = cstr[2];
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	84 83       	std	Z+4, r24	; 0x04
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:247

      //update control string with the updated control byte
      sprintf(cstr, "%04d", TS3_value);
     e9e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <TS3_value+0x1>
     ea2:	8f 93       	push	r24
     ea4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <TS3_value>
     ea8:	7b cf       	rjmp	.-266    	; 0xda0 <__stack+0x4a1>

00000eaa <_GLOBAL__sub_D_HV_condition_value>:
__static_initialization_and_destruction_0():
C:\Users\alexsn\Documents\GitHub\na22Marx\NA22_Marx_uC_3cell/NA22_Marx_uC_3cell.ino:32
byte    Trigger_disable_value = 1;
//byte    Coil1_enable_value = 0;
//byte    Coil2_enable_value = 0;
//byte    Battery_uC_enable_value = 0;

String content = "";          //used for serial recieve
     eaa:	8a e0       	ldi	r24, 0x0A	; 10
     eac:	94 e0       	ldi	r25, 0x04	; 4
     eae:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <String::~String()>

00000eb2 <atol>:
atol():
     eb2:	1f 93       	push	r17
     eb4:	fc 01       	movw	r30, r24
     eb6:	99 27       	eor	r25, r25
     eb8:	88 27       	eor	r24, r24
     eba:	bc 01       	movw	r22, r24
     ebc:	e8 94       	clt
     ebe:	11 91       	ld	r17, Z+
     ec0:	10 32       	cpi	r17, 0x20	; 32
     ec2:	e9 f3       	breq	.-6      	; 0xebe <atol+0xc>
     ec4:	19 30       	cpi	r17, 0x09	; 9
     ec6:	10 f0       	brcs	.+4      	; 0xecc <atol+0x1a>
     ec8:	1e 30       	cpi	r17, 0x0E	; 14
     eca:	c8 f3       	brcs	.-14     	; 0xebe <atol+0xc>
     ecc:	1b 32       	cpi	r17, 0x2B	; 43
     ece:	51 f0       	breq	.+20     	; 0xee4 <atol+0x32>
     ed0:	1d 32       	cpi	r17, 0x2D	; 45
     ed2:	49 f4       	brne	.+18     	; 0xee6 <atol+0x34>
     ed4:	68 94       	set
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <atol+0x32>
     ed8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsi_const_10>
     edc:	61 0f       	add	r22, r17
     ede:	71 1d       	adc	r23, r1
     ee0:	81 1d       	adc	r24, r1
     ee2:	91 1d       	adc	r25, r1
     ee4:	11 91       	ld	r17, Z+
     ee6:	10 53       	subi	r17, 0x30	; 48
     ee8:	1a 30       	cpi	r17, 0x0A	; 10
     eea:	b0 f3       	brcs	.-20     	; 0xed8 <atol+0x26>
     eec:	3e f4       	brtc	.+14     	; 0xefc <atol+0x4a>
     eee:	90 95       	com	r25
     ef0:	80 95       	com	r24
     ef2:	70 95       	com	r23
     ef4:	61 95       	neg	r22
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	1f 91       	pop	r17
     efe:	08 95       	ret

00000f00 <strtok_r>:
strtok_r():
     f00:	fa 01       	movw	r30, r20
     f02:	a1 91       	ld	r26, Z+
     f04:	b0 81       	ld	r27, Z
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	19 f4       	brne	.+6      	; 0xf10 <strtok_r+0x10>
     f0a:	10 97       	sbiw	r26, 0x00	; 0
     f0c:	e1 f0       	breq	.+56     	; 0xf46 <strtok_r+0x46>
     f0e:	cd 01       	movw	r24, r26
     f10:	dc 01       	movw	r26, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0d 90       	ld	r0, X+
     f16:	00 20       	and	r0, r0
     f18:	11 f4       	brne	.+4      	; 0xf1e <strtok_r+0x1e>
     f1a:	c0 01       	movw	r24, r0
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <strtok_r+0x44>
     f1e:	fb 01       	movw	r30, r22
     f20:	21 91       	ld	r18, Z+
     f22:	22 23       	and	r18, r18
     f24:	19 f0       	breq	.+6      	; 0xf2c <strtok_r+0x2c>
     f26:	20 15       	cp	r18, r0
     f28:	d9 f7       	brne	.-10     	; 0xf20 <strtok_r+0x20>
     f2a:	f3 cf       	rjmp	.-26     	; 0xf12 <strtok_r+0x12>
     f2c:	fb 01       	movw	r30, r22
     f2e:	21 91       	ld	r18, Z+
     f30:	20 15       	cp	r18, r0
     f32:	19 f4       	brne	.+6      	; 0xf3a <strtok_r+0x3a>
     f34:	1e 92       	st	-X, r1
     f36:	11 96       	adiw	r26, 0x01	; 1
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <strtok_r+0x46>
     f3a:	22 23       	and	r18, r18
     f3c:	c1 f7       	brne	.-16     	; 0xf2e <strtok_r+0x2e>
     f3e:	0d 90       	ld	r0, X+
     f40:	00 20       	and	r0, r0
     f42:	a1 f7       	brne	.-24     	; 0xf2c <strtok_r+0x2c>
     f44:	d0 01       	movw	r26, r0
     f46:	fa 01       	movw	r30, r20
     f48:	a1 93       	st	Z+, r26
     f4a:	b0 83       	st	Z, r27
     f4c:	08 95       	ret

00000f4e <__mulsi_const_10>:
__mulsi_const_10():
     f4e:	59 2f       	mov	r21, r25
     f50:	48 2f       	mov	r20, r24
     f52:	37 2f       	mov	r19, r23
     f54:	26 2f       	mov	r18, r22
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	62 0f       	add	r22, r18
     f68:	73 1f       	adc	r23, r19
     f6a:	84 1f       	adc	r24, r20
     f6c:	95 1f       	adc	r25, r21
     f6e:	66 0f       	add	r22, r22
     f70:	77 1f       	adc	r23, r23
     f72:	88 1f       	adc	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	08 95       	ret

00000f78 <vfprintf>:
vfprintf():
     f78:	ab e0       	ldi	r26, 0x0B	; 11
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e2 ec       	ldi	r30, 0xC2	; 194
     f7e:	f7 e0       	ldi	r31, 0x07	; 7
     f80:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__prologue_saves__>
     f84:	7c 01       	movw	r14, r24
     f86:	3b 01       	movw	r6, r22
     f88:	8a 01       	movw	r16, r20
     f8a:	fc 01       	movw	r30, r24
     f8c:	17 82       	std	Z+7, r1	; 0x07
     f8e:	16 82       	std	Z+6, r1	; 0x06
     f90:	83 81       	ldd	r24, Z+3	; 0x03
     f92:	81 ff       	sbrs	r24, 1
     f94:	c8 c1       	rjmp	.+912    	; 0x1326 <vfprintf+0x3ae>
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	5c 01       	movw	r10, r24
     f9c:	f7 01       	movw	r30, r14
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	f3 01       	movw	r30, r6
     fa2:	93 fd       	sbrc	r25, 3
     fa4:	85 91       	lpm	r24, Z+
     fa6:	93 ff       	sbrs	r25, 3
     fa8:	81 91       	ld	r24, Z+
     faa:	3f 01       	movw	r6, r30
     fac:	88 23       	and	r24, r24
     fae:	09 f4       	brne	.+2      	; 0xfb2 <vfprintf+0x3a>
     fb0:	53 c1       	rjmp	.+678    	; 0x1258 <vfprintf+0x2e0>
     fb2:	85 32       	cpi	r24, 0x25	; 37
     fb4:	39 f4       	brne	.+14     	; 0xfc4 <vfprintf+0x4c>
     fb6:	93 fd       	sbrc	r25, 3
     fb8:	85 91       	lpm	r24, Z+
     fba:	93 ff       	sbrs	r25, 3
     fbc:	81 91       	ld	r24, Z+
     fbe:	3f 01       	movw	r6, r30
     fc0:	85 32       	cpi	r24, 0x25	; 37
     fc2:	29 f4       	brne	.+10     	; 0xfce <vfprintf+0x56>
     fc4:	b7 01       	movw	r22, r14
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
     fcc:	e7 cf       	rjmp	.-50     	; 0xf9c <vfprintf+0x24>
     fce:	91 2c       	mov	r9, r1
     fd0:	21 2c       	mov	r2, r1
     fd2:	31 2c       	mov	r3, r1
     fd4:	ff e1       	ldi	r31, 0x1F	; 31
     fd6:	f3 15       	cp	r31, r3
     fd8:	38 f0       	brcs	.+14     	; 0xfe8 <vfprintf+0x70>
     fda:	8b 32       	cpi	r24, 0x2B	; 43
     fdc:	11 f1       	breq	.+68     	; 0x1022 <vfprintf+0xaa>
     fde:	90 f4       	brcc	.+36     	; 0x1004 <vfprintf+0x8c>
     fe0:	80 32       	cpi	r24, 0x20	; 32
     fe2:	09 f1       	breq	.+66     	; 0x1026 <vfprintf+0xae>
     fe4:	83 32       	cpi	r24, 0x23	; 35
     fe6:	29 f1       	breq	.+74     	; 0x1032 <vfprintf+0xba>
     fe8:	37 fc       	sbrc	r3, 7
     fea:	3c c0       	rjmp	.+120    	; 0x1064 <vfprintf+0xec>
     fec:	20 ed       	ldi	r18, 0xD0	; 208
     fee:	28 0f       	add	r18, r24
     ff0:	2a 30       	cpi	r18, 0x0A	; 10
     ff2:	50 f5       	brcc	.+84     	; 0x1048 <vfprintf+0xd0>
     ff4:	36 fe       	sbrs	r3, 6
     ff6:	20 c0       	rjmp	.+64     	; 0x1038 <vfprintf+0xc0>
     ff8:	8a e0       	ldi	r24, 0x0A	; 10
     ffa:	98 9e       	mul	r9, r24
     ffc:	20 0d       	add	r18, r0
     ffe:	11 24       	eor	r1, r1
    1000:	92 2e       	mov	r9, r18
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <vfprintf+0x98>
    1004:	8d 32       	cpi	r24, 0x2D	; 45
    1006:	91 f0       	breq	.+36     	; 0x102c <vfprintf+0xb4>
    1008:	80 33       	cpi	r24, 0x30	; 48
    100a:	71 f7       	brne	.-36     	; 0xfe8 <vfprintf+0x70>
    100c:	68 94       	set
    100e:	30 f8       	bld	r3, 0
    1010:	f3 01       	movw	r30, r6
    1012:	93 fd       	sbrc	r25, 3
    1014:	85 91       	lpm	r24, Z+
    1016:	93 ff       	sbrs	r25, 3
    1018:	81 91       	ld	r24, Z+
    101a:	3f 01       	movw	r6, r30
    101c:	81 11       	cpse	r24, r1
    101e:	da cf       	rjmp	.-76     	; 0xfd4 <vfprintf+0x5c>
    1020:	21 c0       	rjmp	.+66     	; 0x1064 <vfprintf+0xec>
    1022:	68 94       	set
    1024:	31 f8       	bld	r3, 1
    1026:	68 94       	set
    1028:	32 f8       	bld	r3, 2
    102a:	f2 cf       	rjmp	.-28     	; 0x1010 <vfprintf+0x98>
    102c:	68 94       	set
    102e:	33 f8       	bld	r3, 3
    1030:	ef cf       	rjmp	.-34     	; 0x1010 <vfprintf+0x98>
    1032:	68 94       	set
    1034:	34 f8       	bld	r3, 4
    1036:	ec cf       	rjmp	.-40     	; 0x1010 <vfprintf+0x98>
    1038:	ea e0       	ldi	r30, 0x0A	; 10
    103a:	2e 9e       	mul	r2, r30
    103c:	20 0d       	add	r18, r0
    103e:	11 24       	eor	r1, r1
    1040:	22 2e       	mov	r2, r18
    1042:	68 94       	set
    1044:	35 f8       	bld	r3, 5
    1046:	e4 cf       	rjmp	.-56     	; 0x1010 <vfprintf+0x98>
    1048:	8e 32       	cpi	r24, 0x2E	; 46
    104a:	29 f4       	brne	.+10     	; 0x1056 <vfprintf+0xde>
    104c:	36 fc       	sbrc	r3, 6
    104e:	04 c1       	rjmp	.+520    	; 0x1258 <vfprintf+0x2e0>
    1050:	68 94       	set
    1052:	36 f8       	bld	r3, 6
    1054:	dd cf       	rjmp	.-70     	; 0x1010 <vfprintf+0x98>
    1056:	8c 36       	cpi	r24, 0x6C	; 108
    1058:	19 f4       	brne	.+6      	; 0x1060 <vfprintf+0xe8>
    105a:	68 94       	set
    105c:	37 f8       	bld	r3, 7
    105e:	d8 cf       	rjmp	.-80     	; 0x1010 <vfprintf+0x98>
    1060:	88 36       	cpi	r24, 0x68	; 104
    1062:	b1 f2       	breq	.-84     	; 0x1010 <vfprintf+0x98>
    1064:	98 2f       	mov	r25, r24
    1066:	9f 7d       	andi	r25, 0xDF	; 223
    1068:	95 54       	subi	r25, 0x45	; 69
    106a:	93 30       	cpi	r25, 0x03	; 3
    106c:	e0 f0       	brcs	.+56     	; 0x10a6 <vfprintf+0x12e>
    106e:	83 36       	cpi	r24, 0x63	; 99
    1070:	a1 f1       	breq	.+104    	; 0x10da <vfprintf+0x162>
    1072:	83 37       	cpi	r24, 0x73	; 115
    1074:	c1 f1       	breq	.+112    	; 0x10e6 <vfprintf+0x16e>
    1076:	83 35       	cpi	r24, 0x53	; 83
    1078:	09 f0       	breq	.+2      	; 0x107c <vfprintf+0x104>
    107a:	63 c0       	rjmp	.+198    	; 0x1142 <vfprintf+0x1ca>
    107c:	28 01       	movw	r4, r16
    107e:	f2 e0       	ldi	r31, 0x02	; 2
    1080:	4f 0e       	add	r4, r31
    1082:	51 1c       	adc	r5, r1
    1084:	f8 01       	movw	r30, r16
    1086:	c0 80       	ld	r12, Z
    1088:	d1 80       	ldd	r13, Z+1	; 0x01
    108a:	69 2d       	mov	r22, r9
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	36 fc       	sbrc	r3, 6
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x11e>
    1092:	6f ef       	ldi	r22, 0xFF	; 255
    1094:	7f ef       	ldi	r23, 0xFF	; 255
    1096:	c6 01       	movw	r24, r12
    1098:	0e 94 96 09 	call	0x132c	; 0x132c <strnlen_P>
    109c:	4c 01       	movw	r8, r24
    109e:	68 94       	set
    10a0:	37 f8       	bld	r3, 7
    10a2:	82 01       	movw	r16, r4
    10a4:	0a c0       	rjmp	.+20     	; 0x10ba <vfprintf+0x142>
    10a6:	0c 5f       	subi	r16, 0xFC	; 252
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	ff e3       	ldi	r31, 0x3F	; 63
    10ac:	f9 83       	std	Y+1, r31	; 0x01
    10ae:	88 24       	eor	r8, r8
    10b0:	83 94       	inc	r8
    10b2:	91 2c       	mov	r9, r1
    10b4:	65 01       	movw	r12, r10
    10b6:	e8 94       	clt
    10b8:	37 f8       	bld	r3, 7
    10ba:	33 fe       	sbrs	r3, 3
    10bc:	2d c0       	rjmp	.+90     	; 0x1118 <vfprintf+0x1a0>
    10be:	52 2c       	mov	r5, r2
    10c0:	81 14       	cp	r8, r1
    10c2:	91 04       	cpc	r9, r1
    10c4:	71 f5       	brne	.+92     	; 0x1122 <vfprintf+0x1aa>
    10c6:	55 20       	and	r5, r5
    10c8:	09 f4       	brne	.+2      	; 0x10cc <vfprintf+0x154>
    10ca:	68 cf       	rjmp	.-304    	; 0xf9c <vfprintf+0x24>
    10cc:	b7 01       	movw	r22, r14
    10ce:	80 e2       	ldi	r24, 0x20	; 32
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    10d6:	5a 94       	dec	r5
    10d8:	f6 cf       	rjmp	.-20     	; 0x10c6 <vfprintf+0x14e>
    10da:	f8 01       	movw	r30, r16
    10dc:	80 81       	ld	r24, Z
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	0e 5f       	subi	r16, 0xFE	; 254
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	e4 cf       	rjmp	.-56     	; 0x10ae <vfprintf+0x136>
    10e6:	28 01       	movw	r4, r16
    10e8:	f2 e0       	ldi	r31, 0x02	; 2
    10ea:	4f 0e       	add	r4, r31
    10ec:	51 1c       	adc	r5, r1
    10ee:	f8 01       	movw	r30, r16
    10f0:	c0 80       	ld	r12, Z
    10f2:	d1 80       	ldd	r13, Z+1	; 0x01
    10f4:	69 2d       	mov	r22, r9
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	36 fc       	sbrc	r3, 6
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <vfprintf+0x188>
    10fc:	6f ef       	ldi	r22, 0xFF	; 255
    10fe:	7f ef       	ldi	r23, 0xFF	; 255
    1100:	c6 01       	movw	r24, r12
    1102:	0e 94 a1 09 	call	0x1342	; 0x1342 <strnlen>
    1106:	4c 01       	movw	r8, r24
    1108:	82 01       	movw	r16, r4
    110a:	d5 cf       	rjmp	.-86     	; 0x10b6 <vfprintf+0x13e>
    110c:	b7 01       	movw	r22, r14
    110e:	80 e2       	ldi	r24, 0x20	; 32
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    1116:	2a 94       	dec	r2
    1118:	28 14       	cp	r2, r8
    111a:	19 04       	cpc	r1, r9
    111c:	09 f0       	breq	.+2      	; 0x1120 <vfprintf+0x1a8>
    111e:	b0 f7       	brcc	.-20     	; 0x110c <vfprintf+0x194>
    1120:	ce cf       	rjmp	.-100    	; 0x10be <vfprintf+0x146>
    1122:	f6 01       	movw	r30, r12
    1124:	37 fc       	sbrc	r3, 7
    1126:	85 91       	lpm	r24, Z+
    1128:	37 fe       	sbrs	r3, 7
    112a:	81 91       	ld	r24, Z+
    112c:	6f 01       	movw	r12, r30
    112e:	b7 01       	movw	r22, r14
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    1136:	51 10       	cpse	r5, r1
    1138:	5a 94       	dec	r5
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	8f 1a       	sub	r8, r31
    113e:	91 08       	sbc	r9, r1
    1140:	bf cf       	rjmp	.-130    	; 0x10c0 <vfprintf+0x148>
    1142:	84 36       	cpi	r24, 0x64	; 100
    1144:	19 f0       	breq	.+6      	; 0x114c <vfprintf+0x1d4>
    1146:	89 36       	cpi	r24, 0x69	; 105
    1148:	09 f0       	breq	.+2      	; 0x114c <vfprintf+0x1d4>
    114a:	77 c0       	rjmp	.+238    	; 0x123a <vfprintf+0x2c2>
    114c:	f8 01       	movw	r30, r16
    114e:	37 fe       	sbrs	r3, 7
    1150:	6b c0       	rjmp	.+214    	; 0x1228 <vfprintf+0x2b0>
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	0c 5f       	subi	r16, 0xFC	; 252
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	f3 2d       	mov	r31, r3
    1160:	ff 76       	andi	r31, 0x6F	; 111
    1162:	3f 2e       	mov	r3, r31
    1164:	97 ff       	sbrs	r25, 7
    1166:	09 c0       	rjmp	.+18     	; 0x117a <vfprintf+0x202>
    1168:	90 95       	com	r25
    116a:	80 95       	com	r24
    116c:	70 95       	com	r23
    116e:	61 95       	neg	r22
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	68 94       	set
    1178:	37 f8       	bld	r3, 7
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	a5 01       	movw	r20, r10
    1180:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__ultoa_invert>
    1184:	c8 2e       	mov	r12, r24
    1186:	ca 18       	sub	r12, r10
    1188:	8c 2c       	mov	r8, r12
    118a:	43 2c       	mov	r4, r3
    118c:	36 fe       	sbrs	r3, 6
    118e:	0c c0       	rjmp	.+24     	; 0x11a8 <vfprintf+0x230>
    1190:	e8 94       	clt
    1192:	40 f8       	bld	r4, 0
    1194:	c9 14       	cp	r12, r9
    1196:	40 f4       	brcc	.+16     	; 0x11a8 <vfprintf+0x230>
    1198:	34 fe       	sbrs	r3, 4
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <vfprintf+0x22e>
    119c:	32 fc       	sbrc	r3, 2
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <vfprintf+0x22e>
    11a0:	f3 2d       	mov	r31, r3
    11a2:	fe 7e       	andi	r31, 0xEE	; 238
    11a4:	4f 2e       	mov	r4, r31
    11a6:	89 2c       	mov	r8, r9
    11a8:	44 fe       	sbrs	r4, 4
    11aa:	95 c0       	rjmp	.+298    	; 0x12d6 <vfprintf+0x35e>
    11ac:	fe 01       	movw	r30, r28
    11ae:	ec 0d       	add	r30, r12
    11b0:	f1 1d       	adc	r31, r1
    11b2:	80 81       	ld	r24, Z
    11b4:	80 33       	cpi	r24, 0x30	; 48
    11b6:	09 f0       	breq	.+2      	; 0x11ba <vfprintf+0x242>
    11b8:	87 c0       	rjmp	.+270    	; 0x12c8 <vfprintf+0x350>
    11ba:	24 2d       	mov	r18, r4
    11bc:	29 7e       	andi	r18, 0xE9	; 233
    11be:	42 2e       	mov	r4, r18
    11c0:	84 2d       	mov	r24, r4
    11c2:	88 70       	andi	r24, 0x08	; 8
    11c4:	58 2e       	mov	r5, r24
    11c6:	43 fc       	sbrc	r4, 3
    11c8:	95 c0       	rjmp	.+298    	; 0x12f4 <vfprintf+0x37c>
    11ca:	40 fe       	sbrs	r4, 0
    11cc:	8f c0       	rjmp	.+286    	; 0x12ec <vfprintf+0x374>
    11ce:	9c 2c       	mov	r9, r12
    11d0:	82 14       	cp	r8, r2
    11d2:	18 f4       	brcc	.+6      	; 0x11da <vfprintf+0x262>
    11d4:	2c 0c       	add	r2, r12
    11d6:	92 2c       	mov	r9, r2
    11d8:	98 18       	sub	r9, r8
    11da:	44 fe       	sbrs	r4, 4
    11dc:	91 c0       	rjmp	.+290    	; 0x1300 <vfprintf+0x388>
    11de:	b7 01       	movw	r22, r14
    11e0:	80 e3       	ldi	r24, 0x30	; 48
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    11e8:	42 fe       	sbrs	r4, 2
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <vfprintf+0x286>
    11ec:	88 e7       	ldi	r24, 0x78	; 120
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	41 fe       	sbrs	r4, 1
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vfprintf+0x280>
    11f4:	88 e5       	ldi	r24, 0x58	; 88
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	b7 01       	movw	r22, r14
    11fa:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    11fe:	c9 14       	cp	r12, r9
    1200:	08 f4       	brcc	.+2      	; 0x1204 <vfprintf+0x28c>
    1202:	8a c0       	rjmp	.+276    	; 0x1318 <vfprintf+0x3a0>
    1204:	ca 94       	dec	r12
    1206:	d1 2c       	mov	r13, r1
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    120a:	c9 1a       	sub	r12, r25
    120c:	d9 0a       	sbc	r13, r25
    120e:	ca 0c       	add	r12, r10
    1210:	db 1c       	adc	r13, r11
    1212:	f6 01       	movw	r30, r12
    1214:	82 91       	ld	r24, -Z
    1216:	6f 01       	movw	r12, r30
    1218:	b7 01       	movw	r22, r14
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    1220:	ac 14       	cp	r10, r12
    1222:	bd 04       	cpc	r11, r13
    1224:	b1 f7       	brne	.-20     	; 0x1212 <vfprintf+0x29a>
    1226:	4f cf       	rjmp	.-354    	; 0x10c6 <vfprintf+0x14e>
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	07 2e       	mov	r0, r23
    122e:	00 0c       	add	r0, r0
    1230:	88 0b       	sbc	r24, r24
    1232:	99 0b       	sbc	r25, r25
    1234:	0e 5f       	subi	r16, 0xFE	; 254
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	92 cf       	rjmp	.-220    	; 0x115e <vfprintf+0x1e6>
    123a:	d3 2c       	mov	r13, r3
    123c:	e8 94       	clt
    123e:	d4 f8       	bld	r13, 4
    1240:	2a e0       	ldi	r18, 0x0A	; 10
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	85 37       	cpi	r24, 0x75	; 117
    1246:	39 f1       	breq	.+78     	; 0x1296 <vfprintf+0x31e>
    1248:	23 2d       	mov	r18, r3
    124a:	29 7f       	andi	r18, 0xF9	; 249
    124c:	d2 2e       	mov	r13, r18
    124e:	8f 36       	cpi	r24, 0x6F	; 111
    1250:	01 f1       	breq	.+64     	; 0x1292 <vfprintf+0x31a>
    1252:	48 f4       	brcc	.+18     	; 0x1266 <vfprintf+0x2ee>
    1254:	88 35       	cpi	r24, 0x58	; 88
    1256:	a9 f0       	breq	.+42     	; 0x1282 <vfprintf+0x30a>
    1258:	f7 01       	movw	r30, r14
    125a:	86 81       	ldd	r24, Z+6	; 0x06
    125c:	97 81       	ldd	r25, Z+7	; 0x07
    125e:	2b 96       	adiw	r28, 0x0b	; 11
    1260:	e2 e1       	ldi	r30, 0x12	; 18
    1262:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__epilogue_restores__>
    1266:	80 37       	cpi	r24, 0x70	; 112
    1268:	49 f0       	breq	.+18     	; 0x127c <vfprintf+0x304>
    126a:	88 37       	cpi	r24, 0x78	; 120
    126c:	a9 f7       	brne	.-22     	; 0x1258 <vfprintf+0x2e0>
    126e:	d4 fe       	sbrs	r13, 4
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <vfprintf+0x2fe>
    1272:	68 94       	set
    1274:	d2 f8       	bld	r13, 2
    1276:	20 e1       	ldi	r18, 0x10	; 16
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <vfprintf+0x31e>
    127c:	68 94       	set
    127e:	d4 f8       	bld	r13, 4
    1280:	f6 cf       	rjmp	.-20     	; 0x126e <vfprintf+0x2f6>
    1282:	34 fe       	sbrs	r3, 4
    1284:	03 c0       	rjmp	.+6      	; 0x128c <vfprintf+0x314>
    1286:	82 2f       	mov	r24, r18
    1288:	86 60       	ori	r24, 0x06	; 6
    128a:	d8 2e       	mov	r13, r24
    128c:	20 e1       	ldi	r18, 0x10	; 16
    128e:	32 e0       	ldi	r19, 0x02	; 2
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <vfprintf+0x31e>
    1292:	28 e0       	ldi	r18, 0x08	; 8
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	f8 01       	movw	r30, r16
    1298:	d7 fe       	sbrs	r13, 7
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <vfprintf+0x342>
    129c:	60 81       	ld	r22, Z
    129e:	71 81       	ldd	r23, Z+1	; 0x01
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	93 81       	ldd	r25, Z+3	; 0x03
    12a4:	0c 5f       	subi	r16, 0xFC	; 252
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	a5 01       	movw	r20, r10
    12aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__ultoa_invert>
    12ae:	c8 2e       	mov	r12, r24
    12b0:	ca 18       	sub	r12, r10
    12b2:	3d 2c       	mov	r3, r13
    12b4:	e8 94       	clt
    12b6:	37 f8       	bld	r3, 7
    12b8:	67 cf       	rjmp	.-306    	; 0x1188 <vfprintf+0x210>
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 5f       	subi	r16, 0xFE	; 254
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	f0 cf       	rjmp	.-32     	; 0x12a8 <vfprintf+0x330>
    12c8:	42 fc       	sbrc	r4, 2
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <vfprintf+0x358>
    12cc:	83 94       	inc	r8
    12ce:	78 cf       	rjmp	.-272    	; 0x11c0 <vfprintf+0x248>
    12d0:	83 94       	inc	r8
    12d2:	83 94       	inc	r8
    12d4:	75 cf       	rjmp	.-278    	; 0x11c0 <vfprintf+0x248>
    12d6:	84 2d       	mov	r24, r4
    12d8:	86 78       	andi	r24, 0x86	; 134
    12da:	09 f4       	brne	.+2      	; 0x12de <vfprintf+0x366>
    12dc:	71 cf       	rjmp	.-286    	; 0x11c0 <vfprintf+0x248>
    12de:	f6 cf       	rjmp	.-20     	; 0x12cc <vfprintf+0x354>
    12e0:	b7 01       	movw	r22, r14
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    12ea:	83 94       	inc	r8
    12ec:	82 14       	cp	r8, r2
    12ee:	c0 f3       	brcs	.-16     	; 0x12e0 <vfprintf+0x368>
    12f0:	51 2c       	mov	r5, r1
    12f2:	73 cf       	rjmp	.-282    	; 0x11da <vfprintf+0x262>
    12f4:	52 2c       	mov	r5, r2
    12f6:	58 18       	sub	r5, r8
    12f8:	82 14       	cp	r8, r2
    12fa:	08 f4       	brcc	.+2      	; 0x12fe <vfprintf+0x386>
    12fc:	6e cf       	rjmp	.-292    	; 0x11da <vfprintf+0x262>
    12fe:	f8 cf       	rjmp	.-16     	; 0x12f0 <vfprintf+0x378>
    1300:	84 2d       	mov	r24, r4
    1302:	86 78       	andi	r24, 0x86	; 134
    1304:	09 f4       	brne	.+2      	; 0x1308 <vfprintf+0x390>
    1306:	7b cf       	rjmp	.-266    	; 0x11fe <vfprintf+0x286>
    1308:	8b e2       	ldi	r24, 0x2B	; 43
    130a:	41 fe       	sbrs	r4, 1
    130c:	80 e2       	ldi	r24, 0x20	; 32
    130e:	47 fc       	sbrc	r4, 7
    1310:	8d e2       	ldi	r24, 0x2D	; 45
    1312:	b7 01       	movw	r22, r14
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	71 cf       	rjmp	.-286    	; 0x11fa <vfprintf+0x282>
    1318:	b7 01       	movw	r22, r14
    131a:	80 e3       	ldi	r24, 0x30	; 48
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    1322:	9a 94       	dec	r9
    1324:	6c cf       	rjmp	.-296    	; 0x11fe <vfprintf+0x286>
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	99 cf       	rjmp	.-206    	; 0x125e <vfprintf+0x2e6>

0000132c <strnlen_P>:
strnlen_P():
    132c:	fc 01       	movw	r30, r24
    132e:	05 90       	lpm	r0, Z+
    1330:	61 50       	subi	r22, 0x01	; 1
    1332:	70 40       	sbci	r23, 0x00	; 0
    1334:	01 10       	cpse	r0, r1
    1336:	d8 f7       	brcc	.-10     	; 0x132e <strnlen_P+0x2>
    1338:	80 95       	com	r24
    133a:	90 95       	com	r25
    133c:	8e 0f       	add	r24, r30
    133e:	9f 1f       	adc	r25, r31
    1340:	08 95       	ret

00001342 <strnlen>:
strnlen():
    1342:	fc 01       	movw	r30, r24
    1344:	61 50       	subi	r22, 0x01	; 1
    1346:	70 40       	sbci	r23, 0x00	; 0
    1348:	01 90       	ld	r0, Z+
    134a:	01 10       	cpse	r0, r1
    134c:	d8 f7       	brcc	.-10     	; 0x1344 <strnlen+0x2>
    134e:	80 95       	com	r24
    1350:	90 95       	com	r25
    1352:	8e 0f       	add	r24, r30
    1354:	9f 1f       	adc	r25, r31
    1356:	08 95       	ret

00001358 <fputc>:
fputc():
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	18 2f       	mov	r17, r24
    1362:	09 2f       	mov	r16, r25
    1364:	eb 01       	movw	r28, r22
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	81 fd       	sbrc	r24, 1
    136a:	09 c0       	rjmp	.+18     	; 0x137e <fputc+0x26>
    136c:	1f ef       	ldi	r17, 0xFF	; 255
    136e:	0f ef       	ldi	r16, 0xFF	; 255
    1370:	81 2f       	mov	r24, r17
    1372:	90 2f       	mov	r25, r16
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret
    137e:	82 ff       	sbrs	r24, 2
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <fputc+0x52>
    1382:	2e 81       	ldd	r18, Y+6	; 0x06
    1384:	3f 81       	ldd	r19, Y+7	; 0x07
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	28 17       	cp	r18, r24
    138c:	39 07       	cpc	r19, r25
    138e:	3c f4       	brge	.+14     	; 0x139e <fputc+0x46>
    1390:	e8 81       	ld	r30, Y
    1392:	f9 81       	ldd	r31, Y+1	; 0x01
    1394:	cf 01       	movw	r24, r30
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	99 83       	std	Y+1, r25	; 0x01
    139a:	88 83       	st	Y, r24
    139c:	10 83       	st	Z, r17
    139e:	8e 81       	ldd	r24, Y+6	; 0x06
    13a0:	9f 81       	ldd	r25, Y+7	; 0x07
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	9f 83       	std	Y+7, r25	; 0x07
    13a6:	8e 83       	std	Y+6, r24	; 0x06
    13a8:	e3 cf       	rjmp	.-58     	; 0x1370 <fputc+0x18>
    13aa:	e8 85       	ldd	r30, Y+8	; 0x08
    13ac:	f9 85       	ldd	r31, Y+9	; 0x09
    13ae:	81 2f       	mov	r24, r17
    13b0:	09 95       	icall
    13b2:	89 2b       	or	r24, r25
    13b4:	a1 f3       	breq	.-24     	; 0x139e <fputc+0x46>
    13b6:	da cf       	rjmp	.-76     	; 0x136c <fputc+0x14>

000013b8 <__ultoa_invert>:
__ultoa_invert():
    13b8:	fa 01       	movw	r30, r20
    13ba:	aa 27       	eor	r26, r26
    13bc:	28 30       	cpi	r18, 0x08	; 8
    13be:	51 f1       	breq	.+84     	; 0x1414 <__ultoa_invert+0x5c>
    13c0:	20 31       	cpi	r18, 0x10	; 16
    13c2:	81 f1       	breq	.+96     	; 0x1424 <__ultoa_invert+0x6c>
    13c4:	e8 94       	clt
    13c6:	6f 93       	push	r22
    13c8:	6e 7f       	andi	r22, 0xFE	; 254
    13ca:	6e 5f       	subi	r22, 0xFE	; 254
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	af 4f       	sbci	r26, 0xFF	; 255
    13d4:	b1 e0       	ldi	r27, 0x01	; 1
    13d6:	3e d0       	rcall	.+124    	; 0x1454 <__ultoa_invert+0x9c>
    13d8:	b4 e0       	ldi	r27, 0x04	; 4
    13da:	3c d0       	rcall	.+120    	; 0x1454 <__ultoa_invert+0x9c>
    13dc:	67 0f       	add	r22, r23
    13de:	78 1f       	adc	r23, r24
    13e0:	89 1f       	adc	r24, r25
    13e2:	9a 1f       	adc	r25, r26
    13e4:	a1 1d       	adc	r26, r1
    13e6:	68 0f       	add	r22, r24
    13e8:	79 1f       	adc	r23, r25
    13ea:	8a 1f       	adc	r24, r26
    13ec:	91 1d       	adc	r25, r1
    13ee:	a1 1d       	adc	r26, r1
    13f0:	6a 0f       	add	r22, r26
    13f2:	71 1d       	adc	r23, r1
    13f4:	81 1d       	adc	r24, r1
    13f6:	91 1d       	adc	r25, r1
    13f8:	a1 1d       	adc	r26, r1
    13fa:	20 d0       	rcall	.+64     	; 0x143c <__ultoa_invert+0x84>
    13fc:	09 f4       	brne	.+2      	; 0x1400 <__ultoa_invert+0x48>
    13fe:	68 94       	set
    1400:	3f 91       	pop	r19
    1402:	2a e0       	ldi	r18, 0x0A	; 10
    1404:	26 9f       	mul	r18, r22
    1406:	11 24       	eor	r1, r1
    1408:	30 19       	sub	r19, r0
    140a:	30 5d       	subi	r19, 0xD0	; 208
    140c:	31 93       	st	Z+, r19
    140e:	de f6       	brtc	.-74     	; 0x13c6 <__ultoa_invert+0xe>
    1410:	cf 01       	movw	r24, r30
    1412:	08 95       	ret
    1414:	46 2f       	mov	r20, r22
    1416:	47 70       	andi	r20, 0x07	; 7
    1418:	40 5d       	subi	r20, 0xD0	; 208
    141a:	41 93       	st	Z+, r20
    141c:	b3 e0       	ldi	r27, 0x03	; 3
    141e:	0f d0       	rcall	.+30     	; 0x143e <__ultoa_invert+0x86>
    1420:	c9 f7       	brne	.-14     	; 0x1414 <__ultoa_invert+0x5c>
    1422:	f6 cf       	rjmp	.-20     	; 0x1410 <__ultoa_invert+0x58>
    1424:	46 2f       	mov	r20, r22
    1426:	4f 70       	andi	r20, 0x0F	; 15
    1428:	40 5d       	subi	r20, 0xD0	; 208
    142a:	4a 33       	cpi	r20, 0x3A	; 58
    142c:	18 f0       	brcs	.+6      	; 0x1434 <__ultoa_invert+0x7c>
    142e:	49 5d       	subi	r20, 0xD9	; 217
    1430:	31 fd       	sbrc	r19, 1
    1432:	40 52       	subi	r20, 0x20	; 32
    1434:	41 93       	st	Z+, r20
    1436:	02 d0       	rcall	.+4      	; 0x143c <__ultoa_invert+0x84>
    1438:	a9 f7       	brne	.-22     	; 0x1424 <__ultoa_invert+0x6c>
    143a:	ea cf       	rjmp	.-44     	; 0x1410 <__ultoa_invert+0x58>
    143c:	b4 e0       	ldi	r27, 0x04	; 4
    143e:	a6 95       	lsr	r26
    1440:	97 95       	ror	r25
    1442:	87 95       	ror	r24
    1444:	77 95       	ror	r23
    1446:	67 95       	ror	r22
    1448:	ba 95       	dec	r27
    144a:	c9 f7       	brne	.-14     	; 0x143e <__ultoa_invert+0x86>
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 05       	cpc	r22, r1
    1450:	71 05       	cpc	r23, r1
    1452:	08 95       	ret
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	0a 2e       	mov	r0, r26
    145a:	06 94       	lsr	r0
    145c:	57 95       	ror	r21
    145e:	47 95       	ror	r20
    1460:	37 95       	ror	r19
    1462:	27 95       	ror	r18
    1464:	ba 95       	dec	r27
    1466:	c9 f7       	brne	.-14     	; 0x145a <__ultoa_invert+0xa2>
    1468:	62 0f       	add	r22, r18
    146a:	73 1f       	adc	r23, r19
    146c:	84 1f       	adc	r24, r20
    146e:	95 1f       	adc	r25, r21
    1470:	a0 1d       	adc	r26, r0
    1472:	08 95       	ret

00001474 <__floatunsisf>:
__floatunsisf():
    1474:	e8 94       	clt
    1476:	09 c0       	rjmp	.+18     	; 0x148a <__floatsisf+0x12>

00001478 <__floatsisf>:
    1478:	97 fb       	bst	r25, 7
    147a:	3e f4       	brtc	.+14     	; 0x148a <__floatsisf+0x12>
    147c:	90 95       	com	r25
    147e:	80 95       	com	r24
    1480:	70 95       	com	r23
    1482:	61 95       	neg	r22
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	99 23       	and	r25, r25
    148c:	a9 f0       	breq	.+42     	; 0x14b8 <__floatsisf+0x40>
    148e:	f9 2f       	mov	r31, r25
    1490:	96 e9       	ldi	r25, 0x96	; 150
    1492:	bb 27       	eor	r27, r27
    1494:	93 95       	inc	r25
    1496:	f6 95       	lsr	r31
    1498:	87 95       	ror	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	b7 95       	ror	r27
    14a0:	f1 11       	cpse	r31, r1
    14a2:	f8 cf       	rjmp	.-16     	; 0x1494 <__floatsisf+0x1c>
    14a4:	fa f4       	brpl	.+62     	; 0x14e4 <__floatsisf+0x6c>
    14a6:	bb 0f       	add	r27, r27
    14a8:	11 f4       	brne	.+4      	; 0x14ae <__floatsisf+0x36>
    14aa:	60 ff       	sbrs	r22, 0
    14ac:	1b c0       	rjmp	.+54     	; 0x14e4 <__floatsisf+0x6c>
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	8f 4f       	sbci	r24, 0xFF	; 255
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	16 c0       	rjmp	.+44     	; 0x14e4 <__floatsisf+0x6c>
    14b8:	88 23       	and	r24, r24
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <__floatsisf+0x48>
    14bc:	96 e9       	ldi	r25, 0x96	; 150
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <__floatsisf+0x6a>
    14c0:	77 23       	and	r23, r23
    14c2:	21 f0       	breq	.+8      	; 0x14cc <__floatsisf+0x54>
    14c4:	9e e8       	ldi	r25, 0x8E	; 142
    14c6:	87 2f       	mov	r24, r23
    14c8:	76 2f       	mov	r23, r22
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <__floatsisf+0x5e>
    14cc:	66 23       	and	r22, r22
    14ce:	71 f0       	breq	.+28     	; 0x14ec <__floatsisf+0x74>
    14d0:	96 e8       	ldi	r25, 0x86	; 134
    14d2:	86 2f       	mov	r24, r22
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	2a f0       	brmi	.+10     	; 0x14e4 <__floatsisf+0x6c>
    14da:	9a 95       	dec	r25
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	da f7       	brpl	.-10     	; 0x14da <__floatsisf+0x62>
    14e4:	88 0f       	add	r24, r24
    14e6:	96 95       	lsr	r25
    14e8:	87 95       	ror	r24
    14ea:	97 f9       	bld	r25, 7
    14ec:	08 95       	ret

000014ee <__fp_inf>:
__fp_inf():
    14ee:	97 f9       	bld	r25, 7
    14f0:	9f 67       	ori	r25, 0x7F	; 127
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	08 95       	ret

000014fa <__fp_nan>:
__fp_nan():
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	80 ec       	ldi	r24, 0xC0	; 192
    14fe:	08 95       	ret

00001500 <__fp_pscA>:
__fp_pscA():
    1500:	00 24       	eor	r0, r0
    1502:	0a 94       	dec	r0
    1504:	16 16       	cp	r1, r22
    1506:	17 06       	cpc	r1, r23
    1508:	18 06       	cpc	r1, r24
    150a:	09 06       	cpc	r0, r25
    150c:	08 95       	ret

0000150e <__fp_pscB>:
__fp_pscB():
    150e:	00 24       	eor	r0, r0
    1510:	0a 94       	dec	r0
    1512:	12 16       	cp	r1, r18
    1514:	13 06       	cpc	r1, r19
    1516:	14 06       	cpc	r1, r20
    1518:	05 06       	cpc	r0, r21
    151a:	08 95       	ret

0000151c <__fp_round>:
__fp_round():
    151c:	09 2e       	mov	r0, r25
    151e:	03 94       	inc	r0
    1520:	00 0c       	add	r0, r0
    1522:	11 f4       	brne	.+4      	; 0x1528 <__fp_round+0xc>
    1524:	88 23       	and	r24, r24
    1526:	52 f0       	brmi	.+20     	; 0x153c <__fp_round+0x20>
    1528:	bb 0f       	add	r27, r27
    152a:	40 f4       	brcc	.+16     	; 0x153c <__fp_round+0x20>
    152c:	bf 2b       	or	r27, r31
    152e:	11 f4       	brne	.+4      	; 0x1534 <__fp_round+0x18>
    1530:	60 ff       	sbrs	r22, 0
    1532:	04 c0       	rjmp	.+8      	; 0x153c <__fp_round+0x20>
    1534:	6f 5f       	subi	r22, 0xFF	; 255
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	08 95       	ret

0000153e <__fp_split3>:
__fp_split3():
    153e:	57 fd       	sbrc	r21, 7
    1540:	90 58       	subi	r25, 0x80	; 128
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	59 f0       	breq	.+22     	; 0x155e <__fp_splitA+0x10>
    1548:	5f 3f       	cpi	r21, 0xFF	; 255
    154a:	71 f0       	breq	.+28     	; 0x1568 <__fp_splitA+0x1a>
    154c:	47 95       	ror	r20

0000154e <__fp_splitA>:
    154e:	88 0f       	add	r24, r24
    1550:	97 fb       	bst	r25, 7
    1552:	99 1f       	adc	r25, r25
    1554:	61 f0       	breq	.+24     	; 0x156e <__fp_splitA+0x20>
    1556:	9f 3f       	cpi	r25, 0xFF	; 255
    1558:	79 f0       	breq	.+30     	; 0x1578 <__fp_splitA+0x2a>
    155a:	87 95       	ror	r24
    155c:	08 95       	ret
    155e:	12 16       	cp	r1, r18
    1560:	13 06       	cpc	r1, r19
    1562:	14 06       	cpc	r1, r20
    1564:	55 1f       	adc	r21, r21
    1566:	f2 cf       	rjmp	.-28     	; 0x154c <__fp_split3+0xe>
    1568:	46 95       	lsr	r20
    156a:	f1 df       	rcall	.-30     	; 0x154e <__fp_splitA>
    156c:	08 c0       	rjmp	.+16     	; 0x157e <__fp_splitA+0x30>
    156e:	16 16       	cp	r1, r22
    1570:	17 06       	cpc	r1, r23
    1572:	18 06       	cpc	r1, r24
    1574:	99 1f       	adc	r25, r25
    1576:	f1 cf       	rjmp	.-30     	; 0x155a <__fp_splitA+0xc>
    1578:	86 95       	lsr	r24
    157a:	71 05       	cpc	r23, r1
    157c:	61 05       	cpc	r22, r1
    157e:	08 94       	sec
    1580:	08 95       	ret

00001582 <__fp_zero>:
__fp_zero():
    1582:	e8 94       	clt

00001584 <__fp_szero>:
    1584:	bb 27       	eor	r27, r27
    1586:	66 27       	eor	r22, r22
    1588:	77 27       	eor	r23, r23
    158a:	cb 01       	movw	r24, r22
    158c:	97 f9       	bld	r25, 7
    158e:	08 95       	ret

00001590 <eeprom_read_byte>:
eeprom_read_byte():
    1590:	f9 99       	sbic	0x1f, 1	; 31
    1592:	fe cf       	rjmp	.-4      	; 0x1590 <eeprom_read_byte>
    1594:	92 bd       	out	0x22, r25	; 34
    1596:	81 bd       	out	0x21, r24	; 33
    1598:	f8 9a       	sbi	0x1f, 0	; 31
    159a:	99 27       	eor	r25, r25
    159c:	80 b5       	in	r24, 0x20	; 32
    159e:	08 95       	ret

000015a0 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    15a0:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    15a2:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    15a4:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    15a6:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    15a8:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    15aa:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    15ac:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    15ae:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    15b0:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    15b2:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    15b4:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    15b6:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    15b8:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    15ba:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    15bc:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    15be:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    15c0:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    15c2:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    15c4:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    15c6:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    15c8:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    15ca:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    15cc:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    15ce:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    15d0:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    15d2:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    15d4:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    15d6:	09 94       	ijmp

000015d8 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    15d8:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    15da:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    15dc:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    15de:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    15e0:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    15e2:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    15e4:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    15e6:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    15e8:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    15ea:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    15ec:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    15ee:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    15f0:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    15f2:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    15f4:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    15f6:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    15f8:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    15fa:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    15fc:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    15fe:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1600:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1602:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1604:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1606:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1608:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    160a:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    160c:	08 95       	ret

0000160e <__subsf3>:
__subsf3():
    160e:	50 58       	subi	r21, 0x80	; 128

00001610 <__addsf3>:
    1610:	bb 27       	eor	r27, r27
    1612:	aa 27       	eor	r26, r26
    1614:	0e 94 1f 0b 	call	0x163e	; 0x163e <__addsf3x>
    1618:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__fp_round>
__addsf3():
    161c:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fp_pscA>
    1620:	38 f0       	brcs	.+14     	; 0x1630 <__addsf3+0x20>
    1622:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_pscB>
    1626:	20 f0       	brcs	.+8      	; 0x1630 <__addsf3+0x20>
    1628:	39 f4       	brne	.+14     	; 0x1638 <__addsf3+0x28>
    162a:	9f 3f       	cpi	r25, 0xFF	; 255
    162c:	19 f4       	brne	.+6      	; 0x1634 <__addsf3+0x24>
    162e:	26 f4       	brtc	.+8      	; 0x1638 <__addsf3+0x28>
    1630:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_nan>
    1634:	0e f4       	brtc	.+2      	; 0x1638 <__addsf3+0x28>
    1636:	e0 95       	com	r30
    1638:	e7 fb       	bst	r30, 7
    163a:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_inf>

0000163e <__addsf3x>:
__addsf3x():
    163e:	e9 2f       	mov	r30, r25
    1640:	0e 94 9f 0a 	call	0x153e	; 0x153e <__fp_split3>
    1644:	58 f3       	brcs	.-42     	; 0x161c <__addsf3+0xc>
    1646:	ba 17       	cp	r27, r26
    1648:	62 07       	cpc	r22, r18
    164a:	73 07       	cpc	r23, r19
    164c:	84 07       	cpc	r24, r20
    164e:	95 07       	cpc	r25, r21
    1650:	20 f0       	brcs	.+8      	; 0x165a <__addsf3x+0x1c>
    1652:	79 f4       	brne	.+30     	; 0x1672 <__addsf3x+0x34>
    1654:	a6 f5       	brtc	.+104    	; 0x16be <__addsf3x+0x80>
    1656:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__fp_zero>
    165a:	0e f4       	brtc	.+2      	; 0x165e <__addsf3x+0x20>
    165c:	e0 95       	com	r30
    165e:	0b 2e       	mov	r0, r27
    1660:	ba 2f       	mov	r27, r26
    1662:	a0 2d       	mov	r26, r0
    1664:	0b 01       	movw	r0, r22
    1666:	b9 01       	movw	r22, r18
    1668:	90 01       	movw	r18, r0
    166a:	0c 01       	movw	r0, r24
    166c:	ca 01       	movw	r24, r20
    166e:	a0 01       	movw	r20, r0
    1670:	11 24       	eor	r1, r1
    1672:	ff 27       	eor	r31, r31
    1674:	59 1b       	sub	r21, r25
    1676:	99 f0       	breq	.+38     	; 0x169e <__addsf3x+0x60>
    1678:	59 3f       	cpi	r21, 0xF9	; 249
    167a:	50 f4       	brcc	.+20     	; 0x1690 <__addsf3x+0x52>
    167c:	50 3e       	cpi	r21, 0xE0	; 224
    167e:	68 f1       	brcs	.+90     	; 0x16da <__addsf3x+0x9c>
    1680:	1a 16       	cp	r1, r26
    1682:	f0 40       	sbci	r31, 0x00	; 0
    1684:	a2 2f       	mov	r26, r18
    1686:	23 2f       	mov	r18, r19
    1688:	34 2f       	mov	r19, r20
    168a:	44 27       	eor	r20, r20
    168c:	58 5f       	subi	r21, 0xF8	; 248
    168e:	f3 cf       	rjmp	.-26     	; 0x1676 <__addsf3x+0x38>
    1690:	46 95       	lsr	r20
    1692:	37 95       	ror	r19
    1694:	27 95       	ror	r18
    1696:	a7 95       	ror	r26
    1698:	f0 40       	sbci	r31, 0x00	; 0
    169a:	53 95       	inc	r21
    169c:	c9 f7       	brne	.-14     	; 0x1690 <__addsf3x+0x52>
    169e:	7e f4       	brtc	.+30     	; 0x16be <__addsf3x+0x80>
    16a0:	1f 16       	cp	r1, r31
    16a2:	ba 0b       	sbc	r27, r26
    16a4:	62 0b       	sbc	r22, r18
    16a6:	73 0b       	sbc	r23, r19
    16a8:	84 0b       	sbc	r24, r20
    16aa:	ba f0       	brmi	.+46     	; 0x16da <__addsf3x+0x9c>
    16ac:	91 50       	subi	r25, 0x01	; 1
    16ae:	a1 f0       	breq	.+40     	; 0x16d8 <__addsf3x+0x9a>
    16b0:	ff 0f       	add	r31, r31
    16b2:	bb 1f       	adc	r27, r27
    16b4:	66 1f       	adc	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	88 1f       	adc	r24, r24
    16ba:	c2 f7       	brpl	.-16     	; 0x16ac <__addsf3x+0x6e>
    16bc:	0e c0       	rjmp	.+28     	; 0x16da <__addsf3x+0x9c>
    16be:	ba 0f       	add	r27, r26
    16c0:	62 1f       	adc	r22, r18
    16c2:	73 1f       	adc	r23, r19
    16c4:	84 1f       	adc	r24, r20
    16c6:	48 f4       	brcc	.+18     	; 0x16da <__addsf3x+0x9c>
    16c8:	87 95       	ror	r24
    16ca:	77 95       	ror	r23
    16cc:	67 95       	ror	r22
    16ce:	b7 95       	ror	r27
    16d0:	f7 95       	ror	r31
    16d2:	9e 3f       	cpi	r25, 0xFE	; 254
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <__addsf3x+0x9a>
    16d6:	b0 cf       	rjmp	.-160    	; 0x1638 <__addsf3+0x28>
    16d8:	93 95       	inc	r25
    16da:	88 0f       	add	r24, r24
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <__addsf3x+0xa2>
    16de:	99 27       	eor	r25, r25
    16e0:	ee 0f       	add	r30, r30
    16e2:	97 95       	ror	r25
    16e4:	87 95       	ror	r24
    16e6:	08 95       	ret

000016e8 <__fixsfsi>:
    16e8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__fixunssfsi>
    16ec:	68 94       	set
    16ee:	b1 11       	cpse	r27, r1
    16f0:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__fp_szero>
    16f4:	08 95       	ret

000016f6 <__fixunssfsi>:
    16f6:	0e 94 a7 0a 	call	0x154e	; 0x154e <__fp_splitA>
    16fa:	88 f0       	brcs	.+34     	; 0x171e <__fixunssfsi+0x28>
    16fc:	9f 57       	subi	r25, 0x7F	; 127
    16fe:	98 f0       	brcs	.+38     	; 0x1726 <__fixunssfsi+0x30>
    1700:	b9 2f       	mov	r27, r25
    1702:	99 27       	eor	r25, r25
    1704:	b7 51       	subi	r27, 0x17	; 23
    1706:	b0 f0       	brcs	.+44     	; 0x1734 <__fixunssfsi+0x3e>
    1708:	e1 f0       	breq	.+56     	; 0x1742 <__fixunssfsi+0x4c>
__fixunssfsi():
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	1a f0       	brmi	.+6      	; 0x171a <__fixunssfsi+0x24>
    1714:	ba 95       	dec	r27
    1716:	c9 f7       	brne	.-14     	; 0x170a <__fixunssfsi+0x14>
    1718:	14 c0       	rjmp	.+40     	; 0x1742 <__fixunssfsi+0x4c>
    171a:	b1 30       	cpi	r27, 0x01	; 1
    171c:	91 f0       	breq	.+36     	; 0x1742 <__fixunssfsi+0x4c>
    171e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fp_zero>
    1722:	b1 e0       	ldi	r27, 0x01	; 1
    1724:	08 95       	ret
    1726:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__fp_zero>
    172a:	67 2f       	mov	r22, r23
    172c:	78 2f       	mov	r23, r24
    172e:	88 27       	eor	r24, r24
    1730:	b8 5f       	subi	r27, 0xF8	; 248
    1732:	39 f0       	breq	.+14     	; 0x1742 <__fixunssfsi+0x4c>
    1734:	b9 3f       	cpi	r27, 0xF9	; 249
    1736:	cc f3       	brlt	.-14     	; 0x172a <__fixunssfsi+0x34>
    1738:	86 95       	lsr	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	b3 95       	inc	r27
    1740:	d9 f7       	brne	.-10     	; 0x1738 <__fixunssfsi+0x42>
    1742:	3e f4       	brtc	.+14     	; 0x1752 <__fixunssfsi+0x5c>
    1744:	90 95       	com	r25
    1746:	80 95       	com	r24
    1748:	70 95       	com	r23
    174a:	61 95       	neg	r22
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1754:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1756:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1758:	16 f4       	brtc	.+4      	; 0x175e <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    175a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    175c:	07 d0       	rcall	.+14     	; 0x176c <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    175e:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1760:	09 d0       	rcall	.+18     	; 0x1774 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1762:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1766:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1768:	05 d0       	rcall	.+10     	; 0x1774 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    176a:	3e f4       	brtc	.+14     	; 0x177a <__divmodhi4_exit>

0000176c <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    176c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    176e:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1772:	08 95       	ret

00001774 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1774:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1776:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1778:	7f 4f       	sbci	r23, 0xFF	; 255

0000177a <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    177a:	08 95       	ret

0000177c <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    177c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    177e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1780:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <__udivmodhi4_ep>

00001784 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1784:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1786:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1788:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    178a:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    178c:	10 f0       	brcs	.+4      	; 0x1792 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    178e:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1790:	b7 0b       	sbc	r27, r23

00001792 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1792:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1794:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1796:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1798:	a9 f7       	brne	.-22     	; 0x1784 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    179a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    179c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    179e:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    17a0:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    17a2:	08 95       	ret

000017a4 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    17a4:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    17a6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    17a8:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    17aa:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    17ac:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    17ae:	09 94       	ijmp

000017b0 <malloc>:
malloc():
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	91 05       	cpc	r25, r1
    17bc:	10 f4       	brcc	.+4      	; 0x17c2 <malloc+0x12>
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <__flp>
    17c6:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <__flp+0x1>
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	a0 e0       	ldi	r26, 0x00	; 0
    17d2:	30 97       	sbiw	r30, 0x00	; 0
    17d4:	99 f4       	brne	.+38     	; 0x17fc <malloc+0x4c>
    17d6:	21 15       	cp	r18, r1
    17d8:	31 05       	cpc	r19, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <malloc+0x2e>
    17dc:	4a c0       	rjmp	.+148    	; 0x1872 <malloc+0xc2>
    17de:	28 1b       	sub	r18, r24
    17e0:	39 0b       	sbc	r19, r25
    17e2:	24 30       	cpi	r18, 0x04	; 4
    17e4:	31 05       	cpc	r19, r1
    17e6:	d8 f5       	brcc	.+118    	; 0x185e <malloc+0xae>
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	9b 81       	ldd	r25, Y+3	; 0x03
    17ec:	61 15       	cp	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	89 f1       	breq	.+98     	; 0x1854 <malloc+0xa4>
    17f2:	fb 01       	movw	r30, r22
    17f4:	93 83       	std	Z+3, r25	; 0x03
    17f6:	82 83       	std	Z+2, r24	; 0x02
    17f8:	fe 01       	movw	r30, r28
    17fa:	11 c0       	rjmp	.+34     	; 0x181e <malloc+0x6e>
    17fc:	40 81       	ld	r20, Z
    17fe:	51 81       	ldd	r21, Z+1	; 0x01
    1800:	02 81       	ldd	r16, Z+2	; 0x02
    1802:	13 81       	ldd	r17, Z+3	; 0x03
    1804:	48 17       	cp	r20, r24
    1806:	59 07       	cpc	r21, r25
    1808:	e0 f0       	brcs	.+56     	; 0x1842 <malloc+0x92>
    180a:	48 17       	cp	r20, r24
    180c:	59 07       	cpc	r21, r25
    180e:	99 f4       	brne	.+38     	; 0x1836 <malloc+0x86>
    1810:	10 97       	sbiw	r26, 0x00	; 0
    1812:	61 f0       	breq	.+24     	; 0x182c <malloc+0x7c>
    1814:	12 96       	adiw	r26, 0x02	; 2
    1816:	0c 93       	st	X, r16
    1818:	12 97       	sbiw	r26, 0x02	; 2
    181a:	13 96       	adiw	r26, 0x03	; 3
    181c:	1c 93       	st	X, r17
    181e:	32 96       	adiw	r30, 0x02	; 2
    1820:	cf 01       	movw	r24, r30
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	08 95       	ret
    182c:	00 93 12 04 	sts	0x0412, r16	; 0x800412 <__flp>
    1830:	10 93 13 04 	sts	0x0413, r17	; 0x800413 <__flp+0x1>
    1834:	f4 cf       	rjmp	.-24     	; 0x181e <malloc+0x6e>
    1836:	21 15       	cp	r18, r1
    1838:	31 05       	cpc	r19, r1
    183a:	51 f0       	breq	.+20     	; 0x1850 <malloc+0xa0>
    183c:	42 17       	cp	r20, r18
    183e:	53 07       	cpc	r21, r19
    1840:	38 f0       	brcs	.+14     	; 0x1850 <malloc+0xa0>
    1842:	a9 01       	movw	r20, r18
    1844:	db 01       	movw	r26, r22
    1846:	9a 01       	movw	r18, r20
    1848:	bd 01       	movw	r22, r26
    184a:	df 01       	movw	r26, r30
    184c:	f8 01       	movw	r30, r16
    184e:	c1 cf       	rjmp	.-126    	; 0x17d2 <malloc+0x22>
    1850:	ef 01       	movw	r28, r30
    1852:	f9 cf       	rjmp	.-14     	; 0x1846 <malloc+0x96>
    1854:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <__flp+0x1>
    1858:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__flp>
    185c:	cd cf       	rjmp	.-102    	; 0x17f8 <malloc+0x48>
    185e:	fe 01       	movw	r30, r28
    1860:	e2 0f       	add	r30, r18
    1862:	f3 1f       	adc	r31, r19
    1864:	81 93       	st	Z+, r24
    1866:	91 93       	st	Z+, r25
    1868:	22 50       	subi	r18, 0x02	; 2
    186a:	31 09       	sbc	r19, r1
    186c:	39 83       	std	Y+1, r19	; 0x01
    186e:	28 83       	st	Y, r18
    1870:	d7 cf       	rjmp	.-82     	; 0x1820 <malloc+0x70>
    1872:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    1876:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    187a:	23 2b       	or	r18, r19
    187c:	41 f4       	brne	.+16     	; 0x188e <malloc+0xde>
    187e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
    1882:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
    1886:	30 93 11 04 	sts	0x0411, r19	; 0x800411 <__brkval+0x1>
    188a:	20 93 10 04 	sts	0x0410, r18	; 0x800410 <__brkval>
    188e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
    1892:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    1896:	21 15       	cp	r18, r1
    1898:	31 05       	cpc	r19, r1
    189a:	41 f4       	brne	.+16     	; 0x18ac <malloc+0xfc>
    189c:	2d b7       	in	r18, 0x3d	; 61
    189e:	3e b7       	in	r19, 0x3e	; 62
    18a0:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    18a4:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    18a8:	24 1b       	sub	r18, r20
    18aa:	35 0b       	sbc	r19, r21
    18ac:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <__brkval>
    18b0:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <__brkval+0x1>
    18b4:	e2 17       	cp	r30, r18
    18b6:	f3 07       	cpc	r31, r19
    18b8:	a0 f4       	brcc	.+40     	; 0x18e2 <malloc+0x132>
    18ba:	2e 1b       	sub	r18, r30
    18bc:	3f 0b       	sbc	r19, r31
    18be:	28 17       	cp	r18, r24
    18c0:	39 07       	cpc	r19, r25
    18c2:	78 f0       	brcs	.+30     	; 0x18e2 <malloc+0x132>
    18c4:	ac 01       	movw	r20, r24
    18c6:	4e 5f       	subi	r20, 0xFE	; 254
    18c8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ca:	24 17       	cp	r18, r20
    18cc:	35 07       	cpc	r19, r21
    18ce:	48 f0       	brcs	.+18     	; 0x18e2 <malloc+0x132>
    18d0:	4e 0f       	add	r20, r30
    18d2:	5f 1f       	adc	r21, r31
    18d4:	50 93 11 04 	sts	0x0411, r21	; 0x800411 <__brkval+0x1>
    18d8:	40 93 10 04 	sts	0x0410, r20	; 0x800410 <__brkval>
    18dc:	81 93       	st	Z+, r24
    18de:	91 93       	st	Z+, r25
    18e0:	9f cf       	rjmp	.-194    	; 0x1820 <malloc+0x70>
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	e0 e0       	ldi	r30, 0x00	; 0
    18e6:	9c cf       	rjmp	.-200    	; 0x1820 <malloc+0x70>

000018e8 <free>:
free():
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	e9 f0       	breq	.+58     	; 0x192a <free+0x42>
    18f0:	fc 01       	movw	r30, r24
    18f2:	32 97       	sbiw	r30, 0x02	; 2
    18f4:	13 82       	std	Z+3, r1	; 0x03
    18f6:	12 82       	std	Z+2, r1	; 0x02
    18f8:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <__flp>
    18fc:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <__flp+0x1>
    1900:	ed 01       	movw	r28, r26
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	10 97       	sbiw	r26, 0x00	; 0
    1908:	a1 f4       	brne	.+40     	; 0x1932 <free+0x4a>
    190a:	20 81       	ld	r18, Z
    190c:	31 81       	ldd	r19, Z+1	; 0x01
    190e:	82 0f       	add	r24, r18
    1910:	93 1f       	adc	r25, r19
    1912:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    1916:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    191a:	28 17       	cp	r18, r24
    191c:	39 07       	cpc	r19, r25
    191e:	09 f0       	breq	.+2      	; 0x1922 <free+0x3a>
    1920:	61 c0       	rjmp	.+194    	; 0x19e4 <free+0xfc>
    1922:	f0 93 11 04 	sts	0x0411, r31	; 0x800411 <__brkval+0x1>
    1926:	e0 93 10 04 	sts	0x0410, r30	; 0x800410 <__brkval>
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	08 95       	ret
    1930:	ea 01       	movw	r28, r20
    1932:	ce 17       	cp	r28, r30
    1934:	df 07       	cpc	r29, r31
    1936:	e8 f5       	brcc	.+122    	; 0x19b2 <free+0xca>
    1938:	4a 81       	ldd	r20, Y+2	; 0x02
    193a:	5b 81       	ldd	r21, Y+3	; 0x03
    193c:	9e 01       	movw	r18, r28
    193e:	41 15       	cp	r20, r1
    1940:	51 05       	cpc	r21, r1
    1942:	b1 f7       	brne	.-20     	; 0x1930 <free+0x48>
    1944:	e9 01       	movw	r28, r18
    1946:	fb 83       	std	Y+3, r31	; 0x03
    1948:	ea 83       	std	Y+2, r30	; 0x02
    194a:	49 91       	ld	r20, Y+
    194c:	59 91       	ld	r21, Y+
    194e:	c4 0f       	add	r28, r20
    1950:	d5 1f       	adc	r29, r21
    1952:	ec 17       	cp	r30, r28
    1954:	fd 07       	cpc	r31, r29
    1956:	61 f4       	brne	.+24     	; 0x1970 <free+0x88>
    1958:	80 81       	ld	r24, Z
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	02 96       	adiw	r24, 0x02	; 2
    195e:	84 0f       	add	r24, r20
    1960:	95 1f       	adc	r25, r21
    1962:	e9 01       	movw	r28, r18
    1964:	99 83       	std	Y+1, r25	; 0x01
    1966:	88 83       	st	Y, r24
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	9b 83       	std	Y+3, r25	; 0x03
    196e:	8a 83       	std	Y+2, r24	; 0x02
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	e0 e0       	ldi	r30, 0x00	; 0
    1974:	12 96       	adiw	r26, 0x02	; 2
    1976:	8d 91       	ld	r24, X+
    1978:	9c 91       	ld	r25, X
    197a:	13 97       	sbiw	r26, 0x03	; 3
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	b9 f5       	brne	.+110    	; 0x19ee <free+0x106>
    1980:	2d 91       	ld	r18, X+
    1982:	3c 91       	ld	r19, X
    1984:	11 97       	sbiw	r26, 0x01	; 1
    1986:	cd 01       	movw	r24, r26
    1988:	02 96       	adiw	r24, 0x02	; 2
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <__brkval>
    1992:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <__brkval+0x1>
    1996:	28 17       	cp	r18, r24
    1998:	39 07       	cpc	r19, r25
    199a:	39 f6       	brne	.-114    	; 0x192a <free+0x42>
    199c:	30 97       	sbiw	r30, 0x00	; 0
    199e:	51 f5       	brne	.+84     	; 0x19f4 <free+0x10c>
    19a0:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <__flp+0x1>
    19a4:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__flp>
    19a8:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <__brkval+0x1>
    19ac:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <__brkval>
    19b0:	bc cf       	rjmp	.-136    	; 0x192a <free+0x42>
    19b2:	d3 83       	std	Z+3, r29	; 0x03
    19b4:	c2 83       	std	Z+2, r28	; 0x02
    19b6:	40 81       	ld	r20, Z
    19b8:	51 81       	ldd	r21, Z+1	; 0x01
    19ba:	84 0f       	add	r24, r20
    19bc:	95 1f       	adc	r25, r21
    19be:	c8 17       	cp	r28, r24
    19c0:	d9 07       	cpc	r29, r25
    19c2:	61 f4       	brne	.+24     	; 0x19dc <free+0xf4>
    19c4:	4e 5f       	subi	r20, 0xFE	; 254
    19c6:	5f 4f       	sbci	r21, 0xFF	; 255
    19c8:	88 81       	ld	r24, Y
    19ca:	99 81       	ldd	r25, Y+1	; 0x01
    19cc:	48 0f       	add	r20, r24
    19ce:	59 1f       	adc	r21, r25
    19d0:	51 83       	std	Z+1, r21	; 0x01
    19d2:	40 83       	st	Z, r20
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	9b 81       	ldd	r25, Y+3	; 0x03
    19d8:	93 83       	std	Z+3, r25	; 0x03
    19da:	82 83       	std	Z+2, r24	; 0x02
    19dc:	21 15       	cp	r18, r1
    19de:	31 05       	cpc	r19, r1
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <free+0xfc>
    19e2:	b0 cf       	rjmp	.-160    	; 0x1944 <free+0x5c>
    19e4:	f0 93 13 04 	sts	0x0413, r31	; 0x800413 <__flp+0x1>
    19e8:	e0 93 12 04 	sts	0x0412, r30	; 0x800412 <__flp>
    19ec:	9e cf       	rjmp	.-196    	; 0x192a <free+0x42>
    19ee:	fd 01       	movw	r30, r26
    19f0:	dc 01       	movw	r26, r24
    19f2:	c0 cf       	rjmp	.-128    	; 0x1974 <free+0x8c>
    19f4:	13 82       	std	Z+3, r1	; 0x03
    19f6:	12 82       	std	Z+2, r1	; 0x02
    19f8:	d7 cf       	rjmp	.-82     	; 0x19a8 <free+0xc0>

000019fa <realloc>:
realloc():
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	e3 e0       	ldi	r30, 0x03	; 3
    1a00:	fd e0       	ldi	r31, 0x0D	; 13
    1a02:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__prologue_saves__+0x4>
    1a06:	8c 01       	movw	r16, r24
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	51 f4       	brne	.+20     	; 0x1a20 <realloc+0x26>
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <malloc>
    1a12:	8c 01       	movw	r16, r24
    1a14:	c8 01       	movw	r24, r16
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	e0 e1       	ldi	r30, 0x10	; 16
    1a1c:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__epilogue_restores__+0x4>
    1a20:	fc 01       	movw	r30, r24
    1a22:	e6 0f       	add	r30, r22
    1a24:	f7 1f       	adc	r31, r23
    1a26:	9c 01       	movw	r18, r24
    1a28:	22 50       	subi	r18, 0x02	; 2
    1a2a:	31 09       	sbc	r19, r1
    1a2c:	e2 17       	cp	r30, r18
    1a2e:	f3 07       	cpc	r31, r19
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <realloc+0x3a>
    1a32:	9d c0       	rjmp	.+314    	; 0x1b6e <realloc+0x174>
    1a34:	d9 01       	movw	r26, r18
    1a36:	cd 91       	ld	r28, X+
    1a38:	dc 91       	ld	r29, X
    1a3a:	11 97       	sbiw	r26, 0x01	; 1
    1a3c:	c6 17       	cp	r28, r22
    1a3e:	d7 07       	cpc	r29, r23
    1a40:	98 f0       	brcs	.+38     	; 0x1a68 <realloc+0x6e>
    1a42:	c5 30       	cpi	r28, 0x05	; 5
    1a44:	d1 05       	cpc	r29, r1
    1a46:	30 f3       	brcs	.-52     	; 0x1a14 <realloc+0x1a>
    1a48:	ce 01       	movw	r24, r28
    1a4a:	04 97       	sbiw	r24, 0x04	; 4
    1a4c:	86 17       	cp	r24, r22
    1a4e:	97 07       	cpc	r25, r23
    1a50:	08 f3       	brcs	.-62     	; 0x1a14 <realloc+0x1a>
    1a52:	c6 1b       	sub	r28, r22
    1a54:	d7 0b       	sbc	r29, r23
    1a56:	22 97       	sbiw	r28, 0x02	; 2
    1a58:	c1 93       	st	Z+, r28
    1a5a:	d1 93       	st	Z+, r29
    1a5c:	6d 93       	st	X+, r22
    1a5e:	7c 93       	st	X, r23
    1a60:	cf 01       	movw	r24, r30
    1a62:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <free>
    1a66:	d6 cf       	rjmp	.-84     	; 0x1a14 <realloc+0x1a>
    1a68:	5b 01       	movw	r10, r22
    1a6a:	ac 1a       	sub	r10, r28
    1a6c:	bd 0a       	sbc	r11, r29
    1a6e:	4c 01       	movw	r8, r24
    1a70:	8c 0e       	add	r8, r28
    1a72:	9d 1e       	adc	r9, r29
    1a74:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <__flp>
    1a78:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <__flp+0x1>
    1a7c:	51 2c       	mov	r5, r1
    1a7e:	41 2c       	mov	r4, r1
    1a80:	f1 2c       	mov	r15, r1
    1a82:	e1 2c       	mov	r14, r1
    1a84:	10 97       	sbiw	r26, 0x00	; 0
    1a86:	31 f5       	brne	.+76     	; 0x1ad4 <realloc+0xda>
    1a88:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <__brkval>
    1a8c:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <__brkval+0x1>
    1a90:	88 15       	cp	r24, r8
    1a92:	99 05       	cpc	r25, r9
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <realloc+0x9e>
    1a96:	5c c0       	rjmp	.+184    	; 0x1b50 <realloc+0x156>
    1a98:	46 16       	cp	r4, r22
    1a9a:	57 06       	cpc	r5, r23
    1a9c:	08 f0       	brcs	.+2      	; 0x1aa0 <realloc+0xa6>
    1a9e:	58 c0       	rjmp	.+176    	; 0x1b50 <realloc+0x156>
    1aa0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_end>
    1aa4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	41 f4       	brne	.+16     	; 0x1abc <realloc+0xc2>
    1aac:	8d b7       	in	r24, 0x3d	; 61
    1aae:	9e b7       	in	r25, 0x3e	; 62
    1ab0:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    1ab4:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    1ab8:	84 1b       	sub	r24, r20
    1aba:	95 0b       	sbc	r25, r21
    1abc:	e8 17       	cp	r30, r24
    1abe:	f9 07       	cpc	r31, r25
    1ac0:	08 f0       	brcs	.+2      	; 0x1ac4 <realloc+0xca>
    1ac2:	55 c0       	rjmp	.+170    	; 0x1b6e <realloc+0x174>
    1ac4:	f0 93 11 04 	sts	0x0411, r31	; 0x800411 <__brkval+0x1>
    1ac8:	e0 93 10 04 	sts	0x0410, r30	; 0x800410 <__brkval>
    1acc:	f9 01       	movw	r30, r18
    1ace:	71 83       	std	Z+1, r23	; 0x01
    1ad0:	60 83       	st	Z, r22
    1ad2:	a0 cf       	rjmp	.-192    	; 0x1a14 <realloc+0x1a>
    1ad4:	8d 91       	ld	r24, X+
    1ad6:	9c 91       	ld	r25, X
    1ad8:	11 97       	sbiw	r26, 0x01	; 1
    1ada:	12 96       	adiw	r26, 0x02	; 2
    1adc:	6c 90       	ld	r6, X
    1ade:	12 97       	sbiw	r26, 0x02	; 2
    1ae0:	13 96       	adiw	r26, 0x03	; 3
    1ae2:	7c 90       	ld	r7, X
    1ae4:	13 97       	sbiw	r26, 0x03	; 3
    1ae6:	a8 15       	cp	r26, r8
    1ae8:	b9 05       	cpc	r27, r9
    1aea:	59 f5       	brne	.+86     	; 0x1b42 <realloc+0x148>
    1aec:	6c 01       	movw	r12, r24
    1aee:	42 e0       	ldi	r20, 0x02	; 2
    1af0:	c4 0e       	add	r12, r20
    1af2:	d1 1c       	adc	r13, r1
    1af4:	ca 14       	cp	r12, r10
    1af6:	db 04       	cpc	r13, r11
    1af8:	20 f1       	brcs	.+72     	; 0x1b42 <realloc+0x148>
    1afa:	ac 01       	movw	r20, r24
    1afc:	4a 19       	sub	r20, r10
    1afe:	5b 09       	sbc	r21, r11
    1b00:	da 01       	movw	r26, r20
    1b02:	12 96       	adiw	r26, 0x02	; 2
    1b04:	15 97       	sbiw	r26, 0x05	; 5
    1b06:	80 f0       	brcs	.+32     	; 0x1b28 <realloc+0x12e>
    1b08:	62 82       	std	Z+2, r6	; 0x02
    1b0a:	73 82       	std	Z+3, r7	; 0x03
    1b0c:	51 83       	std	Z+1, r21	; 0x01
    1b0e:	40 83       	st	Z, r20
    1b10:	d9 01       	movw	r26, r18
    1b12:	6d 93       	st	X+, r22
    1b14:	7c 93       	st	X, r23
    1b16:	e1 14       	cp	r14, r1
    1b18:	f1 04       	cpc	r15, r1
    1b1a:	71 f0       	breq	.+28     	; 0x1b38 <realloc+0x13e>
    1b1c:	d7 01       	movw	r26, r14
    1b1e:	13 96       	adiw	r26, 0x03	; 3
    1b20:	fc 93       	st	X, r31
    1b22:	ee 93       	st	-X, r30
    1b24:	12 97       	sbiw	r26, 0x02	; 2
    1b26:	76 cf       	rjmp	.-276    	; 0x1a14 <realloc+0x1a>
    1b28:	22 96       	adiw	r28, 0x02	; 2
    1b2a:	8c 0f       	add	r24, r28
    1b2c:	9d 1f       	adc	r25, r29
    1b2e:	f9 01       	movw	r30, r18
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	f3 01       	movw	r30, r6
    1b36:	ef cf       	rjmp	.-34     	; 0x1b16 <realloc+0x11c>
    1b38:	f0 93 13 04 	sts	0x0413, r31	; 0x800413 <__flp+0x1>
    1b3c:	e0 93 12 04 	sts	0x0412, r30	; 0x800412 <__flp>
    1b40:	69 cf       	rjmp	.-302    	; 0x1a14 <realloc+0x1a>
    1b42:	48 16       	cp	r4, r24
    1b44:	59 06       	cpc	r5, r25
    1b46:	08 f4       	brcc	.+2      	; 0x1b4a <realloc+0x150>
    1b48:	2c 01       	movw	r4, r24
    1b4a:	7d 01       	movw	r14, r26
    1b4c:	d3 01       	movw	r26, r6
    1b4e:	9a cf       	rjmp	.-204    	; 0x1a84 <realloc+0x8a>
    1b50:	cb 01       	movw	r24, r22
    1b52:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <malloc>
    1b56:	7c 01       	movw	r14, r24
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	49 f0       	breq	.+18     	; 0x1b6e <realloc+0x174>
    1b5c:	ae 01       	movw	r20, r28
    1b5e:	b8 01       	movw	r22, r16
    1b60:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <memcpy>
    1b64:	c8 01       	movw	r24, r16
    1b66:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <free>
    1b6a:	87 01       	movw	r16, r14
    1b6c:	53 cf       	rjmp	.-346    	; 0x1a14 <realloc+0x1a>
    1b6e:	10 e0       	ldi	r17, 0x00	; 0
    1b70:	00 e0       	ldi	r16, 0x00	; 0
    1b72:	50 cf       	rjmp	.-352    	; 0x1a14 <realloc+0x1a>

00001b74 <memcpy>:
memcpy():
    1b74:	fb 01       	movw	r30, r22
    1b76:	dc 01       	movw	r26, r24
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <memcpy+0xa>
    1b7a:	01 90       	ld	r0, Z+
    1b7c:	0d 92       	st	X+, r0
    1b7e:	41 50       	subi	r20, 0x01	; 1
    1b80:	50 40       	sbci	r21, 0x00	; 0
    1b82:	d8 f7       	brcc	.-10     	; 0x1b7a <memcpy+0x6>
    1b84:	08 95       	ret

00001b86 <strcpy>:
strcpy():
    1b86:	fb 01       	movw	r30, r22
    1b88:	dc 01       	movw	r26, r24
    1b8a:	01 90       	ld	r0, Z+
    1b8c:	0d 92       	st	X+, r0
    1b8e:	00 20       	and	r0, r0
    1b90:	e1 f7       	brne	.-8      	; 0x1b8a <strcpy+0x4>
    1b92:	08 95       	ret

00001b94 <sprintf>:
sprintf():
    1b94:	ae e0       	ldi	r26, 0x0E	; 14
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e0 ed       	ldi	r30, 0xD0	; 208
    1b9a:	fd e0       	ldi	r31, 0x0D	; 13
    1b9c:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__prologue_saves__+0x1c>
    1ba0:	0d 89       	ldd	r16, Y+21	; 0x15
    1ba2:	1e 89       	ldd	r17, Y+22	; 0x16
    1ba4:	86 e0       	ldi	r24, 0x06	; 6
    1ba6:	8c 83       	std	Y+4, r24	; 0x04
    1ba8:	1a 83       	std	Y+2, r17	; 0x02
    1baa:	09 83       	std	Y+1, r16	; 0x01
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	9f e7       	ldi	r25, 0x7F	; 127
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	ae 01       	movw	r20, r28
    1bb6:	47 5e       	subi	r20, 0xE7	; 231
    1bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bba:	6f 89       	ldd	r22, Y+23	; 0x17
    1bbc:	78 8d       	ldd	r23, Y+24	; 0x18
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	0e 94 bc 07 	call	0xf78	; 0xf78 <vfprintf>
    1bc6:	2f 81       	ldd	r18, Y+7	; 0x07
    1bc8:	38 85       	ldd	r19, Y+8	; 0x08
    1bca:	02 0f       	add	r16, r18
    1bcc:	13 1f       	adc	r17, r19
    1bce:	f8 01       	movw	r30, r16
    1bd0:	10 82       	st	Z, r1
    1bd2:	2e 96       	adiw	r28, 0x0e	; 14
    1bd4:	e4 e0       	ldi	r30, 0x04	; 4
    1bd6:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__epilogue_restores__+0x1c>

00001bda <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1bda:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1bdc:	c2 e6       	ldi	r28, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1bde:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1be2:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1be4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1be8:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1bea:	c3 36       	cpi	r28, 0x63	; 99
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1bec:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1bee:	c9 f7       	brne	.-14     	; 0x1be2 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1bf0:	f8 94       	cli

00001bf2 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1bf2:	ff cf       	rjmp	.-2      	; 0x1bf2 <__stop_program>
